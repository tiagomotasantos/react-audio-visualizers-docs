I"Áj<h1 id="auth-providers">Auth Providers</h1>

<p><img src="./img/login.gif" alt="Login" /></p>

<p>React-admin lets you secure your admin app with the authentication strategy of your choice. Since there are many possible strategies (Basic Auth, JWT, OAuth, etc.), react-admin delegates authentication logic to an <code class="language-plaintext highlighter-rouge">authProvider</code>.</p>

<h2 id="enabling-auth-features">Enabling Auth Features</h2>

<p>By default, react-admin apps don‚Äôt require authentication. To restrict access to the admin, pass an <code class="language-plaintext highlighter-rouge">authProvider</code> to the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="nx">authProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./authProvider</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>React-admin delegates the <a href="#authentication">Authentication</a> and <a href="#authorization">Authorization</a> logic to an object that you must write, the <code class="language-plaintext highlighter-rouge">authProvider</code>.</p>

<ul>
  <li>‚ÄúAuthentication‚Äù logic allows to restrict an app to identified users only, and reject anonymous users</li>
  <li>‚ÄúAuthorization‚Äù logic allows to tweak the features based on user permissions</li>
</ul>

<h2 id="anatomy-of-an-authprovider">Anatomy Of An <code class="language-plaintext highlighter-rouge">authProvider</code></h2>

<p>What‚Äôs an <code class="language-plaintext highlighter-rouge">authProvider</code>? Just like a <code class="language-plaintext highlighter-rouge">dataProvider</code>, an <code class="language-plaintext highlighter-rouge">authProvider</code> is an object that handles authentication and authorization logic. It exposes methods that react-admin calls when needed, and that you can call manually through specialized <a href="#hooks">hooks</a>. The <code class="language-plaintext highlighter-rouge">authProvider</code> methods must return a Promise. The simplest <code class="language-plaintext highlighter-rouge">authProvider</code> is:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">authProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// authentication</span>
    <span class="na">login</span><span class="p">:</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
    <span class="na">getIdentity</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
    <span class="c1">// authorization</span>
    <span class="na">getPermissions</span><span class="p">:</span> <span class="nx">params</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(),</span>
<span class="p">};</span>
</code></pre></div></div>

<p>You can get more details about input params, response and error formats in the <a href="#building-your-own-auth-provider">Building Your Own Auth Provider section</a> below.</p>

<p><strong>Tip</strong>: In react-admin version 2.0, the <code class="language-plaintext highlighter-rouge">authProvider</code> used to be a function instead of an object. React-admin 3.0 accepts both object and (legacy) function authProviders.</p>

<h2 id="available-providers">Available Providers</h2>

<p>It‚Äôs very common that your auth logic is so specific that you‚Äôll need to write your own <code class="language-plaintext highlighter-rouge">authProvider</code>. However, the community has built a few open-source Auth Providers that may fit your need:</p>

<ul>
  <li><strong><a href="https://docs.amplify.aws">AWS Amplify</a></strong>: <a href="https://github.com/MrHertal/react-admin-amplify">MrHertal/react-admin-amplify</a></li>
  <li><strong><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/setting-up-the-javascript-sdk.html">AWS Cognito</a></strong>: <a href="https://github.com/thedistance/ra-cognito">thedistance/ra-cognito</a></li>
  <li><strong><a href="https://firebase.google.com/docs/auth/web/firebaseui">Firebase Auth (Google, Facebook, Github etc)</a></strong>: <a href="https://github.com/benwinding/react-admin-firebase#auth-provider">benwinding/react-admin-firebase</a></li>
</ul>

<p>Beyond ready-to-use providers, you may find help in these third-party tutorials about integrating more authentication backends:</p>

<ul>
  <li><strong><a href="https://auth0.com/docs/libraries/auth0-single-page-app-sdk">Auth0</a></strong>: <a href="https://github.com/spintech-software/react-admin-auth0-example">spintech-software/react-admin-auth0-example</a></li>
  <li><strong><a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser">Azure Active Directory</a></strong>: <a href="https://github.com/victorp13/react-admin-msal">victorp13/react-admin-msal</a></li>
  <li><strong><a href="https://loopback.io/doc/en/lb4/Authentication-overview.html">Loopback</a></strong>: <a href="https://dev.to/appsmith/building-an-admin-dashboard-with-react-admin-86i#adding-authentication-to-reactadmin">appsmith dev.to tutorial</a></li>
</ul>

<p>If you have released a reusable <code class="language-plaintext highlighter-rouge">authProvider</code>, or a tutorial for another auth backend, please open a PR to add it to this list!</p>

<h2 id="authentication">Authentication</h2>

<p>Let‚Äôs see when react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider</code>, and how customize it depending on your authentication strategy and backend.</p>

<h3 id="login-configuration">Login Configuration</h3>

<p>Once an admin has an <code class="language-plaintext highlighter-rouge">authProvider</code>, react-admin enables a new page on the <code class="language-plaintext highlighter-rouge">/login</code> route, which displays a login form asking for a username and password.</p>

<p><img src="./img/login-form.png" alt="Default Login Form" /></p>

<p>Upon submission, this form calls the <code class="language-plaintext highlighter-rouge">authProvider.login({ login, password })</code> method. React-admin expects this method to return a resolved Promise if the credentials are correct, and a rejected Promise if they‚Äôre not.</p>

<p>For instance, to query an authentication route via HTTPS and store the credentials (a token) in local storage, configure the <code class="language-plaintext highlighter-rouge">authProvider</code> as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="kd">const</span> <span class="nx">authProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span>  <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://mydomain.com/authenticate</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}),</span>
            <span class="na">headers</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">({</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">}),</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">auth</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">auth</span><span class="p">));</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Network error</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">});</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">authProvider</span><span class="p">;</span>
</code></pre></div></div>

<p>Once the promise resolves, the login form redirects to the previous page, or to the admin index if the user just arrived.</p>

<p><strong>Tip</strong>: It‚Äôs a good idea to store credentials in <code class="language-plaintext highlighter-rouge">localStorage</code>, as in this example, to avoid reconnection when opening a new browser tab. But this makes your application <a href="https://www.redotheweb.com/2015/11/09/api-security.html">open to XSS attacks</a>, so you‚Äôd better double down on security, and add an <code class="language-plaintext highlighter-rouge">httpOnly</code> cookie on the server side, too.</p>

<p>If the login fails, <code class="language-plaintext highlighter-rouge">authProvider.login()</code> should return a rejected Promise with an Error object. React-admin displays the Error message to the user in a notification.</p>

<h3 id="sending-credentials-to-the-api">Sending Credentials To The API</h3>

<p>Now the user has logged in, you can use their credentials in the <code class="language-plaintext highlighter-rouge">dataProvider</code> to communicate with the data API. As explained in the <a href="DataProviders.md#adding-custom-headers">Data providers documentation</a>, <code class="language-plaintext highlighter-rouge">simpleRestProvider</code> and <code class="language-plaintext highlighter-rouge">jsonServerProvider</code> take an <code class="language-plaintext highlighter-rouge">httpClient</code> as second parameter. That‚Äôs the place where you can change request headers, cookies, etc.</p>

<p>For instance, to pass the token obtained during login as an <code class="language-plaintext highlighter-rouge">Authorization</code> header, configure the Data Provider as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">fetchUtils</span><span class="p">,</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">httpClient</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">({</span> <span class="na">Accept</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">token</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">));</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">,</span> <span class="s2">`Bearer </span><span class="p">${</span><span class="nx">token</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">fetchUtils</span><span class="p">.</span><span class="nx">fetchJson</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000</span><span class="dl">'</span><span class="p">,</span> <span class="nx">httpClient</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">dataProvider</span><span class="si">}</span> <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Now the admin is secured: The user can be authenticated and use their credentials to communicate with a secure API.</p>

<p>If you have a custom REST client, don‚Äôt forget to add credentials yourself.</p>

<h3 id="catching-authentication-errors-on-the-api">Catching Authentication Errors On The API</h3>

<p>When the user credentials are missing or become invalid, a secure API usually answers to the <code class="language-plaintext highlighter-rouge">dataProvider</code> with an HTTP error code 401 or 403.</p>

<p>Fortunately, each time the <code class="language-plaintext highlighter-rouge">dataProvider</code> returns an error, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.checkError()</code> method. If it returns a rejected promise, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> method immediately, and asks the user to log in again.</p>

<p>So it‚Äôs up to you to decide which HTTP status codes should let the user continue (by returning a resolved promise) or log them out (by returning a rejected promise).</p>

<p>For instance, to log the user out for both 401 and 403 codes:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">401</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">===</span> <span class="mi">403</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="c1">// other error code (404, 500, etc): no need to log out</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">authProvider.checkError()</code> returns a rejected Promise, react-admin redirects to the <code class="language-plaintext highlighter-rouge">/login</code> page, or to the <code class="language-plaintext highlighter-rouge">error.redirectTo</code> url. That means you can override the default redirection as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">401</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">===</span> <span class="mi">403</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/credentials-required</span><span class="dl">'</span> <span class="p">});</span>
        <span class="p">}</span>
        <span class="c1">// other error code (404, 500, etc): no need to log out</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>It‚Äôs possible to not log the user out, and to instead redirect them. You can do this by passing <code class="language-plaintext highlighter-rouge">error.logoutUser = false</code> to the <code class="language-plaintext highlighter-rouge">Promise.reject</code> along with an <code class="language-plaintext highlighter-rouge">error.redirectTo</code> url.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">401</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">===</span> <span class="mi">403</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/unauthorized</span><span class="dl">'</span><span class="p">,</span> <span class="na">logoutUser</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
        <span class="p">}</span>
        <span class="c1">// other error code (404, 500, etc): no need to log out</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">authProvider.checkError()</code> returns a rejected Promise, react-admin displays a notification to the end user, unless the <code class="language-plaintext highlighter-rouge">error.message</code> is <code class="language-plaintext highlighter-rouge">false</code>. That means you can disable the notification on error as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">401</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">===</span> <span class="mi">403</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
        <span class="p">}</span>
        <span class="c1">// other error code (404, 500, etc): no need to log out</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="checking-credentials-during-navigation">Checking Credentials During Navigation</h3>

<p>Redirecting to the login page whenever a REST response uses a 401 status code is usually not enough. React-admin keeps data on the client side, and could briefly display stale data while contacting the server - even after the credentials are no longer valid.</p>

<p>Fortunately, each time the user navigates to a list, edit, create or show page, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.checkAuth()</code> method. If this method returns a rejected Promise, react-admin calls <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> and redirects the user to the login page. So it‚Äôs the ideal place to make sure the credentials are still valid.</p>

<p>For instance, to check for the existence of the authentication data in local storage:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
        <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(),</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<p>If the promise is rejected, react-admin redirects by default to the <code class="language-plaintext highlighter-rouge">/login</code> page. You can override where to redirect the user in <code class="language-plaintext highlighter-rouge">checkAuth()</code>, by rejecting an object with a <code class="language-plaintext highlighter-rouge">redirectTo</code> property:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
        <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/no-access</span><span class="dl">'</span> <span class="p">}),</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If both <code class="language-plaintext highlighter-rouge">authProvider.checkAuth()</code> and <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> return a redirect URL, the one from <code class="language-plaintext highlighter-rouge">authProvider.checkAuth()</code> takes precedence.</p>

<p>If the promise is rejected, react-admin displays a notification to the end user. You can customize this message by rejecting an error with a <code class="language-plaintext highlighter-rouge">message</code> property:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
        <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">login.required</span><span class="dl">'</span> <span class="p">}),</span> <span class="c1">// react-admin passes the error message to the translation layer</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can also disable this notification completely by rejecting an error with a <code class="language-plaintext highlighter-rouge">message</code> with a <code class="language-plaintext highlighter-rouge">false</code> value:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span>
        <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}),</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="logout-configuration">Logout Configuration</h3>

<p>If you enable authentication, react-admin adds a logout button in the user menu in the top bar (or in the sliding menu on mobile). When the user clicks on the logout button, this calls the <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> method, and removes potentially sensitive data from the Redux store. Then the user gets redirected to the login page. The two previous sections also illustrated that react-admin can call <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> itself, when the API returns a 403 error or when the local credentials expire.</p>

<p>It‚Äôs the responsibility of the <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> method to clean up the current authentication data. For instance, if the authentication was a token stored in local storage, here is the code to remove it:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="./img/logout.gif" alt="Logout button" /></p>

<p>The <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> method is also a good place to notify the authentication backend that the user credentials are no longer valid after logout.</p>

<p>After logout, react-admin redirects the user to the string returned by <code class="language-plaintext highlighter-rouge">authProvider.logout()</code> - or to the <code class="language-plaintext highlighter-rouge">/login</code> url if the method returns nothing. You can customize the redirection url by returning a route string, or <code class="language-plaintext highlighter-rouge">false</code> to disable redirection after logout.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">/my-custom-login</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="user-identity">User Identity</h3>

<p>React-admin can display the current user name and avatar on the top right side of the screen. To enable this feature, implement the <code class="language-plaintext highlighter-rouge">authProvider.getIdentity()</code> method:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="kd">const</span> <span class="nx">authProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">getIdentity</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">fullName</span><span class="p">,</span> <span class="nx">avatar</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">));</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">fullName</span><span class="p">,</span> <span class="nx">avatar</span> <span class="p">});</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">authProvider</span><span class="p">;</span>
</code></pre></div></div>

<p>React-admin uses the <code class="language-plaintext highlighter-rouge">fullName</code> and the <code class="language-plaintext highlighter-rouge">avatar</code> (an image source, or a data-uri) in the App Bar:</p>

<p><img src="./img/identity.png" alt="User identity" /></p>

<p><strong>Tip</strong>: You can use the <code class="language-plaintext highlighter-rouge">id</code> field to identify the current user in your code, by calling the <code class="language-plaintext highlighter-rouge">useGetIdentity</code> hook:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useGetIdentity</span><span class="p">,</span> <span class="nx">useGetOne</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostDetail</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="nx">post</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">postLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">identity</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">identityLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetIdentity</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">postLoading</span> <span class="o">||</span> <span class="nx">identityLoading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;&gt;</span>Loading...<span class="p">&lt;/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">post</span><span class="p">.</span><span class="nx">lockedBy</span> <span class="o">||</span> <span class="nx">post</span><span class="p">.</span><span class="nx">lockedBy</span> <span class="o">===</span> <span class="nx">identity</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// post isn't locked, or is locked by me</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">PostEdit</span> <span class="na">post</span><span class="p">=</span><span class="si">{</span><span class="nx">post</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// post is locked by someone else and cannot be edited</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">PostShow</span> <span class="na">post</span><span class="p">=</span><span class="si">{</span><span class="nx">post</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="authorization">Authorization</h2>

<p>Some applications may require fine-grained permissions to enable or disable access to certain features depending on user permissions. Since there are many possible strategies (single role, multiple roles or rights, ACLs, etc.), react-admin delegates the permission logic to <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code>.</p>

<p>By default, a react-admin app doesn‚Äôt require any special permission on list, create, edit, and show pages. However, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> method before navigating to these pages, and passes the result to the main page component (<code class="language-plaintext highlighter-rouge">&lt;List&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Edit&gt;</code>, etc.). You can then tweak the content of these pages based on permissions.</p>

<p>Additionally, in custom pages, you can call the <code class="language-plaintext highlighter-rouge">usePermissions()</code> hook to grab the user permissions.</p>

<h3 id="user-permissions">User Permissions</h3>

<p>React-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> whenever it needs the user permissions. These permissions can take the shape you want:</p>

<ul>
  <li>a string (e.g. <code class="language-plaintext highlighter-rouge">'admin'</code>),</li>
  <li>an array of roles (e.g. <code class="language-plaintext highlighter-rouge">['post_editor', 'comment_moderator', 'super_admin']</code>)</li>
  <li>an object with fine-grained permissions (e.g. <code class="language-plaintext highlighter-rouge">{ postList: { read: true, write: false, delete: false } }</code>)</li>
  <li>or even a function</li>
</ul>

<p>The format of permissions is free because react-admin never actually uses the permissions itself. It‚Äôs up to you to use them in your code to hide or display content, redirect the user to another page, or display warnings.</p>

<p>Following is an example where the <code class="language-plaintext highlighter-rouge">authProvider</code> stores the user‚Äôs permissions in <code class="language-plaintext highlighter-rouge">localStorage</code> upon authentication, and returns these permissions when called with <code class="language-plaintext highlighter-rouge">getPermissions</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/authProvider.js</span>
<span class="k">import</span> <span class="nx">decodeJwt</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">jwt-decode</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://mydomain.com/authenticate</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}),</span>
            <span class="na">headers</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">({</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">}),</span>
        <span class="p">});</span>
        <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">token</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">decodedToken</span> <span class="o">=</span> <span class="nx">decodeJwt</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
                <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">token</span><span class="p">);</span>
                <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">permissions</span><span class="dl">'</span><span class="p">,</span> <span class="nx">decodedToken</span><span class="p">.</span><span class="nx">permissions</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">)</span> <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span> <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">permissions</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="na">getIdentity</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">getPermissions</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">role</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">permissions</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">role</span> <span class="p">?</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">role</span><span class="p">)</span> <span class="p">:</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="getting-user-permissions-in-crud-pages">Getting User Permissions In CRUD Pages</h3>

<p>By default, react-admin calls <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> for each resource route, and passes the permissions to the <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">edit</code>, <code class="language-plaintext highlighter-rouge">create</code>, and <code class="language-plaintext highlighter-rouge">show</code> view components. So the <code class="language-plaintext highlighter-rouge">&lt;List&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Edit&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Create&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> components all receive a <code class="language-plaintext highlighter-rouge">permissions</code> prop containing what <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> returned.</p>

<p>Here is an example of a <code class="language-plaintext highlighter-rouge">Create</code> view with a conditional Input based on permissions:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">UserCreate</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span>
    <span class="p">&lt;</span><span class="nc">Create</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleForm</span>
            <span class="na">defaultValue</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="nx">required</span><span class="p">()]</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="nx">required</span><span class="p">()]</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">SimpleForm</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Create</span><span class="p">&gt;;</span>
</code></pre></div></div>

<h3 id="getting-user-permissions-in-custom-pages">Getting User Permissions In Custom Pages</h3>

<p>In custom pages, react-admin doesn‚Äôt call <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code>. It‚Äôs up to you to call it yourself, using <a href="#usepermissions-hook">the <code class="language-plaintext highlighter-rouge">usePermissions()</code> hook</a>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyPage.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Card</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Card</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CardContent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/CardContent</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">usePermissions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">permissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">usePermissions</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Card</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Lorem ipsum sic dolor amet...<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Sensitive data<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
            <span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Card</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="role-based-access-control-rbac">Role-Based Access Control (RBAC)</h2>

<p>React-admin Enterprise Edition contains <a href="https://marmelab.com/ra-rbac">the ra-rbac module</a><img class="icon" src="./img/premium.svg" />, which adds fine-grained permissions to your admin.</p>

<video controls="controls" style="max-width: 100%">
    <source src="./img/ra-rbac.mp4" type="video/mp4" />
</video>

<p>You can define permissions for pages, fields, buttons, etc. in the <code class="language-plaintext highlighter-rouge">authProvider</code>. This means this RBAC system can use any data source you want (even an ActiveDirectory).</p>

<p>For instance, the above demo uses the following set of permissions:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">roles</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">accountant</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">show</span><span class="dl">'</span><span class="p">],</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.description</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">categories</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">categories.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">show</span><span class="dl">'</span><span class="p">],</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">customers</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">customers.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">invoices</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
    <span class="na">contentEditor</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">create</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">edit</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">delete</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">export</span><span class="dl">'</span><span class="p">],</span>
            <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.stock</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.sales</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.stock</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.sales</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">categories</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">edit</span><span class="dl">'</span><span class="p">],</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">customers</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">edit</span><span class="dl">'</span><span class="p">],</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">reviews</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
    <span class="na">stockManager</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">edit</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">export</span><span class="dl">'</span><span class="p">],</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.*</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span>
            <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">deny</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">read</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.description</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.stock</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">products.sales</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">categories</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
    <span class="na">administrator</span><span class="p">:</span> <span class="p">[{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">,</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span> <span class="p">}],</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Ra-rbac lets you add fine-grained permissions (almost) without touching your application code (you don‚Äôt need to add <code class="language-plaintext highlighter-rouge">if</code> blocks everywhere).</p>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-editable-datagrid">the module documentation</a> to learn more.</p>

<h2 id="building-your-own-auth-provider">Building Your Own Auth Provider</h2>

<p>Here is the interface react-admin expect <code class="language-plaintext highlighter-rouge">authProvider</code> objects to implement.</p>

<p><strong>Tip</strong>: If you‚Äôre a TypeScript user, you can check that your <code class="language-plaintext highlighter-rouge">authProvider</code> is correct at compile-time using the <code class="language-plaintext highlighter-rouge">AuthProvider</code> type:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AuthProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">authProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// authentication</span>
    <span class="na">login</span><span class="p">:</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkError</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">checkAuth</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">logout</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="na">getIdentity</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
    <span class="c1">// authorization</span>
    <span class="na">getPermissions</span><span class="p">:</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="request-format">Request Format</h3>

<p>React-admin calls the <code class="language-plaintext highlighter-rouge">authProvider</code> methods with the following params:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Usage</th>
      <th>Parameters format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">login</code></td>
      <td>Log a user in</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code> whatever fields the login form contains</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkError</code></td>
      <td>Check if a dataProvider error is an authentication error</td>
      <td><code class="language-plaintext highlighter-rouge">{ message: string, status: number, body: Object }</code> the error returned by the <code class="language-plaintext highlighter-rouge">dataProvider</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkAuth</code></td>
      <td>Check credentials before moving to a new route</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code> whatever params passed to <code class="language-plaintext highlighter-rouge">useCheckAuth()</code> - empty for react-admin default routes</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">logout</code></td>
      <td>Log a user out</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getIdentity</code></td>
      <td>Get the current user identity</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getPermissions</code></td>
      <td>Get the current user credentials</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code> whatever params passed to <code class="language-plaintext highlighter-rouge">usePermissions()</code> - empty for react-admin default routes</td>
    </tr>
  </tbody>
</table>

<h3 id="response-format">Response Format</h3>

<p><code class="language-plaintext highlighter-rouge">authProvider</code> methods must return a Promise. In case of success, the Promise should resolve to the following value:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Resolve if</th>
      <th>Response format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">login</code></td>
      <td>Login credentials were accepted</td>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkError</code></td>
      <td>Error is not an auth error</td>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkAuth</code></td>
      <td>User is authenticated</td>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">logout</code></td>
      <td>Auth backend acknowledged logout</td>
      <td><code class="language-plaintext highlighter-rouge">string | false | void</code> route to redirect to after logout, defaults to <code class="language-plaintext highlighter-rouge">/login</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getIdentity</code></td>
      <td>Auth backend returned identity</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: string | number, fullName?: string, avatar?: string }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getPermissions</code></td>
      <td>Auth backend returned permissions</td>
      <td><code class="language-plaintext highlighter-rouge">Object | Array</code> free format - the response will be returned when <code class="language-plaintext highlighter-rouge">usePermissions()</code> is called</td>
    </tr>
  </tbody>
</table>

<h3 id="error-format">Error Format</h3>

<p>When the auth backend returns an error, the Auth Provider should return a rejected Promise, with the following value:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Reject if</th>
      <th>Error format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">login</code></td>
      <td>Login credentials weren‚Äôt accepted</td>
      <td><code class="language-plaintext highlighter-rouge">string | { message?: string }</code> error message to display</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkError</code></td>
      <td>Error is an auth error</td>
      <td><code class="language-plaintext highlighter-rouge">void | { redirectTo?: string, message?: boolean }</code> route to redirect to after logout, and whether to disable error notification</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkAuth</code></td>
      <td>User is not authenticated</td>
      <td><code class="language-plaintext highlighter-rouge">void | { redirectTo?: string, message?: string }</code> route to redirect to after logout, message to notify the user</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">logout</code></td>
      <td>Auth backend failed to log the user out</td>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getIdentity</code></td>
      <td>Auth backend failed to return identity</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code> free format - returned as <code class="language-plaintext highlighter-rouge">error</code> when <code class="language-plaintext highlighter-rouge">useGetIdentity()</code> is called</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getPermissions</code></td>
      <td>Auth backend failed to return permissions</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code> free format - returned as <code class="language-plaintext highlighter-rouge">error</code> when <code class="language-plaintext highlighter-rouge">usePermissions()</code> is called</td>
    </tr>
  </tbody>
</table>

<h2 id="hooks">Hooks</h2>

<h3 id="uselogin-hook"><code class="language-plaintext highlighter-rouge">useLogin()</code> Hook</h3>

<p>This hook returns a callback allowing to call <code class="language-plaintext highlighter-rouge">authProvider.login()</code>, so it‚Äôs used in Login forms.</p>

<p>For instance, here is how to build a custom Login page based on email rather than login for authentication:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLoginPage.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLogin</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">Notification</span><span class="p">,</span> <span class="nx">defaultTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThemeProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createMuiTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLoginPage</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">theme</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">email</span><span class="p">,</span> <span class="nx">setEmail</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">password</span><span class="p">,</span> <span class="nx">setPassword</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">login</span> <span class="o">=</span> <span class="nx">useLogin</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">submit</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="c1">// will call authProvider.login({ email, password })</span>
        <span class="nx">login</span><span class="p">({</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}).</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span>
            <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Invalid email or password</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">ThemeProvider</span> <span class="na">theme</span><span class="p">=</span><span class="si">{</span><span class="nx">createMuiTheme</span><span class="p">(</span><span class="nx">defaultTheme</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">submit</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span>
                    <span class="na">name</span><span class="p">=</span><span class="s">"email"</span>
                    <span class="na">type</span><span class="p">=</span><span class="s">"email"</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">email</span><span class="si">}</span>
                    <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setEmail</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span>
                    <span class="na">name</span><span class="p">=</span><span class="s">"password"</span>
                    <span class="na">type</span><span class="p">=</span><span class="s">"password"</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">password</span><span class="si">}</span>
                    <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setPassword</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Notification</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">ThemeProvider</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLoginPage</span><span class="p">;</span>
</code></pre></div></div>

<p>Then pass the custom Login form to <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code>, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">MyLoginPage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLoginPage</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">loginPage</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLoginPage</span><span class="si">}</span> <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span><span class="p">&gt;</span>
    ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="useauthenticated-hook"><code class="language-plaintext highlighter-rouge">useAuthenticated()</code> Hook</h3>

<p>If you add <a href="./Actions.md">custom pages</a>, or if you <a href="./CustomApp.md">create an admin app from scratch</a>, you may need to secure access to pages manually. That‚Äôs the purpose of the <code class="language-plaintext highlighter-rouge">useAuthenticated()</code> hook, which calls the <code class="language-plaintext highlighter-rouge">authProvider.checkAuth()</code> method on mount, and redirects to login if it returns a rejected Promise.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyPage.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useAuthenticated</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">useAuthenticated</span><span class="p">();</span> <span class="c1">// redirects to login if not authenticated</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            ...
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyPage</span><span class="p">;</span>
</code></pre></div></div>

<p>If you call <code class="language-plaintext highlighter-rouge">useAuthenticated()</code> with a parameter, this parameter is passed to the <code class="language-plaintext highlighter-rouge">authProvider</code> call as second parameter. that allows you to add authentication logic depending on the context of the call:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">useAuthenticated</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span> <span class="p">});</span> <span class="c1">// calls authProvider.checkAuth({ foo: 'bar' })</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            ...
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">useAuthenticated</code> hook is optimistic: it doesn‚Äôt block rendering during the <code class="language-plaintext highlighter-rouge">authProvider</code> call. In the above example, the <code class="language-plaintext highlighter-rouge">MyPage</code> component renders even before getting the response from the <code class="language-plaintext highlighter-rouge">authProvider</code>. If the call returns a rejected promise, the hook redirects to the login page, but the user may have seen the content of the <code class="language-plaintext highlighter-rouge">MyPage</code> component for a brief moment.</p>

<h3 id="useauthstate-hook"><code class="language-plaintext highlighter-rouge">useAuthState()</code> Hook</h3>

<p>To avoid rendering a component, and to force waiting for the <code class="language-plaintext highlighter-rouge">authProvider</code> response, use <code class="language-plaintext highlighter-rouge">useAuthState()</code> instead of <code class="language-plaintext highlighter-rouge">useAuthenticated()</code>. It calls <code class="language-plaintext highlighter-rouge">authProvider.checkAuth()</code> on mount and returns an object with 3 properties:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">loading</code>: <code class="language-plaintext highlighter-rouge">true</code> just after mount, while the <code class="language-plaintext highlighter-rouge">authProvider</code> is being called. <code class="language-plaintext highlighter-rouge">false</code> once the <code class="language-plaintext highlighter-rouge">authProvider</code> has answered.</li>
  <li><code class="language-plaintext highlighter-rouge">loaded</code>: the opposite of <code class="language-plaintext highlighter-rouge">loading</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">authenticated</code>: <code class="language-plaintext highlighter-rouge">true</code> while loading. then <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> depending on the <code class="language-plaintext highlighter-rouge">authProvider</code> response.</li>
</ul>

<p>You can render different content depending on the authenticated status.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useAuthState</span><span class="p">,</span> <span class="nx">Loading</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">authenticated</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useAuthState</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">authenticated</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">AuthenticatedContent</span> <span class="p">/&gt;;</span>
    <span class="p">}</span> 
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">AnonymousContent</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="uselogout-hook"><code class="language-plaintext highlighter-rouge">useLogout()</code> Hook</h3>

<p>Just like <code class="language-plaintext highlighter-rouge">useLogin()</code>, <code class="language-plaintext highlighter-rouge">useLogout()</code> returns a callback that you can use to call <code class="language-plaintext highlighter-rouge">authProvider.logout()</code>`. Use it to build a custom Logout button, like the following:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLogoutButton.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">forwardRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLogout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MenuItem</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/MenuItem</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ExitIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/PowerSettingsNew</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLogoutButton</span> <span class="o">=</span> <span class="nx">forwardRef</span><span class="p">((</span><span class="nx">props</span><span class="p">,</span> <span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">logout</span> <span class="o">=</span> <span class="nx">useLogout</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">logout</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">MenuItem</span>
            <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span>
            <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">ref</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">ExitIcon</span> <span class="p">/&gt;</span> Logout
        <span class="p">&lt;/</span><span class="nc">MenuItem</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLogoutButton</span><span class="p">;</span>
</code></pre></div></div>

<p>Then pass the Logout button to the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">MyLogoutButton</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLogoutButton</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">logoutButton</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLogoutButton</span><span class="si">}</span> <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span><span class="p">&gt;</span>
    ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="usegetidentity-hook"><code class="language-plaintext highlighter-rouge">useGetIdentity()</code> Hook</h3>

<p>You may want to use the current user name, avatar, or id in your code. for that purpose, call the <code class="language-plaintext highlighter-rouge">useGetIdentity()</code> hook, which calls <code class="language-plaintext highlighter-rouge">authProvider.getIdentity()</code> on mount.</p>

<p>Here is an example Edit component, which falls back to a Show component is the record is locked for edition by another user:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useGetIdentity</span><span class="p">,</span> <span class="nx">useGetOne</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostDetail</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="nx">post</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">postLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">identity</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">identityLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetIdentity</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">postLoading</span> <span class="o">||</span> <span class="nx">identityLoading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;&gt;</span>Loading...<span class="p">&lt;/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">post</span><span class="p">.</span><span class="nx">lockedBy</span> <span class="o">||</span> <span class="nx">post</span><span class="p">.</span><span class="nx">lockedBy</span> <span class="o">===</span> <span class="nx">identity</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// post isn't locked, or is locked by me</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">PostEdit</span> <span class="na">post</span><span class="p">=</span><span class="si">{</span><span class="nx">post</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// post is locked by someone else and cannot be edited</span>
        <span class="k">return</span> <span class="p">&lt;</span><span class="nc">PostShow</span> <span class="na">post</span><span class="p">=</span><span class="si">{</span><span class="nx">post</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="usepermissions-hook"><code class="language-plaintext highlighter-rouge">usePermissions()</code> Hook</h3>

<p>You might want to check user permissions inside a <a href="./Admin.md#customroutes">custom page</a>. That‚Äôs the purpose of the <code class="language-plaintext highlighter-rouge">usePermissions()</code> hook, which calls the <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> method on mount, and returns the result when available:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyPage.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Card</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Card</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CardContent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/CardContent</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">usePermissions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">permissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">usePermissions</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">loading</span>
        <span class="p">?</span> <span class="p">(&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Waiting for permissions...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;)</span>
        <span class="p">:</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">Card</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Lorem ipsum sic dolor amet...<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
                <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                    <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Sensitive data<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
                <span class="si">}</span>
            <span class="p">&lt;/</span><span class="nc">Card</span><span class="p">&gt;</span>
        <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyPage</span><span class="p">;</span>

<span class="c1">// in src/customRoutes.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyPage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyPage</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">[</span>
    <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">"/baz"</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">MyPage</span><span class="si">}</span> <span class="p">/&gt;,</span>
<span class="p">];</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">usePermissions</code> hook is optimistic: it doesn‚Äôt block rendering during the <code class="language-plaintext highlighter-rouge">authProvider</code> call. In the above example, the <code class="language-plaintext highlighter-rouge">MyPage</code> component renders even before getting the response from the <code class="language-plaintext highlighter-rouge">authProvider</code>. To avoid a blink in the interface while the <code class="language-plaintext highlighter-rouge">authProvider</code> is answering, use the <code class="language-plaintext highlighter-rouge">loaded</code> return value of <code class="language-plaintext highlighter-rouge">usePermissions()</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">permissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">usePermissions</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">loaded</span> <span class="p">?</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Card</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Lorem ipsum sic dolor amet...<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Sensitive data<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
            <span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Card</span><span class="p">&gt;</span>
    <span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="usegetpermissions-hook"><code class="language-plaintext highlighter-rouge">useGetPermissions()</code> Hook</h3>

<p>React-admin also exposes a <code class="language-plaintext highlighter-rouge">useGetPermissions()</code> hook, returning a callback to call <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> on demand. In practice, you seldom need this hook - <code class="language-plaintext highlighter-rouge">usePermissions</code> covers most authorization needs, and manages the loading state for you.</p>

<p>Here is an example usage:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="p">{</span> <span class="nx">useGetPermissions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
 
 <span class="kd">const</span> <span class="nx">Roles</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="p">[</span><span class="nx">permissions</span><span class="p">,</span> <span class="nx">setPermissions</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>
     <span class="kd">const</span> <span class="nx">getPermissions</span> <span class="o">=</span> <span class="nx">useGetPermissions</span><span class="p">();</span>
     <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
         <span class="nx">getPermissions</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">permissions</span> <span class="o">=&gt;</span> <span class="nx">setPermissions</span><span class="p">(</span><span class="nx">permissions</span><span class="p">))</span>
     <span class="p">},</span> <span class="p">[])</span>
     <span class="k">return</span> <span class="p">(</span>
         <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
             <span class="si">{</span><span class="nx">permissions</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">permission</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                 <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">key</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">permission</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
             <span class="p">))</span><span class="si">}</span>
         <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
     <span class="p">);</span>
 <span class="p">}</span>
</code></pre></div></div>

<h2 id="components">Components</h2>

<h3 id="authenticated-component"><code class="language-plaintext highlighter-rouge">&lt;Authenticated&gt;</code> Component</h3>

<p>The <code class="language-plaintext highlighter-rouge">&lt;Authenticated&gt;</code> component calls <a href="#useauthenticated-hook">the <code class="language-plaintext highlighter-rouge">useAuthenticated()</code> hook</a>, and renders its child component - unless the authentication check fails. Use it as an alternative to the <code class="language-plaintext highlighter-rouge">useAuthenticated()</code> hook when you can‚Äôt use a hook, e.g. inside a <code class="language-plaintext highlighter-rouge">Route</code> <code class="language-plaintext highlighter-rouge">render</code> function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Authenticated</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomRoutes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">"/foo"</span> <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span>
        <span class="p">&lt;</span><span class="nc">Authenticated</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Foo</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Authenticated</span><span class="p">&gt;</span>
    <span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">customRoutes</span><span class="p">=</span><span class="si">{</span><span class="nx">customRoutes</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="recipes">Recipes</h2>

<h3 id="customizing-the-login-and-logout-components">Customizing The Login and Logout Components</h3>

<p>Using <code class="language-plaintext highlighter-rouge">authProvider</code> is enough to implement a full-featured authorization system if the authentication relies on a username and password.</p>

<p>But what if you want to use an email instead of a username? What if you want to use a Single-Sign-On (SSO) with a third-party authentication service? What if you want to use two-factor authentication?</p>

<p>For all these cases, it‚Äôs up to you to implement your own <code class="language-plaintext highlighter-rouge">LoginPage</code> component, which will be displayed under the <code class="language-plaintext highlighter-rouge">/login</code> route instead of the default username/password form, and your own <code class="language-plaintext highlighter-rouge">LogoutButton</code> component, which will be displayed in the sidebar. Pass both these components to the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">MyLoginPage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLoginPage</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyLogoutButton</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLogoutButton</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">loginPage</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLoginPage</span><span class="si">}</span> <span class="na">logoutButton</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLogoutButton</span><span class="si">}</span> <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span><span class="p">&gt;</span>
    ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Use the <code class="language-plaintext highlighter-rouge">useLogin</code> and <code class="language-plaintext highlighter-rouge">useLogout</code> hooks in your custom <code class="language-plaintext highlighter-rouge">LoginPage</code> and <code class="language-plaintext highlighter-rouge">LogoutButton</code> components.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLoginPage.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLogin</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">Notification</span><span class="p">,</span> <span class="nx">defaultTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThemeProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createMuiTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLoginPage</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">theme</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">email</span><span class="p">,</span> <span class="nx">setEmail</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">password</span><span class="p">,</span> <span class="nx">setPassword</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">login</span> <span class="o">=</span> <span class="nx">useLogin</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">submit</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="nx">login</span><span class="p">({</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}).</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span>
            <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Invalid email or password</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">ThemeProvider</span> <span class="na">theme</span><span class="p">=</span><span class="si">{</span><span class="nx">createMuiTheme</span><span class="p">(</span><span class="nx">defaultTheme</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">submit</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span>
                    <span class="na">name</span><span class="p">=</span><span class="s">"email"</span>
                    <span class="na">type</span><span class="p">=</span><span class="s">"email"</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">email</span><span class="si">}</span>
                    <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setEmail</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span>
                    <span class="na">name</span><span class="p">=</span><span class="s">"password"</span>
                    <span class="na">type</span><span class="p">=</span><span class="s">"password"</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">password</span><span class="si">}</span>
                    <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">setPassword</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Notification</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">ThemeProvider</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLoginPage</span><span class="p">;</span>

<span class="c1">// in src/MyLogoutButton.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">forwardRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLogout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MenuItem</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/MenuItem</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ExitIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/PowerSettingsNew</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLogoutButton</span> <span class="o">=</span> <span class="nx">forwardRef</span><span class="p">((</span><span class="nx">props</span><span class="p">,</span> <span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">logout</span> <span class="o">=</span> <span class="nx">useLogout</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">logout</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">MenuItem</span>
            <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span>
            <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">ref</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">ExitIcon</span> <span class="p">/&gt;</span> Logout
        <span class="p">&lt;/</span><span class="nc">MenuItem</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLogoutButton</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: By default, react-admin redirects the user to ‚Äò/login‚Äô after they log out. This can be changed by passing the url to redirect to as parameter to the <code class="language-plaintext highlighter-rouge">logout()</code> function:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> in src/MyLogoutButton.js
<span class="err">//</span> ...
<span class="gd">-   const handleClick = () =&gt; logout();
</span><span class="gi">+   const handleClick = () =&gt; logout('/custom-login');
</span></code></pre></div></div>

<h3 id="restricting-access-to-resources-or-views">Restricting Access to Resources or Views</h3>

<p>Permissions can be useful to restrict access to resources or their views. To do so, you must use a function as the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> only child. React-admin will call this function with the permissions returned by the <code class="language-plaintext highlighter-rouge">authProvider</code>.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Admin</span>
    <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">dataProvider</span><span class="si">}</span>
    <span class="na">authProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">authProvider</span><span class="si">}</span>
<span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">permissions</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// Restrict access to the edit and remove views to admin only</span>
        <span class="p">&lt;</span><span class="nc">Resource</span>
            <span class="na">name</span><span class="p">=</span><span class="s">"customers"</span>
            <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">VisitorList</span><span class="si">}</span>
            <span class="na">edit</span><span class="p">=</span><span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="p">?</span> <span class="nx">VisitorEdit</span> <span class="p">:</span> <span class="kc">null</span><span class="si">}</span>
            <span class="na">icon</span><span class="p">=</span><span class="si">{</span><span class="nx">VisitorIcon</span><span class="si">}</span>
        <span class="p">/&gt;,</span>
        <span class="c1">// Only include the categories resource for admin users</span>
        <span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span>
            <span class="p">?</span> <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"categories"</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">CategoryList</span><span class="si">}</span> <span class="na">edit</span><span class="p">=</span><span class="si">{</span><span class="nx">CategoryEdit</span><span class="si">}</span> <span class="na">icon</span><span class="p">=</span><span class="si">{</span><span class="nx">CategoryIcon</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">]</span><span class="si">}</span>
<span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Note that the function returns an array of React elements. This is required to avoid having to wrap them in a container element which would prevent the <code class="language-plaintext highlighter-rouge">Admin</code> from working.</p>

<p><strong>Tip</strong>: Even if that‚Äôs possible, be careful when completely excluding a resource (like with the <code class="language-plaintext highlighter-rouge">categories</code> resource in this example) as it will prevent you to reference this resource in the other resource views, too.</p>

<h3 id="restricting-access-to-fields-and-inputs">Restricting Access to Fields and Inputs</h3>

<p>You might want to display some fields or inputs only to users with specific permissions. By default, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider</code> for permissions for each resource routes, and passes them to the <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">edit</code>, <code class="language-plaintext highlighter-rouge">create</code>, and <code class="language-plaintext highlighter-rouge">show</code> components.</p>

<p>Here is an example of a <code class="language-plaintext highlighter-rouge">Create</code> view with a conditional Input based on permissions:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">UserCreate</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span>
    <span class="p">&lt;</span><span class="nc">Create</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleForm</span>
            <span class="na">defaultValue</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="nx">required</span><span class="p">()]</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="nx">required</span><span class="p">()]</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">SimpleForm</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Create</span><span class="p">&gt;;</span>
</code></pre></div></div>

<p>This also works inside an <code class="language-plaintext highlighter-rouge">Edit</code> view with a <code class="language-plaintext highlighter-rouge">TabbedForm</code>, and you can even hide a <code class="language-plaintext highlighter-rouge">FormTab</code> completely:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">UserEdit</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span>
    <span class="p">&lt;</span><span class="nc">Edit</span> <span class="na">title</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">UserTitle</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TabbedForm</span> <span class="na">defaultValue</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">FormTab</span> <span class="na">label</span><span class="p">=</span><span class="s">"user.form.summary"</span><span class="p">&gt;</span>
                <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">disabled</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span><span class="si">}</span>
                <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="nx">required</span><span class="p">()</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">FormTab</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">FormTab</span> <span class="na">label</span><span class="p">=</span><span class="s">"user.form.security"</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="na">validate</span><span class="p">=</span><span class="si">{</span><span class="nx">required</span><span class="p">()</span><span class="si">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">FormTab</span><span class="p">&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">TabbedForm</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Edit</span><span class="p">&gt;;</span>
</code></pre></div></div>

<p>What about the <code class="language-plaintext highlighter-rouge">List</code> view, the <code class="language-plaintext highlighter-rouge">Datagrid</code>, <code class="language-plaintext highlighter-rouge">SimpleList</code>? It works there, too. And in the next example, the <code class="language-plaintext highlighter-rouge">permissions</code> prop is passed down to a custom <code class="language-plaintext highlighter-rouge">filters</code> selector.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">ShowButton</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">TextInput</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getUserFilters</span> <span class="o">=</span> <span class="p">(</span><span class="nx">permissions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">([</span>
    <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">label</span><span class="p">=</span><span class="s">"user.list.search"</span> <span class="na">source</span><span class="p">=</span><span class="s">"q"</span> <span class="na">alwaysOn</span> <span class="p">/&gt;,</span>
    <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;,</span>
    <span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="p">?</span> <span class="p">&lt;</span><span class="nc">TextInput</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="p">/&gt;</span> <span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
<span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="nx">filter</span> <span class="o">=&gt;</span> <span class="nx">filter</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">));</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">UserList</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">filters</span><span class="p">=</span><span class="si">{</span><span class="nx">getUserFilters</span><span class="p">(</span><span class="nx">permissions</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="p">/&gt;</span><span class="si">}</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span><span class="si">}</span>
            <span class="p">&lt;</span><span class="nc">ShowButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;;</span>
</code></pre></div></div>

<h3 id="restricting-access-to-the-dashboard">Restricting Access to the Dashboard</h3>

<p>React-admin injects the permissions into the component provided as a <a href="./Admin.md#dashboard"><code class="language-plaintext highlighter-rouge">dashboard</code></a>, too:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/Dashboard.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Card</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Card</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CardContent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/CardContent</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Title</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">({</span> <span class="nx">permissions</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Card</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Title</span> <span class="na">title</span><span class="p">=</span><span class="s">"Dashboard"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Lorem ipsum sic dolor amet...<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span>
            <span class="p">?</span> <span class="p">&lt;</span><span class="nc">CardContent</span><span class="p">&gt;</span>Sensitive data<span class="p">&lt;/</span><span class="nc">CardContent</span><span class="p">&gt;</span>
            <span class="p">:</span> <span class="kc">null</span>
        <span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">Card</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="restricting-access-to-a-menu">Restricting Access to a Menu</h3>

<p>What if you want to check the permissions inside a <a href="./Admin.md#menu">custom menu</a>? Much like getting permissions inside a custom page, you‚Äôll have to use the <code class="language-plaintext highlighter-rouge">usePermissions</code> hook:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/myMenu.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MenuItemLink</span><span class="p">,</span> <span class="nx">usePermissions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Menu</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">onMenuClick</span><span class="p">,</span> <span class="nx">logout</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">permissions</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">usePermissions</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/posts"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Posts"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/comments"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Comments"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/custom-route"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Miscellaneous"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="si">}</span>
            <span class="si">{</span><span class="nx">logout</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET