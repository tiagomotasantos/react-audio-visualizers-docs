I"{ç<h1 id="data-providers">Data Providers</h1>

<p>Whenever react-admin needs to communicate with the API, it calls methods on the Data Provider object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dataProvider</span>
    <span class="p">.</span><span class="nx">getOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { id: 123, title: "hello, world" }</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>It‚Äôs the Data Provider‚Äôs job to turn these method calls into HTTP requests, and transform the HTTP responses to the data format expected by react-admin. In technical terms, a Data Provider is an <em>adapter</em> for an API.</p>

<p>And to inject a Data Provider in a react-admin application, pass it as the <code class="language-plaintext highlighter-rouge">dataProvider</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">dataProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../myDataProvider</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">dataProvider</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Thanks to this adapter injection system, react-admin can communicate with any API, whether it uses REST, GraphQL, RPC, or even SOAP, regardless of the dialect it uses. The Data Provider is also the ideal place to add custom HTTP headers, authentication, etc.</p>

<p><img src="./img/data-provider.png" alt="Data Provider architecture" /></p>

<p>A Data Provider must have the following methods:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getList</span><span class="p">:</span>    <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">getOne</span><span class="p">:</span>     <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">getMany</span><span class="p">:</span>    <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">getManyReference</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">create</span><span class="p">:</span>     <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">update</span><span class="p">:</span>     <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">updateMany</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">delete</span><span class="p">:</span>     <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
    <span class="na">deleteMany</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can find an example Data Provider implementation at the end of this chapter.</p>

<p><strong>Tip</strong>: A Data Provider can have more methods than the 9 methods listed above. For instance, you create a dataProvider with custom methods for calling non-REST API endpoints, manipulating tree structures, subscribing to real time updates, etc.</p>

<p><strong>Tip</strong>: In react-admin v2, Data Providers used to be functions, not objects. React-admin v3 can detect a legacy Data Provider and wrap an object around it. So Data Providers developed for react-admin v2 still work with react-admin v3.</p>

<h2 id="available-providers">Available Providers</h2>

<p>The react-admin project includes 5 Data Providers:</p>

<ul>
  <li>Simple REST: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-simple-rest">marmelab/ra-data-simple-rest</a> (<a href="#usage">read more below</a>). It serves mostly as an example. Incidentally, it is compatible with the <a href="https://github.com/marmelab/FakeRest">FakeRest</a> API.</li>
  <li><strong><a href="https://github.com/typicode/json-server">JSON server</a></strong>: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server">marmelab/ra-data-json-server</a>. Great for prototyping an admin over a yet-to-be-developed REST API.</li>
  <li><a href="https://graphql.org/">Simple GraphQL</a>: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql-simple">marmelab/ra-data-graphql-simple</a>. A GraphQL provider built with Apollo and tailored to target a simple GraphQL implementation.</li>
  <li>Local JSON: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-fakerest">marmelab/ra-data-fakerest</a>. Based on a local object, it doesn‚Äôt even use HTTP. Use it for testing purposes.</li>
  <li>Local Storage: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage">marmelab/ra-data-localstorage</a>. User editions are persisted across refreshes and between sessions. This allows local-first apps, and can be useful in tests.</li>
</ul>

<p>Developers from the react-admin community have open-sourced Data Providers for many more backends:</p>

<ul>
  <li><strong><a href="https://docs.amplify.aws">AWS Amplify</a></strong>: <a href="https://github.com/MrHertal/react-admin-amplify">MrHertal/react-admin-amplify</a></li>
  <li><strong><a href="https://github.com/zachrybaker/ra-data-rest-client">Configurable Identity Property REST Client</a></strong>: <a href="https://github.com/zachrybaker/ra-data-rest-client">zachrybaker/ra-data-rest-client</a></li>
  <li><strong><a href="https://corebos.com/">coreBOS</a></strong>: <a href="https://github.com/coreBOS/reactadminportal">React-Admin coreBOS Integration</a></li>
  <li><strong><a href="https://www.django-rest-framework.org/">Django Rest Framework</a></strong>: <a href="https://github.com/bmihelac/ra-data-django-rest-framework">bmihelac/ra-data-django-rest-framework</a></li>
  <li><strong><a href="https://docs.python-eve.org/en/stable/">Eve</a></strong>: <a href="https://github.com/smeng9/ra-data-eve">smeng9/ra-data-eve</a></li>
  <li><strong><a href="https://github.com/lalalilo/express-sequelize-crud">Express &amp; Sequelize</a></strong>: <a href="https://github.com/lalalilo/express-sequelize-crud">express-sequelize-crud</a></li>
  <li><strong><a href="https://www.feathersjs.com/">Feathersjs</a></strong>: <a href="https://github.com/josx/ra-data-feathers">josx/ra-data-feathers</a></li>
  <li><strong><a href="https://firebase.google.com/docs/firestore">Firebase Firestore</a></strong>: <a href="https://github.com/benwinding/react-admin-firebase">benwinding/react-admin-firebase</a>.</li>
  <li><strong><a href="https://firebase.google.com/docs/database">Firebase Realtime Database</a></strong>: <a href="https://github.com/aymendhaya/ra-data-firebase-client">aymendhaya/ra-data-firebase-client</a>.</li>
  <li><strong><a href="https://www.google.com/sheets/about/">Google Sheets</a></strong>: <a href="https://github.com/marmelab/ra-data-google-sheets">marmelab/ra-data-google-sheets</a></li>
  <li><strong><a href="https://graphql.org/">GraphQL</a></strong>: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-graphql">marmelab/ra-data-graphql</a> (uses <a href="https://www.apollodata.com/">Apollo</a>)</li>
  <li><strong><a href="http://stateless.co/hal_specification.html">HAL</a></strong>: <a href="https://github.com/b-social/ra-data-hal">b-social/ra-data-hal</a></li>
  <li><strong><a href="https://github.com/hasura/graphql-engine">Hasura</a></strong>: <a href="https://github.com/hasura/ra-data-hasura">hasura/ra-data-hasura</a>, auto generates valid GraphQL queries based on the properties exposed by the Hasura API.</li>
  <li><strong><a href="https://www.hydra-cg.com/">Hydra</a> / <a href="https://json-ld.org/">JSON-LD</a></strong>: <a href="https://github.com/api-platform/admin/blob/master/src/hydra/dataProvider.js">api-platform/admin/hydra</a></li>
  <li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a></strong>: <a href="https://github.com/tykoth/ra-data-dexie">tykoth/ra-data-dexie</a></li>
  <li><strong><a href="https://jsonapi.org/">JSON API</a></strong>: <a href="https://github.com/henvo/ra-jsonapi-client">henvo/ra-jsonapi-client</a></li>
  <li><strong><a href="https://tools.ietf.org/html/draft-kelly-json-hal-08">JSON HAL</a></strong>: <a href="https://www.npmjs.com/package/ra-data-json-hal">ra-data-json-hal</a></li>
  <li><strong><a href="https://github.com/typicode/json-server">JSON server</a></strong>: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-json-server">marmelab/ra-data-json-server</a>.</li>
  <li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">LocalStorage</a></strong>: <a href="https://github.com/marmelab/react-admin/tree/master/packages/ra-data-localstorage">marmelab/ra-data-localstorage</a></li>
  <li><strong><a href="https://loopback.io/lb3">Loopback3</a></strong>: <a href="https://github.com/darthwesker/react-admin-loopback">darthwesker/react-admin-loopback</a></li>
  <li><strong><a href="https://loopback.io/">Loopback4</a></strong>: <a href="https://github.com/elmaistrenko/react-admin-lb4">elmaistrenko/react-admin-lb4</a></li>
  <li><strong><a href="https://github.com/loopback4/loopback-component-crud">Loopback4 CRUD</a></strong>: <a href="https://github.com/loopback4/ra-data-lb4">loopback4/ra-data-lb4</a></li>
  <li><strong><a href="https://github.com/ckoliber/ra-data-mixer">Mixer</a></strong>: <a href="https://github.com/ckoliber/ra-data-mixer">ckoliber/ra-data-mixer</a></li>
  <li><strong><a href="https://github.com/RancaguaInnova/moleculer-data-provider">Moleculer Microservices</a></strong>: <a href="https://github.com/RancaguaInnova/moleculer-data-provider">RancaguaInnova/moleculer-data-provider</a></li>
  <li><strong><a href="https://github.com/nestjsx/crud">NestJS CRUD</a></strong>: <a href="https://github.com/rayman1104/ra-data-nestjsx-crud">rayman1104/ra-data-nestjsx-crud</a></li>
  <li><strong><a href="https://www.odata.org/">OData</a></strong>: <a href="https://github.com/Groopit/ra-data-odata-server">Groopit/ra-data-odata-server</a></li>
  <li><strong><a href="https://www.opencrud.org/">OpenCRUD</a></strong>: <a href="https://github.com/Weakky/ra-data-opencrud">weakky/ra-data-opencrud</a></li>
  <li><strong><a href="https://parseplatform.org/">Parse</a></strong>: <a href="https://github.com/almahdi/ra-data-parse">almahdi/ra-data-parse</a></li>
  <li><strong><a href="https://www.graphile.org/postgraphile/">PostGraphile</a></strong>: <a href="https://github.com/BowlingX/ra-postgraphile">bowlingx/ra-postgraphile</a></li>
  <li><strong><a href="https://postgrest.org/">PostgREST</a></strong>: <a href="https://github.com/raphiniert-com/ra-data-postgrest">raphiniert-com/ra-data-postgrest</a></li>
  <li><strong><a href="https://github.com/weakky/ra-data-prisma">Prisma</a></strong>: <a href="https://github.com/weakky/ra-data-prisma">weakky/ra-data-prisma</a></li>
  <li><strong><a href="https://www.prisma.io/">Prisma Version 2</a></strong>: <a href="https://github.com/panter/ra-data-prisma">panter/ra-data-prisma</a></li>
  <li><strong><a href="https://www.processmaker.com/">ProcessMaker3</a></strong>: <a href="https://github.com/ckoliber/ra-data-processmaker3">ckoliber/ra-data-processmaker3</a></li>
  <li><strong><a href="https://github.com/JKHeadley/rest-hapi">REST-HAPI</a></strong>: <a href="https://github.com/mkg20001/ra-data-rest-hapi">ra-data-rest-hapi</a></li>
  <li><strong><a href="https://sailsjs.com/">Sails.js</a></strong>: <a href="https://github.com/mpampin/ra-data-json-sails">mpampin/ra-data-json-sails</a></li>
  <li><strong><a href="https://spring.io/projects/spring-boot">Spring Boot</a></strong>: <a href="https://github.com/vishpat/ra-data-springboot-rest">vishpat/ra-data-springboot-rest</a></li>
  <li><strong><a href="https://strapi.io/">Strapi</a></strong>: <a href="https://github.com/nazirov91/ra-strapi-rest">nazirov91/ra-strapi-rest</a></li>
  <li><strong><a href="https://supabase.io/">Supabase</a></strong>: <a href="https://github.com/marmelab/ra-supabase">marmelab/ra-supabase</a></li>
</ul>

<p>If you‚Äôve written a Data Provider for another backend, and open-sourced it, please help complete this list with your package.</p>

<p><strong>Tip</strong>: In version 1, react-admin was called <a href="https://github.com/marmelab/admin-on-rest">admin-on-rest</a> (AOR), and developers shared Data Providers for even more backends. Due to breaking changes in v2, these providers are no longer working. Fortunately, Data Providers aren‚Äôt complex pieces of code, and using legacy Data Provider with a recent react-admin version requires minimal changes. If you are a maintainer of one of these projects, we would warmly welcome an upgrade.</p>

<ul>
  <li><strong><a href="https://github.com/abiglobalhealth/aor-dynamodb-client">DynamoDb</a></strong>: <a href="https://github.com/abiglobalhealth/aor-dynamodb-client">abiglobalhealth/aor-dynamodb-client</a></li>
  <li><strong><a href="https://github.com/dchester/epilogue">Epilogue</a></strong>: <a href="https://github.com/dunghuynh/aor-epilogue-client">dunghuynh/aor-epilogue-client</a></li>
  <li><strong><a href="https://github.com/ParsePlatform/parse-server">Parse Server</a></strong>: <a href="https://github.com/leperone/aor-parseserver-client">leperone/aor-parseserver-client</a></li>
  <li><strong><a href="https://github.com/o1lab/xmysql">Xmysql</a></strong>: <a href="https://github.com/soaserele/aor-xmysql">soaserele/aor-xmysql</a></li>
</ul>

<h2 id="usage">Usage</h2>

<p>As an example, let‚Äôs focus on the Simple REST data provider. It fits REST APIs using simple GET parameters for filters and sorting.</p>

<p>Install the <code class="language-plaintext highlighter-rouge">ra-data-simple-rest</code> package to use this provider.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add ra-data-simple-rest
</code></pre></div></div>

<p>Then, initialize the provider with the REST backend URL, and pass the result to the <code class="language-plaintext highlighter-rouge">dataProvider</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">PostList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">PostList</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p>Here is how this Data Provider maps react-admin calls to API calls:</p>

<table>
  <thead>
    <tr>
      <th>Method name</th>
      <th>API call</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getList</code></td>
      <td><code class="language-plaintext highlighter-rouge">GET http://my.api.url/posts?sort=["title","ASC"]&amp;range=[0, 24]&amp;filter={"title":"bar"}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getOne</code></td>
      <td><code class="language-plaintext highlighter-rouge">GET http://my.api.url/posts/123</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getMany</code></td>
      <td><code class="language-plaintext highlighter-rouge">GET http://my.api.url/posts?filter={"id":[123,456,789]}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getManyReference</code></td>
      <td><code class="language-plaintext highlighter-rouge">GET http://my.api.url/posts?filter={"author_id":345}</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">create</code></td>
      <td><code class="language-plaintext highlighter-rouge">POST http://my.api.url/posts</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td><code class="language-plaintext highlighter-rouge">PUT http://my.api.url/posts/123</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">updateMany</code></td>
      <td>Multiple calls to <code class="language-plaintext highlighter-rouge">PUT http://my.api.url/posts/123</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td><code class="language-plaintext highlighter-rouge">DELETE http://my.api.url/posts/123</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">deleteMany</code></td>
      <td>Multiple calls to <code class="language-plaintext highlighter-rouge">DELETE http://my.api.url/posts/123</code></td>
    </tr>
  </tbody>
</table>

<p><strong>Note</strong>: The simple REST client expects the API to include a <code class="language-plaintext highlighter-rouge">Content-Range</code> header in the response to <code class="language-plaintext highlighter-rouge">getList</code> calls. The value must be the total number of resources in the collection. This allows react-admin to know how many pages of resources there are in total, and build the pagination controls.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Content-Range: posts 0-24/319
</code></pre></div></div>

<p>If your API is on another domain as the JS code, you‚Äôll need to whitelist this header with an <code class="language-plaintext highlighter-rouge">Access-Control-Expose-Headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS</a> header.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access-Control-Expose-Headers: Content-Range
</code></pre></div></div>

<h2 id="adding-custom-headers">Adding Custom Headers</h2>

<p>The <code class="language-plaintext highlighter-rouge">simpleRestProvider</code> function accepts an HTTP client function as second argument. By default, it uses react-admin‚Äôs <code class="language-plaintext highlighter-rouge">fetchUtils.fetchJson()</code> function as HTTP client. It‚Äôs similar to HTML5 <code class="language-plaintext highlighter-rouge">fetch()</code>, except it handles JSON decoding and HTTP error codes automatically.</p>

<p>That means that if you need to add custom headers to your requests, you can just <em>wrap</em> the <code class="language-plaintext highlighter-rouge">fetchJson()</code> call inside your own function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">fetchUtils</span><span class="p">,</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">fetchJson</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">({</span> <span class="na">Accept</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="c1">// add your own headers here</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">X-Custom-Header</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">foobar</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">fetchUtils</span><span class="p">.</span><span class="nx">fetchJson</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fetchJson</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">dataProvider</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">PostList</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Now all the requests to the REST API will contain the <code class="language-plaintext highlighter-rouge">X-Custom-Header: foobar</code> header.</p>

<p><strong>Tip</strong>: The most common usage of custom headers is for authentication. <code class="language-plaintext highlighter-rouge">fetchJson</code> has built-on support for the <code class="language-plaintext highlighter-rouge">Authorization</code> token header:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchJson</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">authenticated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">token</span><span class="p">:</span> <span class="dl">'</span><span class="s1">SRTRDFVESGNJYTUKTYTHRG</span><span class="dl">'</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">fetchUtils</span><span class="p">.</span><span class="nx">fetchJson</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">,</span> <span class="nx">fetchJson</span><span class="p">);</span>
</code></pre></div></div>

<p>Now all the requests to the REST API will contain the <code class="language-plaintext highlighter-rouge">Authorization: SRTRDFVESGNJYTUKTYTHRG</code> header.</p>

<h2 id="extending-a-data-provider-example-of-file-upload">Extending a Data Provider (Example of File Upload)</h2>

<p>As Data Providers are just objects, you can extend them with custom logic for a given method, or a given resource.</p>

<p>For instance, the following Data Provider extends the <code class="language-plaintext highlighter-rouge">ra-data-simple-rest</code> provider, and adds image upload support for the <code class="language-plaintext highlighter-rouge">update('posts')</code> call (react-admin offers an <code class="language-plaintext highlighter-rouge">&lt;ImageInput /&gt;</code> component that allows image upload).</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">myDataProvider</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span><span class="nx">dataProvider</span><span class="p">,</span>
    <span class="na">update</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">resource</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span> <span class="o">||</span> <span class="o">!</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">pictures</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// fallback to the default implementation</span>
            <span class="k">return</span> <span class="nx">dataProvider</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="cm">/**
         * For posts update only, convert uploaded image in base 64 and attach it to
         * the `picture` sent property, with `src` and `title` attributes.
         */</span>
        
        <span class="c1">// Freshly dropped pictures are File objects and must be converted to base64 strings</span>
        <span class="kd">const</span> <span class="nx">newPictures</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">pictures</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
            <span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">rawFile</span> <span class="k">instanceof</span> <span class="nx">File</span>
        <span class="p">);</span>
        <span class="kd">const</span> <span class="nx">formerPictures</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">pictures</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
            <span class="nx">p</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">rawFile</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">)</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">newPictures</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">convertFileToBase64</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">base64Pictures</span> <span class="o">=&gt;</span>
                <span class="nx">base64Pictures</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">picture64</span> <span class="o">=&gt;</span> <span class="p">({</span>
                    <span class="na">src</span><span class="p">:</span> <span class="nx">picture64</span><span class="p">,</span>
                    <span class="na">title</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
                <span class="p">}))</span>
            <span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">transformedNewPictures</span> <span class="o">=&gt;</span>
                <span class="nx">dataProvider</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="p">{</span>
                    <span class="p">...</span><span class="nx">params</span><span class="p">,</span>
                    <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
                        <span class="p">...</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span>
                        <span class="na">pictures</span><span class="p">:</span> <span class="p">[</span>
                            <span class="p">...</span><span class="nx">transformedNewPictures</span><span class="p">,</span>
                            <span class="p">...</span><span class="nx">formerPictures</span><span class="p">,</span>
                        <span class="p">],</span>
                    <span class="p">},</span>
                <span class="p">})</span>
            <span class="p">);</span>
    <span class="p">},</span>
<span class="p">};</span>

<span class="cm">/**
 * Convert a `File` object returned by the upload input into a base 64 string.
 * That's not the most optimized way to store images in production, but it's
 * enough to illustrate the idea of data provider decoration.
 */</span>
<span class="kd">const</span> <span class="nx">convertFileToBase64</span> <span class="o">=</span> <span class="nx">file</span> <span class="o">=&gt;</span>
    <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
        <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">reader</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span>
        <span class="nx">reader</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="nx">reject</span><span class="p">;</span>

        <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">rawFile</span><span class="p">);</span>
    <span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">myDataProvider</span><span class="p">;</span>
</code></pre></div></div>

<p>Using this technique, you can also combine two Data Providers for two backends into a single object, or use a Proxy to transform responses for all methods.</p>

<h2 id="writing-your-own-data-provider">Writing Your Own Data Provider</h2>

<p>APIs are so diverse that quite often, none of the available Data Providers suit you API. In such cases, you‚Äôll have to write your own Data Provider. Don‚Äôt worry, it usually takes only a couple of hours.</p>

<p>The methods of a Data Provider receive a request, and return a promise for a response. Both the request and the response format are standardized.</p>

<p><strong>Caution</strong>: A Data Provider should return the same shape in <code class="language-plaintext highlighter-rouge">getList</code> and <code class="language-plaintext highlighter-rouge">getOne</code> for a given resource. This is because react-admin uses ‚Äúoptimistic rendering‚Äù, and renders the Edit and Show view <em>before</em> calling <code class="language-plaintext highlighter-rouge">dataProvider.getOne()</code> by reusing the response from <code class="language-plaintext highlighter-rouge">dataProvider.getList()</code> if the user has displayed the List view before. If your API has different shapes for a query for a unique record and for a query for a list of records, your Data Provider should make these records consistent in shape before returning them to react-admin.</p>

<p>For instance, the following Data Provider returns more details in <code class="language-plaintext highlighter-rouge">getOne</code> than in <code class="language-plaintext highlighter-rouge">getList</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span> <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">pagination</span><span class="p">:</span> <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">5</span> <span class="p">},</span>
    <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">},</span>
    <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">author_id</span><span class="p">:</span> <span class="mi">12</span> <span class="p">},</span>
<span class="p">})</span>
<span class="c1">// [</span>
<span class="c1">//   { id: 123, title: "hello, world", author_id: 12 },</span>
<span class="c1">//   { id: 125, title: "howdy partner", author_id: 12 },</span>
<span class="c1">//  ],</span>

<span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span> <span class="p">})</span>
<span class="c1">// {</span>
<span class="c1">//     data: { id: 123, title: "hello, world", author_id: 12, body: 'Lorem Ipsum Sic Dolor Amet' }</span>
<span class="c1">// }</span>
</code></pre></div></div>

<p>This will cause the Edit view to blink on load. If you have this problem, modify your Data Provider to return the same shape for all methods.</p>

<h2 id="request-format">Request Format</h2>

<p>Data queries require a <em>method</em> (e.g. <code class="language-plaintext highlighter-rouge">getOne</code>), a <em>resource</em> (e.g. ‚Äòposts‚Äô) and a set of <em>parameters</em>.</p>

<p><strong>Tip</strong>: In comparison, HTTP requests require a <em>verb</em> (e.g. ‚ÄòGET‚Äô), an <em>url</em> (e.g. ‚Äòhttp://myapi.com/posts‚Äô), a list of <em>headers</em> (like <code class="language-plaintext highlighter-rouge">Content-Type</code>) and a <em>body</em>.</p>

<p>Standard methods are:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Usage</th>
      <th>Parameters format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getList</code></td>
      <td>Search for resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ pagination: { page: {int} , perPage: {int} }, sort: { field: {string}, order: {string} }, filter: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getOne</code></td>
      <td>Read a single resource, by id</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getMany</code></td>
      <td>Read a list of resource, by ids</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getManyReference</code></td>
      <td>Read a list of resources related to another one</td>
      <td><code class="language-plaintext highlighter-rouge">{ target: {string}, id: {mixed}, pagination: { page: {int} , perPage: {int} }, sort: { field: {string}, order: {string} }, filter: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">create</code></td>
      <td>Create a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td>Update a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed}, data: {Object}, previousData: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">updateMany</code></td>
      <td>Update multiple resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]}, data: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td>Delete a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed}, previousData: {Object} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">deleteMany</code></td>
      <td>Delete multiple resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]} }</code></td>
    </tr>
  </tbody>
</table>

<p>Here are several examples of how react-admin can call the Data Provider:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">pagination</span><span class="p">:</span> <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">5</span> <span class="p">},</span>
    <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">},</span>
    <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">author_id</span><span class="p">:</span> <span class="mi">12</span> <span class="p">},</span>
<span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span> <span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">125</span><span class="p">]</span> <span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getManyReference</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">target</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post_id</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">created_at</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DESC</span><span class="dl">'</span> <span class="p">}</span>
<span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world!</span><span class="dl">"</span> <span class="p">},</span>
    <span class="na">previousData</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">previous title</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">updateMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">234</span><span class="p">],</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">views</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span>
<span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world</span><span class="dl">"</span> <span class="p">}</span> <span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">previousData</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">});</span>
<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">deleteMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">234</span><span class="p">]</span> <span class="p">});</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If your API supports more request types, you can add more methods to the Data Provider (for instance to support upserts, aggregations, or Remote Procedure Call). React-admin won‚Äôt call these methods directly, but you can call them in your own component thanks to the <code class="language-plaintext highlighter-rouge">useDataProvider</code> hook described in the <a href="./Actions.md">Querying the API</a> documentation.</p>

<h2 id="response-format">Response Format</h2>

<p>Data Providers methods must return a Promise for an object with a <code class="language-plaintext highlighter-rouge">data</code> property.</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Response format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getList</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]}, total: {int}, validUntil?: {Date} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getOne</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record}, validUntil?: {Date} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getMany</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]}, validUntil?: {Date} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getManyReference</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]}, total: {int} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">create</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">updateMany</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {mixed[]} }</code> The ids which have been updated</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code> The record that has been deleted</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">deleteMany</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {mixed[]} }</code> The ids of the deleted records (optional)</td>
    </tr>
  </tbody>
</table>

<p>A <code class="language-plaintext highlighter-rouge">{Record}</code> is an object literal with at least an <code class="language-plaintext highlighter-rouge">id</code> property, e.g. <code class="language-plaintext highlighter-rouge">{ id: 123, title: "hello, world" }</code>.</p>

<p>Building up on the previous example, here are example responses matching the format expected by react-admin:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">pagination</span><span class="p">:</span> <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">5</span> <span class="p">},</span>
    <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">},</span>
    <span class="na">filter</span><span class="p">:</span> <span class="p">{</span> <span class="na">author_id</span><span class="p">:</span> <span class="mi">12</span> <span class="p">},</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: [</span>
<span class="c1">//         { id: 126, title: "allo?", author_id: 12 },</span>
<span class="c1">//         { id: 127, title: "bien le bonjour", author_id: 12 },</span>
<span class="c1">//         { id: 124, title: "good day sunshine", author_id: 12 },</span>
<span class="c1">//         { id: 123, title: "hello, world", author_id: 12 },</span>
<span class="c1">//         { id: 125, title: "howdy partner", author_id: 12 },</span>
<span class="c1">//     ],</span>
<span class="c1">//     total: 27</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span> <span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: { id: 123, title: "hello, world" }</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">125</span><span class="p">]</span> <span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: [</span>
<span class="c1">//         { id: 123, title: "hello, world" },</span>
<span class="c1">//         { id: 124, title: "good day sunshise" },</span>
<span class="c1">//         { id: 125, title: "howdy partner" },</span>
<span class="c1">//     ]</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getManyReference</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">target</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post_id</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">created_at</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DESC</span><span class="dl">'</span> <span class="p">}</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>

<span class="c1">// {</span>
<span class="c1">//     data: [</span>
<span class="c1">//         { id: 667, title: "I agree", post_id: 123 },</span>
<span class="c1">//         { id: 895, title: "I don't agree", post_id: 123 },</span>
<span class="c1">//     ],</span>
<span class="c1">//     total: 2,</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world</span><span class="dl">"</span> <span class="p">}</span> <span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: { id: 450, title: "hello, world" }</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world!</span><span class="dl">"</span> <span class="p">},</span>
    <span class="na">previousData</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">previous title</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: { id: 123, title: "hello, world!" }</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">updateMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">234</span><span class="p">],</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">views</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: [123, 234]</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="na">previousData</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello, world!</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: { id: 123, title: "hello, world" }</span>
<span class="c1">// }</span>

<span class="nx">dataProvider</span><span class="p">.</span><span class="nx">deleteMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">ids</span><span class="p">:</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mi">234</span><span class="p">]</span> <span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">));</span>
<span class="c1">// {</span>
<span class="c1">//     data: [123, 234]</span>
<span class="c1">// }</span>
</code></pre></div></div>

<p><strong>Tip</strong>: The <code class="language-plaintext highlighter-rouge">validUntil</code> field in the response is optional. It enables the Application cache, a client-side optimization to speed up rendering and reduce network traffic. Check <a href="./Caching.md#application-cache">the Caching documentation</a> for more details.</p>

<h2 id="error-format">Error Format</h2>

<p>When the API backend returns an error, the Data Provider should return a rejected Promise containing an <code class="language-plaintext highlighter-rouge">Error</code> object. This object should contain a <code class="language-plaintext highlighter-rouge">status</code> property with the HTTP response code (404, 500, etc.). React-admin inspects this error code, and uses it for <a href="./Authentication.md">authentication</a> (in case of 401 or 403 errors). Besides, react-admin displays the error <code class="language-plaintext highlighter-rouge">message</code> on screen in a temporary notification.</p>

<p>If you use <code class="language-plaintext highlighter-rouge">fetchJson</code>, you don‚Äôt need to do anything: HTTP errors are automatically decorated as expected by react-admin.</p>

<p>If you use another HTTP client, make sure you return a rejected Promise. You can use the <code class="language-plaintext highlighter-rouge">HttpError</code> class to throw an error with status in one line:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">HttpError</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">getList</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">myApiClient</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="p">...</span><span class="nx">options</span><span class="p">,</span> <span class="na">headers</span><span class="p">:</span> <span class="nx">requestHeaders</span> <span class="p">})</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span>
                    <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">({</span>
                        <span class="na">status</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span>
                        <span class="na">statusText</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">,</span>
                        <span class="na">headers</span><span class="p">:</span> <span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>
                        <span class="na">body</span><span class="p">:</span> <span class="nx">text</span><span class="p">,</span>
                    <span class="p">}))</span>
                <span class="p">)</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">statusText</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">body</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">let</span> <span class="nx">json</span><span class="p">;</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// not json, no big deal</span>
                    <span class="p">}</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nx">reject</span><span class="p">(</span>
                            <span class="k">new</span> <span class="nx">HttpError</span><span class="p">(</span>
                                <span class="p">(</span><span class="nx">json</span> <span class="o">&amp;&amp;</span> <span class="nx">json</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span> <span class="o">||</span> <span class="nx">statusText</span><span class="p">,</span>
                                <span class="nx">status</span><span class="p">,</span>
                                <span class="nx">json</span>
                            <span class="p">)</span>
                        <span class="p">);</span>
                    <span class="p">}</span>
                    <span class="k">return</span> <span class="nx">resolve</span><span class="p">({</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">json</span> <span class="p">});</span>
                <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="example-implementation">Example Implementation</h2>

<p>Let‚Äôs say that you want to map the react-admin requests to a REST backend exposing the following API:</p>

<h3 id="getlist">getList</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://path.to.my.api/posts?sort=["title","ASC"]&amp;range=[0, 4]&amp;filter={"author_id":12}

HTTP/1.1 200 OK
Content-Type: application/json
Content-Range: posts 0-4/27
[
    { "id": 126, "title": "allo?", "author_id": 12 },
    { "id": 127, "title": "bien le bonjour", "author_id": 12 },
    { "id": 124, "title": "good day sunshine", "author_id": 12 },
    { "id": 123, "title": "hello, world", "author_id": 12 },
    { "id": 125, "title": "howdy partner", "author_id": 12 }
]
</code></pre></div></div>

<h3 id="getone">getOne</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://path.to.my.api/posts/123

HTTP/1.1 200 OK
Content-Type: application/json
{ "id": 123, "title": "hello, world", "author_id": 12 }
</code></pre></div></div>

<h3 id="getmany">getMany</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://path.to.my.api/posts?filter={"id":[123,124,125]}

HTTP/1.1 200 OK
Content-Type: application/json
[
    { "id": 123, "title": "hello, world", "author_id": 12 },
    { "id": 124, "title": "good day sunshine", "author_id": 12 },
    { "id": 125, "title": "howdy partner", "author_id": 12 }
]
</code></pre></div></div>

<h3 id="getmanyreference">getManyReference</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://path.to.my.api/comments?sort=["created_at","DESC"]&amp;range=[0, 24]&amp;filter={"post_id":123}

HTTP/1.1 200 OK
Content-Type: application/json
Content-Range: comments 0-1/2
[
    { "id": 667, "title": "I agree", "post_id": 123 },
    { "id": 895, "title": "I don't agree", "post_id": 123 }
]
</code></pre></div></div>

<h3 id="create">create</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST http://path.to.my.api/posts
{ "title": "hello, world", "author_id": 12 }

HTTP/1.1 200 OK
Content-Type: application/json
{ "id": 123, "title": "hello, world", "author_id": 12 }
</code></pre></div></div>

<h3 id="update">update</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT http://path.to.my.api/posts/123
{ "title": "hello, world!" }

HTTP/1.1 200 OK
Content-Type: application/json
{ "id": 123, "title": "hello, world!", "author_id": 12 }
</code></pre></div></div>

<h3 id="updatemany">updateMany</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT http://path.to.my.api/posts?filter={"id":[123,124,125]}
{ "title": "hello, world!" }

HTTP/1.1 200 OK
Content-Type: application/json
[123, 124, 125]
</code></pre></div></div>

<h3 id="delete">delete</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://path.to.my.api/posts/123

HTTP/1.1 200 OK
Content-Type: application/json
{ "id": 123, "title": "hello, world", "author_id": 12 }
</code></pre></div></div>

<h3 id="deletemany">deleteMany</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://path.to.my.api/posts?filter={"id":[123,124,125]}

HTTP/1.1 200 OK
Content-Type: application/json
[123, 124, 125]
</code></pre></div></div>

<p>Here is an example implementation, that you can use as a base for your own Data Providers:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">fetchUtils</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">stringify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">query-string</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://my.api.com/</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">httpClient</span> <span class="o">=</span> <span class="nx">fetchUtils</span><span class="p">.</span><span class="nx">fetchJson</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">getList</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">perPage</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">pagination</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">field</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">sort</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">sort</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([</span><span class="nx">field</span><span class="p">,</span> <span class="nx">order</span><span class="p">]),</span>
            <span class="na">range</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([(</span><span class="nx">page</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">perPage</span><span class="p">,</span> <span class="nx">page</span> <span class="o">*</span> <span class="nx">perPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]),</span>
            <span class="na">filter</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">filter</span><span class="p">),</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">?</span><span class="p">${</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">query</span><span class="p">)}</span><span class="s2">`</span><span class="p">;</span>

        <span class="k">return</span> <span class="nx">httpClient</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">data</span><span class="p">:</span> <span class="nx">json</span><span class="p">,</span>
            <span class="na">total</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">headers</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">content-range</span><span class="dl">'</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">).</span><span class="nx">pop</span><span class="p">(),</span> <span class="mi">10</span><span class="p">),</span>
        <span class="p">}));</span>
    <span class="p">},</span>

    <span class="na">getOne</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">data</span><span class="p">:</span> <span class="nx">json</span><span class="p">,</span>
        <span class="p">})),</span>

    <span class="na">getMany</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">filter</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">ids</span> <span class="p">}),</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">?</span><span class="p">${</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">query</span><span class="p">)}</span><span class="s2">`</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">httpClient</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="nx">json</span> <span class="p">}));</span>
    <span class="p">},</span>

    <span class="na">getManyReference</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">perPage</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">pagination</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">field</span><span class="p">,</span> <span class="nx">order</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">sort</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">sort</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([</span><span class="nx">field</span><span class="p">,</span> <span class="nx">order</span><span class="p">]),</span>
            <span class="na">range</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">([(</span><span class="nx">page</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">perPage</span><span class="p">,</span> <span class="nx">page</span> <span class="o">*</span> <span class="nx">perPage</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]),</span>
            <span class="na">filter</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
                <span class="p">...</span><span class="nx">params</span><span class="p">.</span><span class="nx">filter</span><span class="p">,</span>
                <span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">target</span><span class="p">]:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
            <span class="p">}),</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">?</span><span class="p">${</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">query</span><span class="p">)}</span><span class="s2">`</span><span class="p">;</span>

        <span class="k">return</span> <span class="nx">httpClient</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">data</span><span class="p">:</span> <span class="nx">json</span><span class="p">,</span>
            <span class="na">total</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">headers</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">content-range</span><span class="dl">'</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">).</span><span class="nx">pop</span><span class="p">(),</span> <span class="mi">10</span><span class="p">),</span>
        <span class="p">}));</span>
    <span class="p">},</span>

    <span class="na">update</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">),</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="nx">json</span> <span class="p">})),</span>

    <span class="na">updateMany</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">filter</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">ids</span><span class="p">}),</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">?</span><span class="p">${</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">query</span><span class="p">)}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">),</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="nx">json</span> <span class="p">}));</span>
    <span class="p">},</span>

    <span class="na">create</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">),</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="na">id</span><span class="p">:</span> <span class="nx">json</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">})),</span>

    <span class="na">delete</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="nx">json</span> <span class="p">})),</span>

    <span class="na">deleteMany</span><span class="p">:</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">filter</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">ids</span><span class="p">}),</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">httpClient</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">resource</span><span class="p">}</span><span class="s2">?</span><span class="p">${</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">query</span><span class="p">)}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">data</span><span class="p">),</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">json</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">data</span><span class="p">:</span> <span class="nx">json</span> <span class="p">}));</span>
    <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="using-the-data-provider-in-components">Using The Data Provider In Components</h2>

<p>React-admin stores the Data Provider passed to <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> in a React context, so you can access it from anywhere in your code. To facilitate usage, react-admin provides many data provider hooks:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">useDataProvider</code></li>
  <li><code class="language-plaintext highlighter-rouge">useQuery</code></li>
  <li><code class="language-plaintext highlighter-rouge">useQueryWithStore</code></li>
  <li><code class="language-plaintext highlighter-rouge">useMutation</code></li>
  <li><code class="language-plaintext highlighter-rouge">useGetList</code></li>
  <li><code class="language-plaintext highlighter-rouge">useGetOne</code></li>
  <li><code class="language-plaintext highlighter-rouge">useGetMany</code></li>
  <li><code class="language-plaintext highlighter-rouge">useGetManyReference</code></li>
  <li><code class="language-plaintext highlighter-rouge">useCreate</code></li>
  <li><code class="language-plaintext highlighter-rouge">useUpdate</code></li>
  <li><code class="language-plaintext highlighter-rouge">useUpdateMany</code></li>
  <li><code class="language-plaintext highlighter-rouge">useDelete</code></li>
  <li><code class="language-plaintext highlighter-rouge">useDeleteMany</code></li>
</ul>

<p>Here is a glimpse of the <code class="language-plaintext highlighter-rouge">useGetOne</code> hook usage:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useGetOne</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserProfile</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>User <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">username</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>You will find complete usage documentation for the data provider hooks in the <a href="./Actions.md">Querying the API</a> documentation chapter.</p>

<h2 id="real-time-updates-and-locks">Real-Time Updates And Locks</h2>

<p>Teams where several people work in parallel on a common task need to allow live updates, real-time notifications, and prevent data loss when two editors work on the same resource concurrently.</p>

<p><a href="https://marmelab.com/ra-enterprise/modules/ra-realtime"><code class="language-plaintext highlighter-rouge">ra-realtime</code></a> (an <a href="https://marmelab.com/ra-enterprise">Enterprise Edition <img class="icon" src="./img/premium.svg" /></a> module) provides hooks and UI components to lock records, and update views when the underlying data changes. It‚Äôs based on the Publish / Subscribe (PubSub) pattern, and requires a backend supporting this pattern (like GraphQL, Mercure).</p>

<p>For instance, here is how to enable live updates on a List view:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import {
</span><span class="gd">-   List,
</span>    Datagrid,
    TextField,
    NumberField,
    Datefield,
<span class="err">}</span> from 'react-admin';
<span class="gi">+import { RealTimeList } from '@react-admin/ra-realtime';
</span>
const PostList = props =&gt; (
<span class="gd">-   &lt;List {...props}&gt;
</span><span class="gi">+   &lt;RealTimeList {...props}&gt;
</span>        &lt;Datagrid&gt;
            &lt;TextField source="title" /&gt;
            &lt;NumberField source="views" /&gt;
            &lt;DateField source="published_at" /&gt;
        &lt;/Datagrid&gt;
<span class="gd">-   &lt;/List&gt;
</span><span class="gi">+   &lt;/RealTimeList&gt;
</span><span class="err">);</span>
</code></pre></div></div>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-realtime">the <code class="language-plaintext highlighter-rouge">ra-realtime</code> documentation</a> for more details.</p>

:ET