I".+<h1 id="field-components">Field Components</h1>

<p>A <code class="language-plaintext highlighter-rouge">Field</code> component displays a given property of a REST resource. Such components are used in the <code class="language-plaintext highlighter-rouge">List</code> and <code class="language-plaintext highlighter-rouge">Show</code> views, but you can also use them in the <code class="language-plaintext highlighter-rouge">Edit</code> and <code class="language-plaintext highlighter-rouge">Create</code> views for read-only fields.</p>

<p>The most usual of all field components is <code class="language-plaintext highlighter-rouge">&lt;TextField&gt;</code>, and it displays one field of the current record in plain text:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/posts.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Field</code> components read the current <code class="language-plaintext highlighter-rouge">record</code> from the current <code class="language-plaintext highlighter-rouge">RecordContext</code> (set by react-admin). There is nothing magic there - you can easily write your own:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRecordContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PurpleTextField</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">source</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">purple</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">record</span> <span class="o">&amp;&amp;</span> <span class="nx">record</span><span class="p">[</span><span class="nx">source</span><span class="p">]</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>React-admin Field components also accept a <code class="language-plaintext highlighter-rouge">record</code> prop. This allows you to use them outside of a <code class="language-plaintext highlighter-rouge">RecordContext</code>, or to use another <code class="language-plaintext highlighter-rouge">record</code> than the one in the current context.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a post looks like</span>
<span class="c1">// { id: 123, title: "Hello, world", author: "John Doe", body: "..." }</span>

<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loaded</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">books</span><span class="dl">'</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">loaded</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Loading<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;;</span> 
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">dl</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;&lt;</span><span class="nc">TextField</span> <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;</span>Author<span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;&lt;</span><span class="nc">PurpleTextField</span> <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="na">source</span><span class="p">=</span><span class="s">"author"</span> <span class="p">/&gt;&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">dl</span><span class="p">&gt;</span>   
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="common-field-props">Common Field Props</h2>

<p>All Field components accept the following props:</p>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">record</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code></td>
      <td>-</td>
      <td>Object containing the properties to display, to override the record from the current <code class="language-plaintext highlighter-rouge">RecordContext</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">source</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>Name of the property to display</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">label</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code> | <code class="language-plaintext highlighter-rouge">ReactElement</code></td>
      <td><code class="language-plaintext highlighter-rouge">source</code></td>
      <td>Used as a table header or an input label</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sortable</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
      <td><code class="language-plaintext highlighter-rouge">true</code></td>
      <td>When used in a <code class="language-plaintext highlighter-rouge">List</code>, should the list be sortable using the <code class="language-plaintext highlighter-rouge">source</code> attribute? Setting it to <code class="language-plaintext highlighter-rouge">false</code> disables the click handler on the column header.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sortBy</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td><code class="language-plaintext highlighter-rouge">source</code></td>
      <td>When used in a <code class="language-plaintext highlighter-rouge">List</code>, specifies the actual <code class="language-plaintext highlighter-rouge">source</code> to be used for sorting when the user clicks the column header</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sortByOrder</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">ASC</code> | <code class="language-plaintext highlighter-rouge">DESC</code></td>
      <td><code class="language-plaintext highlighter-rouge">ASC</code></td>
      <td>When used in a <code class="language-plaintext highlighter-rouge">List</code>, specifies the sort order to be used for sorting when the user clicks the column header</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">className</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A class name (usually generated by JSS) to customize the look and feel of the field element itself</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">cellClassName</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A class name (usually generated by JSS) to customize the look and feel of the field container (e.g. the <code class="language-plaintext highlighter-rouge">&lt;td&gt;</code> in a <code class="language-plaintext highlighter-rouge">Datagrid</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">headerClassName</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A class name (usually generated by JSS) to customize the look and feel of the field header (e.g. the <code class="language-plaintext highlighter-rouge">&lt;th&gt;</code> in a <code class="language-plaintext highlighter-rouge">Datagrid</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">formClassName</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A class name (usually generated by JSS) to customize the look and feel of the field container when it is used inside <code class="language-plaintext highlighter-rouge">&lt;SimpleForm&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;TabbedForm&gt;</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">addLabel</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
      <td><code class="language-plaintext highlighter-rouge">false</code></td>
      <td>Defines the visibility of the label when the field is used in <code class="language-plaintext highlighter-rouge">&lt;SimpleForm&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;FormTab&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>, or <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code>. It’s <code class="language-plaintext highlighter-rouge">true</code> for all react-admin <code class="language-plaintext highlighter-rouge">&lt;Field&gt;</code> components.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">textAlign</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>‘left’</td>
      <td>Defines the text alignment inside a cell. Set to <code class="language-plaintext highlighter-rouge">right</code> for right alignment (e.g. for numbers)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">emptyText</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>’’</td>
      <td>Defines a text to be shown when a field has no value (not supported in array fields)</td>
    </tr>
  </tbody>
</table>

<p><strong>Tip</strong>: You can use field components inside the <code class="language-plaintext highlighter-rouge">Edit</code> or <code class="language-plaintext highlighter-rouge">Show</code> views, too:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">({</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you display a record with a complex structure, you can use a path with dot separators as the <code class="language-plaintext highlighter-rouge">source</code> attribute. For instance, if the API returns the following ‘book’ record:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">id</span><span class="p">:</span> <span class="mi">1234</span><span class="p">,</span>
    <span class="nx">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">War and Peace</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">author</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Leo</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tolstoi</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then you can display the author first name as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author.firstName"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you want to display data from more than one field, check out <a href="#functionfield">the <code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code></a>, which accepts a <code class="language-plaintext highlighter-rouge">render</code> function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FunctionField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">FunctionField</span>
    <span class="na">label</span><span class="p">=</span><span class="s">"Name"</span>
    <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">first_name</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">last_name</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
<span class="p">/&gt;;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you want to format a field according to the value, use a higher-order component to do conditional formatting, as described in the <a href="./Theming.md#conditional-formatting">Theming documentation</a>.</p>

<p><strong>Tip</strong>: If your interface has to support multiple languages, don’t use the <code class="language-plaintext highlighter-rouge">label</code> prop, and put the localized labels in a dictionary instead. See the <a href="./Translation.md#translating-resource-and-field-names">Translation documentation</a> for details.</p>

<h2 id="basic-fields">Basic Fields</h2>

<h3 id="booleanfield"><code class="language-plaintext highlighter-rouge">&lt;BooleanField&gt;</code></h3>

<p>Displays a boolean value as a check.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BooleanField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">source</span><span class="p">=</span><span class="s">"commentable"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><img src="./img/boolean-field.png" alt="BooleanField" /></p>

<h4 id="properties">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">valueLabelTrue</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>‘true’</td>
      <td>Aria label for the truthy value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">valueLabelFalse</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>‘false’</td>
      <td>Aria label for the falsy value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">TrueIcon</code></td>
      <td>Optional</td>
      <td>SvgIconComponent</td>
      <td><code class="language-plaintext highlighter-rouge">@material-ui/icons/Done</code></td>
      <td>Icon to show for the truthy value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">FalseIcon</code></td>
      <td>Optional</td>
      <td>SvgIconComponent</td>
      <td><code class="language-plaintext highlighter-rouge">@material-ui/icons/Clear</code></td>
      <td>Icon to show for the falsy value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">looseValue</code></td>
      <td>Optional</td>
      <td>boolean</td>
      <td><code class="language-plaintext highlighter-rouge">false</code></td>
      <td>If <code class="language-plaintext highlighter-rouge">true</code> the field’s value is not evaluated strictly as a <code class="language-plaintext highlighter-rouge">boolean</code></td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;BooleanField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="css-api">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">root</code></td>
      <td>Applied to the root element</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;BooleanField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaBooleanField</code> key.</p>

<h4 id="usage">Usage</h4>

<p>The <code class="language-plaintext highlighter-rouge">&lt;BooleanField&gt;</code> includes a tooltip text for accessibility (or to query in “end to end” tests). By default, it is the translated value (‘true’ or ‘false’ in English).</p>

<p>If you need to override it, you can use the <code class="language-plaintext highlighter-rouge">valueLabelTrue</code> and <code class="language-plaintext highlighter-rouge">valueLabelFalse</code> props, which both accept a string. These strings may be translation keys:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// English labels</span>
<span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">source</span><span class="p">=</span><span class="s">"published"</span> <span class="na">valueLabelTrue</span><span class="p">=</span><span class="s">"Has been published"</span> <span class="na">valueLabelFalse</span><span class="p">=</span><span class="s">"Has not been published yet"</span> <span class="p">/&gt;</span>

<span class="c1">// Translation keys</span>
<span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">source</span><span class="p">=</span><span class="s">"published"</span> <span class="na">valueLabelTrue</span><span class="p">=</span><span class="s">"myapp.published.true"</span> <span class="na">valueLabelFalse</span><span class="p">=</span><span class="s">"myapp.published.false"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>You can customize the icons to show by setting the <code class="language-plaintext highlighter-rouge">TrueIcon</code> and <code class="language-plaintext highlighter-rouge">FalseIcon</code> props which accept a SvgIcon type.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">AlarmOnIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/AlarmOn</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AlarmOffIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/AlarmOff</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">source</span><span class="p">=</span><span class="s">"alarm"</span> <span class="na">TrueIcon</span><span class="p">=</span><span class="si">{</span><span class="nx">AlarmOnIcon</span><span class="si">}</span> <span class="na">FalseIcon</span><span class="p">=</span><span class="si">{</span><span class="nx">AlarmOffIcon</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="chipfield"><code class="language-plaintext highlighter-rouge">&lt;ChipField&gt;</code></h3>

<p>Displays a value inside a <a href="https://material-ui.com/components/chips">“Chip”</a>, which is Material UI’s term for a label.</p>

<h4 id="css-api-1">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">chip</code></td>
      <td>Applied to the underlying Material UI’s <code class="language-plaintext highlighter-rouge">Chip</code> component</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;ChipField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaChipField</code> key.</p>

<h4 id="usage-1">Usage</h4>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ChipField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"category"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><img src="./img/chip-field.png" alt="ChipField" /></p>

<p>This field type is especially useful for one to many relationships, e.g. to display a list of books for a given author:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ChipField</span><span class="p">,</span> <span class="nx">SingleFieldList</span><span class="p">,</span> <span class="nx">ReferenceManyField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">reference</span><span class="p">=</span><span class="s">"books"</span> <span class="na">target</span><span class="p">=</span><span class="s">"author_id"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Any additional props are passed to material-ui’s <code class="language-plaintext highlighter-rouge">&lt;Chip&gt;</code> element. Check <a href="https://material-ui.com/api/chip/">The material-ui <code class="language-plaintext highlighter-rouge">&lt;Chip&gt;</code> documentation</a> for details.</p>

<h3 id="datefield"><code class="language-plaintext highlighter-rouge">&lt;DateField&gt;</code></h3>

<p>Displays a date or datetime using the browser locale (thanks to <code class="language-plaintext highlighter-rouge">Date.toLocaleDateString()</code> and <code class="language-plaintext highlighter-rouge">Date.toLocaleString()</code>).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">DateField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h4 id="properties-1">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">locales</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>’’</td>
      <td>Override the browser locale in the date formatting. Passed as first argument to <code class="language-plaintext highlighter-rouge">Intl.DateTimeFormat()</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">options</code></td>
      <td>Optional</td>
      <td>Object</td>
      <td>-</td>
      <td>Date formatting options. Passed as second argument to <code class="language-plaintext highlighter-rouge">Intl.DateTimeFormat()</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">showTime</code></td>
      <td>Optional</td>
      <td>boolean</td>
      <td><code class="language-plaintext highlighter-rouge">false</code></td>
      <td>If true, show date and time. If false, show only date</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;DateField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="usage-2">Usage</h4>

<p>This component accepts a <code class="language-plaintext highlighter-rouge">showTime</code> attribute (<code class="language-plaintext highlighter-rouge">false</code> by default) to force the display of time in addition to date. It uses <code class="language-plaintext highlighter-rouge">Intl.DateTimeFormat()</code> if available, passing the <code class="language-plaintext highlighter-rouge">locales</code> and <code class="language-plaintext highlighter-rouge">options</code> props as arguments. If Intl is not available, it ignores the <code class="language-plaintext highlighter-rouge">locales</code> and <code class="language-plaintext highlighter-rouge">options</code> props.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, publication_date: new Date('2017-04-23') } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>4/23/2017<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="na">showTime</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, publication_date: new Date('2017-04-23 23:05') } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>4/23/2017, 11:05:00 PM<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">weekday</span><span class="p">:</span> <span class="dl">'</span><span class="s1">long</span><span class="dl">'</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="dl">'</span><span class="s1">numeric</span><span class="dl">'</span><span class="p">,</span> <span class="na">month</span><span class="p">:</span> <span class="dl">'</span><span class="s1">long</span><span class="dl">'</span><span class="p">,</span> <span class="na">day</span><span class="p">:</span> <span class="dl">'</span><span class="s1">numeric</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, publication_date: new Date('2017-04-23') } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Sunday, April 23, 2017<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="na">locales</span><span class="p">=</span><span class="s">"fr-FR"</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, publication_date: new Date('2017-04-23') } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>23/04/2017<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString">Intl.DateTimeFormat documentation</a> for the <code class="language-plaintext highlighter-rouge">options</code> prop syntax.</p>

<p><strong>Tip</strong>: If you need more formatting options than what <code class="language-plaintext highlighter-rouge">Intl.DateTimeFormat</code> can provide, build your own field component leveraging a third-party library like <a href="https://momentjs.com/">moment.js</a>.</p>

<h3 id="emailfield"><code class="language-plaintext highlighter-rouge">&lt;EmailField&gt;</code></h3>

<p><code class="language-plaintext highlighter-rouge">&lt;EmailField&gt;</code> displays an email as a Material UI’s <code class="language-plaintext highlighter-rouge">&lt;Link href="mailto:" /&gt;</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">EmailField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">EmailField</span> <span class="na">source</span><span class="p">=</span><span class="s">"personal_email"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="functionfield"><code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code></h3>

<p>If you need a special function to render a field, <code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code> is the perfect match. It passes the <code class="language-plaintext highlighter-rouge">record</code> to a <code class="language-plaintext highlighter-rouge">render</code> function supplied by the developer. For instance, to display the full name of a <code class="language-plaintext highlighter-rouge">user</code> record based on <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code> properties:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FunctionField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">FunctionField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Name"</span> <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">first_name</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">last_name</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h4 id="properties-2">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">render</code></td>
      <td>Required</td>
      <td>function</td>
      <td>-</td>
      <td>A function returning a string (or an element) to display based on a record</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<p><strong>Tip</strong>: Technically, you can omit the <code class="language-plaintext highlighter-rouge">source</code> and <code class="language-plaintext highlighter-rouge">sortBy</code> properties for the <code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code> since you provide the render function. However, providing a <code class="language-plaintext highlighter-rouge">source</code> or a <code class="language-plaintext highlighter-rouge">sortBy</code> will allow the <code class="language-plaintext highlighter-rouge">Datagrid</code> to make the column sortable, since when a user clicks on a column, the <code class="language-plaintext highlighter-rouge">Datagrid</code> uses these properties to sort. Should you provide both, <code class="language-plaintext highlighter-rouge">sortBy</code> will override <code class="language-plaintext highlighter-rouge">source</code> for sorting the column.</p>

<h3 id="imagefield"><code class="language-plaintext highlighter-rouge">&lt;ImageField&gt;</code></h3>

<p>If you need to display an image based on a path contained in a record field, you can use the <code class="language-plaintext highlighter-rouge">&lt;ImageField /&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ImageField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">ImageField</span> <span class="na">source</span><span class="p">=</span><span class="s">"url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>

<span class="c1">// renders the record { id: 123, url: 'cat.png', title: 'meow' } as </span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="p">=</span><span class="s">"cat.png"</span> <span class="na">title</span><span class="p">=</span><span class="s">"meow"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This field is also often used within the <a href="./Inputs.md#imageinput"><ImageInput></ImageInput></a> component to display a preview.</p>

<h4 id="properties-3">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">src</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>-</td>
      <td>A function returning a string (or an element) to display based on a record</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">title</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>record.title</td>
      <td>The name of the property containing the image source if the value is an array of objects</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;ImageField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="css-api-2">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">list</code></td>
      <td>Applied to the underlying <code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> component when <code class="language-plaintext highlighter-rouge">sourceValue</code> prop is an array</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">image</code></td>
      <td>Applied to each underlying <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> component</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;ImageField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaImageField</code> key.</p>

<h4 id="usage-3">Usage</h4>

<p>The optional <code class="language-plaintext highlighter-rouge">title</code> prop points to the picture title property, used for both <code class="language-plaintext highlighter-rouge">alt</code> and <code class="language-plaintext highlighter-rouge">title</code> attributes. It can either be a hard-written string, or a path within your JSON object:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// { picture: { url: 'cover.jpg', title: 'Larry Cover (French pun intended)' } }</span>

<span class="p">&lt;</span><span class="nc">ImageField</span> <span class="na">source</span><span class="p">=</span><span class="s">"picture.url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"picture.title"</span> <span class="p">/&gt;</span>
<span class="c1">// renders img title as "Larry Cover (French pun intended)"</span>

<span class="p">&lt;</span><span class="nc">ImageField</span> <span class="na">source</span><span class="p">=</span><span class="s">"picture.url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"Picture"</span> <span class="p">/&gt;</span>
<span class="c1">// renders img title as "Picture", since "Picture" is not a path in previous given object</span>
</code></pre></div></div>

<p>If the record actually contains an array of images in the property defined by the <code class="language-plaintext highlighter-rouge">source</code> prop, the <code class="language-plaintext highlighter-rouge">src</code> prop will be needed to determine the <code class="language-plaintext highlighter-rouge">src</code> value of the images, for example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is the record</span>
<span class="p">{</span>
    <span class="nl">pictures</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">image1.jpg</span><span class="dl">'</span><span class="p">,</span> <span class="na">desc</span><span class="p">:</span> <span class="dl">'</span><span class="s1">First image</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">image2.jpg</span><span class="dl">'</span><span class="p">,</span> <span class="na">desc</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Second image</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
<span class="p">}</span>

<span class="o">&lt;</span><span class="nx">ImageField</span> <span class="nx">source</span><span class="o">=</span><span class="dl">"</span><span class="s2">pictures</span><span class="dl">"</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">url</span><span class="dl">"</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">desc</span><span class="dl">"</span> <span class="o">/&gt;</span>
</code></pre></div></div>

<h3 id="filefield"><code class="language-plaintext highlighter-rouge">&lt;FileField&gt;</code></h3>

<p>If you need to render a link to a file based on a path contained in a record field, you can use the <code class="language-plaintext highlighter-rouge">&lt;FileField /&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FileField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">FileField</span> <span class="na">source</span><span class="p">=</span><span class="s">"url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>

<span class="c1">// renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as </span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="s">"doc.pdf"</span> <span class="na">title</span><span class="p">=</span><span class="s">"Presentation"</span><span class="p">&gt;</span>Presentation<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>This field is also often used within an <a href="./Inputs.md#fileinput"><FileInput></FileInput></a> component to display preview.</p>

<h4 id="properties-4">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">src</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A function returning a string (or an element) to display based on a record</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">title</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>record.title</td>
      <td>The name of the property containing the image source if the value is an array of objects</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">target</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>The link target. Set to “_blank” to open the file on a new tab</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">download</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">boolean</code> | <code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>Prompts the user to save the linked URL instead of navigating to it</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ping</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs. Typically for tracking.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">rel</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>The relationship of the linked URL as space-separated link types (e.g. ‘noopener’, ‘canonical’, etc.).</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;FileField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="css-api-3">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">root</code></td>
      <td>Applied to the root element</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;FileField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaFileField</code> key.</p>

<h4 id="usage-4">Usage</h4>

<p>The optional <code class="language-plaintext highlighter-rouge">title</code> prop points to the file title property, used for <code class="language-plaintext highlighter-rouge">title</code> attributes. It can either be a hard-written string, or a path within your JSON object:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// { file: { url: 'doc.pdf', title: 'Presentation' } }</span>

<span class="p">&lt;</span><span class="nc">FileField</span> <span class="na">source</span><span class="p">=</span><span class="s">"file.url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"file.title"</span> <span class="p">/&gt;</span>
<span class="c1">// renders the file name as "Presentation"</span>

<span class="p">&lt;</span><span class="nc">FileField</span> <span class="na">source</span><span class="p">=</span><span class="s">"file.url"</span> <span class="na">title</span><span class="p">=</span><span class="s">"File"</span> <span class="p">/&gt;</span>
<span class="c1">// renders the file name as "File", since "File" is not a path in previous given object</span>
</code></pre></div></div>

<p>If the record actually contains an array of files in its property defined by the <code class="language-plaintext highlighter-rouge">source</code> prop, the <code class="language-plaintext highlighter-rouge">src</code> prop will be needed to determine the <code class="language-plaintext highlighter-rouge">href</code> value of the links, for example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This is the record</span>
<span class="p">{</span>
    <span class="nl">files</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">image1.jpg</span><span class="dl">'</span><span class="p">,</span> <span class="na">desc</span><span class="p">:</span> <span class="dl">'</span><span class="s1">First image</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">image2.jpg</span><span class="dl">'</span><span class="p">,</span> <span class="na">desc</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Second image</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">],</span>
<span class="p">}</span>

<span class="o">&lt;</span><span class="nx">FileField</span> <span class="nx">source</span><span class="o">=</span><span class="dl">"</span><span class="s2">files</span><span class="dl">"</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">url</span><span class="dl">"</span> <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">desc</span><span class="dl">"</span> <span class="o">/&gt;</span>
</code></pre></div></div>

<p>You can optionally set the <code class="language-plaintext highlighter-rouge">target</code> prop to choose which window will the link try to open in.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Will make the file open in new window</span>
<span class="p">&lt;</span><span class="nc">FileField</span> <span class="na">source</span><span class="p">=</span><span class="s">"file.url"</span> <span class="na">target</span><span class="p">=</span><span class="s">"_blank"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="markdownfield"><code class="language-plaintext highlighter-rouge">&lt;MarkdownField&gt;</code></h3>

<p>This <a href="https://marmelab.com/ra-enterprise">Enterprise Edition</a><img class="icon" src="./img/premium.svg" /> component allows to render Markdown data as HTML.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Show</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MarkdownField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-admin/ra-markdown</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">MarkdownField</span> <span class="na">source</span><span class="p">=</span><span class="s">"description"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-markdown">the <code class="language-plaintext highlighter-rouge">ra-markdown</code> documentation</a> for more details.</p>

<h3 id="numberfield"><code class="language-plaintext highlighter-rouge">&lt;NumberField&gt;</code></h3>

<p>Displays a number formatted according to the browser locale, right aligned.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"score"</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, score: 567 } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>567<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</code></pre></div></div>

<h4 id="properties-5">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">locales</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>’’</td>
      <td>Override the browser locale in the date formatting. Passed as first argument to <code class="language-plaintext highlighter-rouge">Intl.NumberFormat()</code>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">options</code></td>
      <td>Optional</td>
      <td>Object</td>
      <td>-</td>
      <td>Number formatting options. Passed as second argument to <code class="language-plaintext highlighter-rouge">Intl.NumberFormat()</code>.</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;NumberField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="usage-5">Usage</h4>

<p><code class="language-plaintext highlighter-rouge">&lt;NumberField&gt;</code> uses <code class="language-plaintext highlighter-rouge">Intl.NumberFormat()</code> if available, passing the <code class="language-plaintext highlighter-rouge">locales</code> and <code class="language-plaintext highlighter-rouge">options</code> props as arguments. This allows a perfect display of decimals, currencies, percentages, etc. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat">Intl.NumberFormat documentation</a> for the <code class="language-plaintext highlighter-rouge">options</code> prop syntax.</p>

<p>If Intl is not available, <code class="language-plaintext highlighter-rouge">&lt;NumberField&gt;</code> outputs numbers as is (and ignores the <code class="language-plaintext highlighter-rouge">locales</code> and <code class="language-plaintext highlighter-rouge">options</code> props).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"score"</span> <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">maximumFractionDigits</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span><span class="si">}</span><span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, score: 567.3567458569 } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>567.35<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"share"</span> <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">style</span><span class="p">:</span> <span class="dl">'</span><span class="s1">percent</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, share: 0.2545 } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>25%<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">style</span><span class="p">:</span> <span class="dl">'</span><span class="s1">currency</span><span class="dl">'</span><span class="p">,</span> <span class="na">currency</span><span class="p">:</span> <span class="dl">'</span><span class="s1">USD</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, price: 25.99 } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>$25.99<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="na">locales</span><span class="p">=</span><span class="s">"fr-FR"</span> <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">style</span><span class="p">:</span> <span class="dl">'</span><span class="s1">currency</span><span class="dl">'</span><span class="p">,</span> <span class="na">currency</span><span class="p">:</span> <span class="dl">'</span><span class="s1">USD</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="c1">// renders the record { id: 1234, price: 25.99 } as</span>
<span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>25,99 $US<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you need more formatting options than what <code class="language-plaintext highlighter-rouge">Intl.NumberFormat</code> can provide, build your own field component leveraging a third-party library like <a href="http://numeraljs.com/">numeral.js</a>.</p>

<p><strong>Tip</strong>: When used in a <code class="language-plaintext highlighter-rouge">Show</code> view, the right alignment may look weird. Disable it by setting the <code class="language-plaintext highlighter-rouge">textAlign</code> attribute to “left”:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"score"</span> <span class="na">textAlign</span><span class="p">=</span><span class="s">"left"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="richtextfield"><code class="language-plaintext highlighter-rouge">&lt;RichTextField&gt;</code></h3>

<p>This component displays some HTML content. The content is “rich” (i.e. unescaped) by default.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">RichTextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><img src="./img/rich-text-field.png" alt="RichTextField" /></p>

<h4 id="properties-6">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">stripTags</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
      <td><code class="language-plaintext highlighter-rouge">false</code></td>
      <td>If <code class="language-plaintext highlighter-rouge">true</code>, remove all HTML tags and render text only</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;RichTextField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="usage-6">Usage</h4>

<p>The <code class="language-plaintext highlighter-rouge">stripTags</code> prop allows to remove all HTML markup, preventing some display glitches (which is especially useful in list views, or when truncating the content).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">RichTextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="na">stripTags</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="textfield"><code class="language-plaintext highlighter-rouge">&lt;TextField&gt;</code></h3>

<p>The simplest of all fields, <code class="language-plaintext highlighter-rouge">&lt;TextField&gt;</code> simply displays the record property as plain text.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Author Name"</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you want to display data from more than one field, check out <a href="#functionfield">the <code class="language-plaintext highlighter-rouge">&lt;FunctionField&gt;</code></a>, which accepts a <code class="language-plaintext highlighter-rouge">render</code> function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FunctionField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">FunctionField</span>
    <span class="na">label</span><span class="p">=</span><span class="s">"Name"</span>
    <span class="na">render</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">first_name</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">last_name</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
<span class="p">/&gt;;</span>
</code></pre></div></div>

<h3 id="urlfield"><code class="language-plaintext highlighter-rouge">&lt;UrlField&gt;</code></h3>

<p><code class="language-plaintext highlighter-rouge">&lt;UrlField&gt;</code> displays a url in a Material UI’s <code class="language-plaintext highlighter-rouge">&lt;Link href="" /&gt;</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UrlField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">UrlField</span> <span class="na">source</span><span class="p">=</span><span class="s">"site_url"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="choice-fields">Choice Fields</h2>

<h3 id="selectfield"><code class="language-plaintext highlighter-rouge">&lt;SelectField&gt;</code></h3>

<p>When you need to display an enumerated field, <code class="language-plaintext highlighter-rouge">&lt;SelectField&gt;</code> maps the value to a string.</p>

<p>For instance, if the <code class="language-plaintext highlighter-rouge">gender</code> field can take values “M” and “F”, here is how to display it as either “Male” or “Female”:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SelectField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">SelectField</span> <span class="na">source</span><span class="p">=</span><span class="s">"gender"</span> <span class="na">choices</span><span class="p">=</span><span class="si">{</span><span class="p">[</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">M</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Male</span><span class="dl">'</span> <span class="p">},</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">F</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Female</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">]</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h4 id="properties-7">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">choices</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">Object[]</code></td>
      <td>-</td>
      <td>List of items to show as options</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">optionText</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string | Function | Element</code></td>
      <td>‘name’</td>
      <td>Name of the field to use to display the matching choice, or function returning that field name, or a React element to render for that choice</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">optionValue</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>‘id’</td>
      <td>Name of the field to compare to the value to find the matching choice</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">translateChoice</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">boolean</code></td>
      <td><code class="language-plaintext highlighter-rouge">true</code></td>
      <td>Whether or not the choice text should be translated</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;SelectField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="usage-7">Usage</h4>

<p>By default, the option is built by:</p>

<ul>
  <li>finding a choice where the <code class="language-plaintext highlighter-rouge">id</code> property equals the field value</li>
  <li>using the <code class="language-plaintext highlighter-rouge">name</code> property as the option text</li>
</ul>

<p>You can also customize the properties to use for the lookup value and text, thanks to the <code class="language-plaintext highlighter-rouge">optionValue</code> and <code class="language-plaintext highlighter-rouge">optionText</code> attributes.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">choices</span> <span class="o">=</span> <span class="p">[</span>
   <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="na">full_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Leo Tolstoi</span><span class="dl">'</span><span class="p">,</span> <span class="na">sex</span><span class="p">:</span> <span class="dl">'</span><span class="s1">M</span><span class="dl">'</span> <span class="p">},</span>
   <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">456</span><span class="p">,</span> <span class="na">full_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane Austen</span><span class="dl">'</span><span class="p">,</span> <span class="na">sex</span><span class="p">:</span> <span class="dl">'</span><span class="s1">F</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">];</span>
<span class="p">&lt;</span><span class="nc">SelectField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author_id"</span> <span class="na">choices</span><span class="p">=</span><span class="si">{</span><span class="nx">choices</span><span class="si">}</span> <span class="na">optionText</span><span class="p">=</span><span class="s">"full_name"</span> <span class="na">optionValue</span><span class="p">=</span><span class="s">"_id"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">optionText</code> also accepts a function, so you can shape the option text at will:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">choices</span> <span class="o">=</span> <span class="p">[</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="na">first_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Leo</span><span class="dl">'</span><span class="p">,</span> <span class="na">last_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tolstoi</span><span class="dl">'</span> <span class="p">},</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">456</span><span class="p">,</span> <span class="na">first_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane</span><span class="dl">'</span><span class="p">,</span> <span class="na">last_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Austen</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">optionRenderer</span> <span class="o">=</span> <span class="nx">choice</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">choice</span><span class="p">.</span><span class="nx">first_name</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">choice</span><span class="p">.</span><span class="nx">last_name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">&lt;</span><span class="nc">SelectField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author_id"</span> <span class="na">choices</span><span class="p">=</span><span class="si">{</span><span class="nx">choices</span><span class="si">}</span> <span class="na">optionText</span><span class="p">=</span><span class="si">{</span><span class="nx">optionRenderer</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">optionText</code> also accepts a React Element, that will be cloned and receive the related choice as the <code class="language-plaintext highlighter-rouge">record</code> prop. You can use Field components there.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">choices</span> <span class="o">=</span> <span class="p">[</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="na">first_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Leo</span><span class="dl">'</span><span class="p">,</span> <span class="na">last_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tolstoi</span><span class="dl">'</span> <span class="p">},</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">456</span><span class="p">,</span> <span class="na">first_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Jane</span><span class="dl">'</span><span class="p">,</span> <span class="na">last_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Austen</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">];</span>
<span class="kd">const</span> <span class="nx">FullNameField</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Chip</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">first_name</span><span class="si">}</span> <span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">last_name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Chip</span><span class="p">&gt;;</span>
<span class="p">&lt;</span><span class="nc">SelectField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author_id"</span> <span class="na">choices</span><span class="p">=</span><span class="si">{</span><span class="nx">choices</span><span class="si">}</span> <span class="na">optionText</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">FullNameField</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">/&gt;</span>
</code></pre></div></div>

<p>The current choice is translated by default, so you can use translation identifiers as choices:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">choices</span> <span class="o">=</span> <span class="p">[</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">M</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">myroot.gender.male</span><span class="dl">'</span> <span class="p">},</span>
   <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">F</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">myroot.gender.female</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">];</span>
</code></pre></div></div>

<p>However, in some cases (e.g. inside a <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code>), you may not want the choice to be translated. In that case, set the <code class="language-plaintext highlighter-rouge">translateChoice</code> prop to <code class="language-plaintext highlighter-rouge">false</code>.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SelectField</span> <span class="na">source</span><span class="p">=</span><span class="s">"gender"</span> <span class="na">choices</span><span class="p">=</span><span class="si">{</span><span class="nx">choices</span><span class="si">}</span> <span class="na">translateChoice</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span><span class="p">/&gt;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: <code class="language-plaintext highlighter-rouge">&lt;SelectField&gt;</code> sets <code class="language-plaintext highlighter-rouge">translateChoice</code> to <code class="language-plaintext highlighter-rouge">true</code> by default.</p>

<h2 id="array-fields">Array Fields</h2>

<h3 id="arrayfield"><code class="language-plaintext highlighter-rouge">&lt;ArrayField&gt;</code></h3>

<p>Display a collection using <code class="language-plaintext highlighter-rouge">&lt;Field&gt;</code> child components.</p>

<p>Ideal for embedded arrays of objects, e.g. <code class="language-plaintext highlighter-rouge">tags</code> and <code class="language-plaintext highlighter-rouge">backlinks</code> in the following <code class="language-plaintext highlighter-rouge">post</code> object:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
  <span class="nx">tags</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span> <span class="p">}</span>
  <span class="p">],</span>
  <span class="nx">backlinks</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="na">uuid</span><span class="p">:</span> <span class="dl">'</span><span class="s1">34fdf393-f449-4b04-a423-38ad02ae159e</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2012-08-10T00:00:00.000Z</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://example.com/foo/bar.html</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="na">uuid</span><span class="p">:</span> <span class="dl">'</span><span class="s1">d907743a-253d-4ec1-8329-404d4c5e6cf1</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2012-08-14T00:00:00.000Z</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://blog.johndoe.com/2012/08/12/foobar.html</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">}</span>
   <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The child must be an iterator component (like <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;SingleFieldList&gt;</code>).</p>

<p>Here is how to display all the backlinks of the current post as a <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ArrayField</span> <span class="na">source</span><span class="p">=</span><span class="s">"backlinks"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"date"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">UrlField</span> <span class="na">source</span><span class="p">=</span><span class="s">"url"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">ArrayField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>And here is how to display all the tags of the current post as <code class="language-plaintext highlighter-rouge">&lt;Chip&gt;</code> components:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ArrayField</span> <span class="na">source</span><span class="p">=</span><span class="s">"tags"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">ArrayField</span><span class="p">&gt;</span>
</code></pre></div></div>

<h4 id="properties-8">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fieldKey</code></td>
      <td>Optional</td>
      <td>string</td>
      <td>-</td>
      <td>Name for the field to be used as key when displaying children</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;ArrayField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>, except <code class="language-plaintext highlighter-rouge">emptyText</code> (use the child <code class="language-plaintext highlighter-rouge">empty</code> prop instead).</p>

<h4 id="usage-8">Usage</h4>

<p>If the array value contains a lot of items, you may experience slowdowns in the UI. In such cases, set the <code class="language-plaintext highlighter-rouge">fieldKey</code> prop to use one field as key, and reduce CPU and memory usage:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-&lt;ArrayField source="backlinks"&gt;
</span><span class="gi">+&lt;ArrayField source="backlinks" fieldKey="uuid"&gt;
</span>    &lt;Datagrid&gt;
        &lt;DateField source="date" /&gt;
        &lt;UrlField source="url" /&gt;
    &lt;/Datagrid&gt;
<span class="gd">&lt;/ArrayField&gt;
</span></code></pre></div></div>

<p><strong>Tip</strong>: If you need to render a custom collection, it’s often simpler to write your own component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">TagsField</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">))</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">)</span>
<span class="nx">TagsField</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">addLabel</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="reference-fields">Reference Fields</h2>

<h3 id="referencefield"><code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code></h3>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> is useful for displaying many-to-one and one-to-one relationships. This component fetches a referenced record (using the <code class="language-plaintext highlighter-rouge">dataProvider.getMany()</code> method), and passes it to its child. A <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> displays nothing on its own, it just fetches the data and expects its child to render it. Usual child components for <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> are other <code class="language-plaintext highlighter-rouge">&lt;Field&gt;</code> components.</p>

<p>For instance, if a <code class="language-plaintext highlighter-rouge">post</code> has one author from the <code class="language-plaintext highlighter-rouge">users</code> resource, referenced by a <code class="language-plaintext highlighter-rouge">user_id</code> field, here is how to fetch the <code class="language-plaintext highlighter-rouge">user</code> related to each <code class="language-plaintext highlighter-rouge">post</code> record in a list, and display the <code class="language-plaintext highlighter-rouge">name</code> for each:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">ReferenceField</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">EditButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"user_id"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>With this configuration, <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> wraps the user’s name in a link to the related user <code class="language-plaintext highlighter-rouge">&lt;Edit&gt;</code> page.</p>

<p><img src="./img/reference-field.png" alt="ReferenceField" /></p>

<h4 id="properties-9">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">reference</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>The name of the resource for the referenced records, e.g. ‘posts’</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">children</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">Element</code></td>
      <td>-</td>
      <td>The Field element used to render the referenced record</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">link</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string | Function</code></td>
      <td><code class="language-plaintext highlighter-rouge">edit</code></td>
      <td>Target of the link wrapping the rendered child. Set to <code class="language-plaintext highlighter-rouge">false</code> to disable the link.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sortBy</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string | Function</code></td>
      <td><code class="language-plaintext highlighter-rouge">source</code></td>
      <td>Name of the field to use for sorting when the user clicks on the column header.</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>.</p>

<h4 id="css-api-4">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">link</code></td>
      <td>Applied to each child element</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaReferenceField</code> key.</p>

<h4 id="usage-9">Usage</h4>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> accepts a <code class="language-plaintext highlighter-rouge">reference</code> attribute, which specifies the resource to fetch for the related record.</p>

<p><strong>Note</strong>: You <strong>must</strong> add a <code class="language-plaintext highlighter-rouge">&lt;Resource&gt;</code> for the reference resource - react-admin needs it to fetch the reference data. You <em>can</em> omit the <code class="language-plaintext highlighter-rouge">list</code> prop in this reference if you want to hide it in the sidebar menu.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">myDataProvider</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">PostList</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"users"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>To change the link from the <code class="language-plaintext highlighter-rouge">&lt;Edit&gt;</code> page to the <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> page, set the <code class="language-plaintext highlighter-rouge">link</code> prop to “show”.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"user_id"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span> <span class="na">link</span><span class="p">=</span><span class="s">"show"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>By default, <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> is sorted by its <code class="language-plaintext highlighter-rouge">source</code>. To specify another attribute to sort by, set the <code class="language-plaintext highlighter-rouge">sortBy</code> prop to the according attribute’s name.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"user_id"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span> <span class="na">sortBy</span><span class="p">=</span><span class="s">"user.name"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>You can also prevent <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code> from adding a link to children by setting <code class="language-plaintext highlighter-rouge">link</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// No link</span>
<span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"user_id"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span> <span class="na">link</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>You can also use a custom <code class="language-plaintext highlighter-rouge">link</code> function to get a custom path for the children. This function must accept <code class="language-plaintext highlighter-rouge">record</code> and <code class="language-plaintext highlighter-rouge">reference</code> as arguments.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Custom path</span>
<span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"user_id"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span> <span class="na">link</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">record</span><span class="p">,</span> <span class="nx">reference</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`/my/path/to/</span><span class="p">${</span><span class="nx">reference</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: React-admin accumulates and deduplicates the ids of the referenced records to make <em>one</em> <code class="language-plaintext highlighter-rouge">dataProvider.getMany()</code> call for the entire list, instead of n <code class="language-plaintext highlighter-rouge">dataProvider.getOne()</code> calls. So for instance, if the API returns the following list of posts:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
    <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Totally agree</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">user_id</span><span class="p">:</span> <span class="mi">789</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">124</span><span class="p">,</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">You are right my friend</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">user_id</span><span class="p">:</span> <span class="mi">789</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">125</span><span class="p">,</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Not sure about this one</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">user_id</span><span class="p">:</span> <span class="mi">735</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Then react-admin renders the <code class="language-plaintext highlighter-rouge">&lt;PostList&gt;</code> with a loader for the <code class="language-plaintext highlighter-rouge">&lt;ReferenceField&gt;</code>, fetches the API for the related users in one call (<code class="language-plaintext highlighter-rouge">GET http://path.to.my.api/users?ids=[789,735]</code>), and re-renders the list once the data arrives. This accelerates the rendering and minimizes network load.</p>

<h3 id="referencemanyfield"><code class="language-plaintext highlighter-rouge">&lt;ReferenceManyField&gt;</code></h3>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceManyField&gt;</code> is useful for displaying one-to-many relationships, when the foreign key is carried by the referenced resource. For instance, if a <code class="language-plaintext highlighter-rouge">user</code> has many <code class="language-plaintext highlighter-rouge">books</code> and the <code class="language-plaintext highlighter-rouge">books</code> resource exposes a <code class="language-plaintext highlighter-rouge">user_id</code> field, <code class="language-plaintext highlighter-rouge">&lt;ReferenceManyField&gt;</code> can fetch all the books authored by a given user.</p>

<p>This component fetches a list of referenced records by a reverse lookup of the current <code class="language-plaintext highlighter-rouge">record.id</code> in the <code class="language-plaintext highlighter-rouge">target</code> field of another resource (using the <code class="language-plaintext highlighter-rouge">dataProvider.getManyReference()</code> REST method), and passes them to its child. The child must be an iterator component (like <code class="language-plaintext highlighter-rouge">&lt;SingleFieldList&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code>), which usually has one or more child <code class="language-plaintext highlighter-rouge">&lt;Field&gt;</code> components.</p>

<p>For instance, here is how to show the authors of the comments related to each post in a list by matching <code class="language-plaintext highlighter-rouge">post.id</code> to <code class="language-plaintext highlighter-rouge">comment.post_id</code>. We’re using <code class="language-plaintext highlighter-rouge">&lt;SingleFieldList&gt;</code> to display an inline list using only one field for each of the referenced record:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">ChipField</span><span class="p">,</span> <span class="nx">ReferenceManyField</span><span class="p">,</span> <span class="nx">SingleFieldList</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="na">type</span><span class="p">=</span><span class="s">"email"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Comments by"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author.name"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><img src="./img/reference-many-field-single-field-list.png" alt="ReferenceManyFieldSingleFieldList" /></p>

<h4 id="properties-10">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">children</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">Element</code></td>
      <td>-</td>
      <td>The Iterator element used to render the referenced records</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">reference</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>The name of the resource for the referenced records, e.g. ‘books’</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">target</code></td>
      <td>Required</td>
      <td>string</td>
      <td>-</td>
      <td>Target field carrying the relationship on the referenced resource, e.g. ‘user_id’</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">filter</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code></td>
      <td>-</td>
      <td>Filters to use when fetching the related records, passed to <code class="language-plaintext highlighter-rouge">getManyReference()</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pagination</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">Element</code></td>
      <td>-</td>
      <td>Pagination element to display pagination controls. empty by default (no pagination)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">perPage</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">number</code></td>
      <td>25</td>
      <td>Maximum number of referenced records to fetch</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sort</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">{ field, order }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ field: 'id', order: 'DESC' }</code></td>
      <td>Sort order to use when fetching the related records, passed to <code class="language-plaintext highlighter-rouge">getManyReference()</code></td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceManyField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>, except <code class="language-plaintext highlighter-rouge">emptyText</code> (use the child <code class="language-plaintext highlighter-rouge">empty</code> prop instead).</p>

<h4 id="usage-10">Usage</h4>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceManyField&gt;</code> accepts a <code class="language-plaintext highlighter-rouge">reference</code> attribute, which specifies the resource to fetch for the related record. It also accepts a <code class="language-plaintext highlighter-rouge">source</code> attribute which defines the field containing the value to look for in the <code class="language-plaintext highlighter-rouge">target</code> field of the referenced resource. By default, this is the <code class="language-plaintext highlighter-rouge">id</code> of the resource (<code class="language-plaintext highlighter-rouge">post.id</code> in the previous example).</p>

<p><strong>Note</strong>: You <strong>must</strong> add a <code class="language-plaintext highlighter-rouge">&lt;Resource&gt;</code> for the reference resource - react-admin needs it to fetch the reference data. You <em>can</em> omit the <code class="language-plaintext highlighter-rouge">list</code> prop in this reference if you want to hide it in the sidebar menu.</p>

<p>You can use a <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code> instead of a <code class="language-plaintext highlighter-rouge">&lt;SingleFieldList&gt;</code> - but not inside another <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code>! This is useful if you want to display a read-only list of related records. For instance, if you want to show the <code class="language-plaintext highlighter-rouge">comments</code> related to a <code class="language-plaintext highlighter-rouge">post</code> in the post’s <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> view:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ReferenceManyField</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">DateField</span><span class="p">,</span> <span class="nx">EditButton</span><span class="p">,</span> <span class="nx">Show</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-admin</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"teaser"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">ReferenceManyField</span>
        <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span>
        <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span>
        <span class="na">label</span><span class="p">=</span><span class="s">"Comments"</span>
      <span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"created_at"</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"author.name"</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"published_at"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><img src="./img/reference-many-field-datagrid.png" alt="ReferenceManyFieldDatagrid" /></p>

<p>By default, react-admin restricts the possible values to 25 and displays no pagination control. You can change the limit by setting the <code class="language-plaintext highlighter-rouge">perPage</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">perPage</span><span class="p">=</span><span class="si">{</span><span class="mi">10</span><span class="si">}</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span><span class="p">&gt;</span>
   ...
<span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>And if you want to allow users to paginate the list, pass a <code class="language-plaintext highlighter-rouge">&lt;Pagination&gt;</code> element as the <code class="language-plaintext highlighter-rouge">pagination</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Pagination</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">pagination</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">Pagination</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span><span class="p">&gt;</span>
   ...
<span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>By default, it orders the possible values by id desc. You can change this order by setting the <code class="language-plaintext highlighter-rouge">sort</code> prop (an object with <code class="language-plaintext highlighter-rouge">field</code> and <code class="language-plaintext highlighter-rouge">order</code> properties).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">sort</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">created_at</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DESC</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span><span class="p">&gt;</span>
   ...
<span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Also, you can filter the query used to populate the possible values. Use the <code class="language-plaintext highlighter-rouge">filter</code> prop for that.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">filter</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">is_published</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span><span class="si">}</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span><span class="p">&gt;</span>
   ...
<span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
</code></pre></div></div>

<h3 id="referencemanytomanyfield"><code class="language-plaintext highlighter-rouge">&lt;ReferenceManyToManyField&gt;</code></h3>

<p>This <a href="https://marmelab.com/ra-enterprise">Enterprise Edition</a><img class="icon" src="./img/premium.svg" /> component fetches a list of referenced records by lookup in an associative table, and passes the records down to its child component, which must be an iterator component.</p>

<p>For instance, here is how to fetch the authors related to a book record by matching book.id to book_authors.post_id, then matching book_authors.author_id to authors.id, and then display the author last_name for each, in a <code class="language-plaintext highlighter-rouge">&lt;ChipField&gt;</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> 
    <span class="nx">Show</span><span class="p">,</span>
    <span class="nx">SimpleShowLayout</span><span class="p">,</span>
    <span class="nx">TextField</span><span class="p">,</span>
    <span class="nx">DateField</span><span class="p">,</span>
    <span class="nx">SingleFieldList</span><span class="p">,</span>
    <span class="nx">ChipField</span><span class="p">,</span>
    <span class="nx">EditButton</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ReferenceManyToManyField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-admin/ra-many-to-many</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BookShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"publication_date"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">ReferenceManyToManyField</span> 
                <span class="na">reference</span><span class="p">=</span><span class="s">"authors"</span>
                <span class="na">through</span><span class="p">=</span><span class="s">"book_authors"</span>
                <span class="na">using</span><span class="p">=</span><span class="s">"book_id,author_id"</span>
            <span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"last_name"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ReferenceManyToManyField</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This example uses the following schema:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌──────────────────┐       ┌──────────────┐      ┌───────────────┐
│ books            │       │ book_authors │      │ authors       │
│------------------│       │--------------│      │---------------│
│ id               │───┐   │ id           │      │ id            │
│ title            │   └──╼│ book_id      │   ┌──│ first_name    │
│ body             │       │ author_id    │╾──┘  │ last_name     │
│ publication_date │       │ is_public    │      │ date_of_birth │
└──────────────────┘       └──────────────┘      └───────────────┘
</code></pre></div></div>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-relationships">the <code class="language-plaintext highlighter-rouge">ra-relationships</code> documentation</a> for more details.</p>

<h3 id="referencearrayfield"><code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code></h3>

<p>Use <code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> to display a one-to-many relationship based on an array of foreign keys. This component fetches a list of referenced records (using the <code class="language-plaintext highlighter-rouge">dataProvider.getMany()</code> method), and passes them to its child. A <code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> displays nothing on its own, it just fetches the data and expects its child to render it.</p>

<p>For instance, if each post contains a list of tag ids (e.g. <code class="language-plaintext highlighter-rouge">{ id: 1234, title: 'Lorem Ipsum', tag_ids: [1, 23, 4] }</code>), here is how to fetch the list of tags for each post in a list, and display the <code class="language-plaintext highlighter-rouge">name</code> for each <code class="language-plaintext highlighter-rouge">tag</code> in a <code class="language-plaintext highlighter-rouge">&lt;ChipField&gt;</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">ChipField</span><span class="p">,</span> <span class="nx">ReferenceArrayField</span><span class="p">,</span> <span class="nx">SingleFieldList</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">ReferenceArrayField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Tags"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"tags"</span> <span class="na">source</span><span class="p">=</span><span class="s">"tag_ids"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ReferenceArrayField</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><img src="./img/reference-array-field.png" alt="ReferenceArrayField" /></p>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> fetches the <code class="language-plaintext highlighter-rouge">tag</code> resources related to each <code class="language-plaintext highlighter-rouge">post</code> resource by matching <code class="language-plaintext highlighter-rouge">post.tag_ids</code> to <code class="language-plaintext highlighter-rouge">tag.id</code>. Once it receives the related resources, <code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> passes them to its child component using the <code class="language-plaintext highlighter-rouge">ids</code> and <code class="language-plaintext highlighter-rouge">data</code> props, so the child must be an iterator component (like <code class="language-plaintext highlighter-rouge">&lt;SingleFieldList&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code>). The iterator component usually has one or more child <code class="language-plaintext highlighter-rouge">&lt;Field&gt;</code> components.</p>

<h4 id="properties-11">Properties</h4>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">reference</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td>-</td>
      <td>The name of the resource for the referenced records, e.g. ‘tags’</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">children</code></td>
      <td>Required</td>
      <td><code class="language-plaintext highlighter-rouge">Element</code></td>
      <td>-</td>
      <td>The Field element used to render the referenced records</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sortBy</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string | Function</code></td>
      <td><code class="language-plaintext highlighter-rouge">source</code></td>
      <td>When used in a <code class="language-plaintext highlighter-rouge">List</code>, name of the field to use for sorting when the user clicks on the column header.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">filter</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">Object</code></td>
      <td>-</td>
      <td>Filters to use when fetching the related records (the filtering is done client-side)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pagination</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">Element</code></td>
      <td>-</td>
      <td>Pagination element to display pagination controls. empty by default (no pagination)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">perPage</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">number</code></td>
      <td>1000</td>
      <td>Maximum number of results to display</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sort</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">{ field, order }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ field: 'id', order: 'DESC' }</code></td>
      <td>Sort order to use when displaying the related records (the sort is done client-side)</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> also accepts the <a href="./Fields.md#common-field-props">common field props</a>, except <code class="language-plaintext highlighter-rouge">emptyText</code> (use the child <code class="language-plaintext highlighter-rouge">empty</code> prop instead).</p>

<h4 id="css-api-5">CSS API</h4>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">progress</code></td>
      <td>Applied to the Material UI’s <code class="language-plaintext highlighter-rouge">LinearProgress</code> component while <code class="language-plaintext highlighter-rouge">loaded</code> prop is <code class="language-plaintext highlighter-rouge">false</code></td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaReferenceArrayField</code> key.</p>

<h4 id="usage-11">Usage</h4>

<p><code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> expects a <code class="language-plaintext highlighter-rouge">reference</code> attribute, which specifies the resource to fetch for the related records. It also expects a <code class="language-plaintext highlighter-rouge">source</code> attribute, which defines the field containing the list of ids to look for in the referenced resource.</p>

<p><strong>Note</strong>: You <strong>must</strong> add a <code class="language-plaintext highlighter-rouge">&lt;Resource&gt;</code> component for the reference resource to your <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component, because react-admin needs it to fetch the reference data. You can omit the <code class="language-plaintext highlighter-rouge">list</code> prop in this Resource if you don’t want to show an entry for it in the sidebar menu.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">restProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">PostList</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"tags"</span> <span class="p">/&gt;</span> <span class="si">{</span><span class="cm">/* &lt;= this one is compulsory */</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>In an Edit of Show view, you can combine <code class="language-plaintext highlighter-rouge">&lt;ReferenceArrayField&gt;</code> with <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code> to display related resources in a table. For instance, to display more details about the tags related to a post in the <code class="language-plaintext highlighter-rouge">PostShow</code> view:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Show</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">ReferenceArrayField</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">ShowButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">ReferenceArrayField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Tags"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"tags"</span> <span class="na">source</span><span class="p">=</span><span class="s">"tag_ids"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ShowButton</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ReferenceArrayField</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="translatable-fields">Translatable Fields</h2>

<p>You may have fields which are translated in multiple languages and want users to verify each translation. To display them, you can use the <code class="language-plaintext highlighter-rouge">&lt;TranslatableFields&gt;</code> component, which expects the translatable values to have the following structure:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">en</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The english value</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">fr</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The french value</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">tlh</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The klingon value</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="nx">description</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">en</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The english value</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">fr</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The french value</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">tlh</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The klingon value</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is how to use it:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">TranslatableFields</span> <span class="na">locales</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">]</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"description"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">TranslatableFields</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>React-admin uses the user locale as the default locale in this field. You can override this setting using the <code class="language-plaintext highlighter-rouge">defaultLocale</code> prop.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">TranslatableFields</span> <span class="na">locales</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">]</span><span class="si">}</span> <span class="na">defaultLocale</span><span class="p">=</span><span class="s">"fr"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"description"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">TranslatableFields</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>By default, <code class="language-plaintext highlighter-rouge">&lt;TranslatableFields&gt;</code> will allow users to select the displayed locale using Material-ui tabs with the locale code as their labels.</p>

<p>You may override the tabs labels using translation keys following this format: <code class="language-plaintext highlighter-rouge">ra.locales.[locale_code]</code>. For instance, <code class="language-plaintext highlighter-rouge">ra.locales.en</code> or <code class="language-plaintext highlighter-rouge">ra.locales.fr</code>.</p>

<p>You may override the language selector using the <code class="language-plaintext highlighter-rouge">selector</code> prop, which accepts a React element:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Selector</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span>
        <span class="nx">locales</span><span class="p">,</span>
        <span class="nx">selectLocale</span><span class="p">,</span>
        <span class="nx">selectedLocale</span><span class="p">,</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">useTranslatableContext</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">handleChange</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">selectLocale</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">select</span>
            <span class="na">aria</span><span class="err">-</span><span class="na">label</span><span class="p">=</span><span class="s">"Select the locale"</span>
            <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="si">}</span>
            <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">selectedLocale</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">locales</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">locale</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">option</span>
                    <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">locale</span><span class="si">}</span>
                    <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">locale</span><span class="si">}</span>
                    <span class="c1">// This allows to correctly link the containers for each locale to their labels</span>
                    <span class="na">id</span><span class="p">=</span><span class="si">{</span><span class="s2">`translatable-header-</span><span class="p">${</span><span class="nx">locale</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
                <span class="p">&gt;</span>
                    <span class="si">{</span><span class="nx">locale</span><span class="si">}</span>
                <span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
            <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="p">&lt;</span><span class="nc">TranslatableFields</span>
    <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span><span class="si">}</span>
    <span class="na">resource</span><span class="p">=</span><span class="s">"products"</span>
    <span class="na">basePath</span><span class="p">=</span><span class="s">"/products"</span>
    <span class="na">locales</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">]</span><span class="si">}</span>
    <span class="na">selector</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">Selector</span> <span class="p">/&gt;</span><span class="si">}</span>
<span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"description"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">TranslatableFields</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>If you have multiple <code class="language-plaintext highlighter-rouge">TranslatableFields</code> on the same page, you should specify a <code class="language-plaintext highlighter-rouge">groupKey</code> so that react-admin can create unique identifiers for accessibility.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">TranslatableFields</span> <span class="na">locales</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">]</span><span class="si">}</span> <span class="na">groupKey</span><span class="p">=</span><span class="s">"essential-fields"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"description"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">TranslatableFields</span><span class="p">&gt;</span>
</code></pre></div></div>

<h3 id="using-translatable-fields-in-list-or-show-views">Using Translatable Fields In List or Show views</h3>

<p>The <code class="language-plaintext highlighter-rouge">TranslatableFields</code> component is not meant to be used inside a <code class="language-plaintext highlighter-rouge">List</code> as you probably don’t want to have tabs inside multiple lines. The simple solution to display a translatable value would be to specify its source like this: <code class="language-plaintext highlighter-rouge">name.en</code>. However, you may want to display its translation for the current admin locale.</p>

<p>In this case, you’ll have to get the current locale through the <code class="language-plaintext highlighter-rouge">useLocale</code> hook and set the translatable field <code class="language-plaintext highlighter-rouge">source</code> dynamically.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">locale</span> <span class="o">=</span> <span class="nx">useLocale</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="si">{</span><span class="s2">`name.</span><span class="p">${</span><span class="nx">locale</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">ReferenceArrayField</span>
                    <span class="na">label</span><span class="p">=</span><span class="s">"Tags"</span>
                    <span class="na">reference</span><span class="p">=</span><span class="s">"tags"</span>
                    <span class="na">source</span><span class="p">=</span><span class="s">"tags"</span>
                    <span class="na">sortBy</span><span class="p">=</span><span class="s">"tags.name"</span>
                    <span class="na">sort</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="s2">`name.</span><span class="p">${</span><span class="nx">locale</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span>
                <span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">ChipField</span> <span class="na">source</span><span class="p">=</span><span class="si">{</span><span class="s2">`name.</span><span class="p">${</span><span class="nx">locale</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span> <span class="na">size</span><span class="p">=</span><span class="s">"small"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">SingleFieldList</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nc">ReferenceArrayField</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note that you can’t have an <a href="https://marmelab.com/react-admin/List.html#performance">optimized</a> Datagrid when doing so, as changing the locale wouldn’t trigger a render of its children.</p>

<p>The same pattern applies to show views when you don’t want to display all translations: get the locale from the <code class="language-plaintext highlighter-rouge">useLocale</code> hook and dynamically set the <code class="language-plaintext highlighter-rouge">source</code> prop of the translatable fields.</p>

<h2 id="recipes">Recipes</h2>

<h3 id="styling-fields">Styling Fields</h3>

<p>All field components accept a <code class="language-plaintext highlighter-rouge">className</code> prop, allowing you to customize their style to your liking. We advise you to use the Material UI styling solution, JSS, to generate those classes. See their <a href="https://material-ui.com/customization/css-in-js/#api">documentation</a> about that.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">price</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">purple</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">PriceField</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">price</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">PriceField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="c1">// renders in the Datagrid as</span>
<span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="p">=</span><span class="s">"[class name generated by JSS]"</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>React-admin usually delegates the rendering of field components to material-ui components. Refer to the material-ui documentation to see the default styles for elements.</p>

<p>You may want to customize the cell style inside a <code class="language-plaintext highlighter-rouge">Datagrid</code>. You can use the <code class="language-plaintext highlighter-rouge">cellClassName</code> for that:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">priceCell</span><span class="p">:</span> <span class="p">{</span> <span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bold</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">PriceField</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">cellClassName</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">priceCell</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">PriceField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="c1">// renders in the Datagrid as</span>
<span class="p">&lt;</span><span class="nt">td</span> <span class="na">class</span><span class="p">=</span><span class="s">"[class name generated by JSS]"</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>You may want to override the field header (the <code class="language-plaintext highlighter-rouge">&lt;th&gt;</code> element in the <code class="language-plaintext highlighter-rouge">Datagrid</code>). In that case, use the <code class="language-plaintext highlighter-rouge">headerClassName</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">priceHeader</span><span class="p">:</span> <span class="p">{</span> <span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bold</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">PriceField</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">headerClassName</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">priceHeader</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">PriceField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
<span class="c1">// renders in the table header as</span>
<span class="p">&lt;</span><span class="nt">th</span> <span class="na">class</span><span class="p">=</span><span class="s">"[class name generated by JSS]"</span><span class="p">&gt;&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Price<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>Finally, sometimes, you just want to right align the text of a cell. Use the <code class="language-plaintext highlighter-rouge">textAlign</code> prop, which accepts either <code class="language-plaintext highlighter-rouge">left</code> or <code class="language-plaintext highlighter-rouge">right</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PriceField</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">);</span>

<span class="nx">PriceField</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">textAlign</span><span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="writing-your-own-field-component">Writing Your Own Field Component</h2>

<p>If you don’t find what you need in the list above, you can write your own Field component. It must be a regular React component, accepting a <code class="language-plaintext highlighter-rouge">source</code> attribute and retrieving the <code class="language-plaintext highlighter-rouge">record</code> from the <code class="language-plaintext highlighter-rouge">RecordContext</code> with the <code class="language-plaintext highlighter-rouge">useRecordContext</code> hook. React-admin will set the <code class="language-plaintext highlighter-rouge">record</code> in this context based on the API response data at render time. The field component only needs to find the <code class="language-plaintext highlighter-rouge">source</code> in the <code class="language-plaintext highlighter-rouge">record</code> and display it.</p>

<p>For instance, here is an equivalent of react-admin’s <code class="language-plaintext highlighter-rouge">&lt;TextField&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRecordContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TextField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">source</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">record</span><span class="p">[</span><span class="nx">source</span><span class="p">]</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;;</span>
<span class="p">}</span>

<span class="nx">TextField</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">label</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
    <span class="na">record</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
    <span class="na">source</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TextField</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: The <code class="language-plaintext highlighter-rouge">label</code> attribute isn’t used in the <code class="language-plaintext highlighter-rouge">render()</code> method, but react-admin uses it to display the table header.</p>

<p><strong>Tip</strong>: If you want to support deep field sources (e.g. source values like <code class="language-plaintext highlighter-rouge">author.name</code>), use <a href="https://www.npmjs.com/package/lodash.get">lodash/get</a> to replace the simple object lookup:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="kd">get</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash/get</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRecordContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TextField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">source</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="kd">get</span><span class="p">(</span><span class="nx">record</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you are not looking for reusability, you can create even simpler components, with no attributes. Let’s say an API returns user records with <code class="language-plaintext highlighter-rouge">firstName</code> and <code class="language-plaintext highlighter-rouge">lastName</code> properties, and that you want to display a full name in a user list.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="nx">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Doe</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The component will be:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">useRecordContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">FullNameField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span> <span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;;</span>
<span class="p">}</span>

<span class="nx">FullNameField</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">label</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Name</span><span class="dl">'</span> <span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">UserList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">FullNameField</span> <span class="na">source</span><span class="p">=</span><span class="s">"lastName"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: In such custom fields, the <code class="language-plaintext highlighter-rouge">source</code> is optional. React-admin uses it to determine which column to use for sorting when the column header is clicked. In case you use the <code class="language-plaintext highlighter-rouge">source</code> property for additional purposes, the sorting can be overridden by the <code class="language-plaintext highlighter-rouge">sortBy</code> property on any <code class="language-plaintext highlighter-rouge">Field</code> component.</p>

<h3 id="adding-a-label-to-custom-field-components">Adding A Label To Custom Field Components</h3>

<p>When you use one of the react-admin <code class="language-plaintext highlighter-rouge">Field</code> components in an <code class="language-plaintext highlighter-rouge">Edit</code>, <code class="language-plaintext highlighter-rouge">Create</code> or <code class="language-plaintext highlighter-rouge">Show</code> view, react-admin includes a label on top of the field value, as in the following example:</p>

<p><img src="./img/field-addlabel.png" alt="field labels" /></p>

<p>For your custom fields, however, the label doesn’t appear by default. You need to opt in this feature by setting the <code class="language-plaintext highlighter-rouge">addLabel</code> prop to <code class="language-plaintext highlighter-rouge">true</code> in the <code class="language-plaintext highlighter-rouge">defaultProps</code>.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const FullNameField = (props) =&gt; {
</span>    const record = useRecordContext(props);
    return (
        &lt;span&gt;
            {record.firstName} {record.lastName}
        &lt;/span&gt;
    );
<span class="err">}</span>

<span class="p">FullNameField.defaultProps = {
</span>    label: 'Name',
<span class="gi">+   addLabel: true,
</span><span class="err">};</span>
</code></pre></div></div>

<p>React-admin uses a trick to make it work: the view layouts (<code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;SimpleForm&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;TabbedForm&gt;</code>) inspect their children, and whenever one has the <code class="language-plaintext highlighter-rouge">addLabel</code> prop set to <code class="language-plaintext highlighter-rouge">true</code>, the layout decorates the component with a label.</p>

<p>If you don’t use any of these layouts, the <code class="language-plaintext highlighter-rouge">addLabel</code> trick won’t work. You’ll have to add a label manually by decorating your field with <a href="./Inputs.md#using-labeled">the <code class="language-plaintext highlighter-rouge">&lt;Labeled&gt;</code> component</a>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Labeled</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyShowLayout</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Labeled</span> <span class="na">label</span><span class="p">=</span><span class="s">"Name"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">FullNameField</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Labeled</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>You can also leverage the default label resolution mechanism by providing the <code class="language-plaintext highlighter-rouge">resource</code> and <code class="language-plaintext highlighter-rouge">source</code> props instead of the <code class="language-plaintext highlighter-rouge">label</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Labeled</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyShowLayout</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Labeled</span> <span class="na">resource</span><span class="p">=</span><span class="s">"users"</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Labeled</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="hiding-a-field-based-on-the-value-of-another">Hiding A Field Based On The Value Of Another</h3>

<p>In a Show view, you may want to display or hide fields based on the value of another field - for instance, show an <code class="language-plaintext highlighter-rouge">email</code> field only if the <code class="language-plaintext highlighter-rouge">hasEmail</code> boolean field is <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p>For such cases, you can use the custom field approach: use the injected <code class="language-plaintext highlighter-rouge">record</code> prop, and render another Field based on the value.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">EmailField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ConditionalEmailField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">record</span> <span class="o">&amp;&amp;</span> <span class="nx">record</span><span class="p">.</span><span class="nx">hasEmail</span>
        <span class="p">?</span> <span class="p">&lt;</span><span class="nc">EmailField</span> <span class="na">source</span><span class="p">=</span><span class="s">"email"</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ConditionalEmailField</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: Always check the <code class="language-plaintext highlighter-rouge">record</code> is defined before inspecting its properties, as react-admin displays the <code class="language-plaintext highlighter-rouge">Show</code> view <em>before</em> fetching the record from the data provider. So the first time it renders the show view for a resource, the <code class="language-plaintext highlighter-rouge">record</code> is <code class="language-plaintext highlighter-rouge">undefined</code>.</p>

<p>This <code class="language-plaintext highlighter-rouge">ConditionalEmailField</code> is properly hidden when <code class="language-plaintext highlighter-rouge">hasEmail</code> is <code class="language-plaintext highlighter-rouge">false</code>. But when <code class="language-plaintext highlighter-rouge">hasEmail</code> is <code class="language-plaintext highlighter-rouge">true</code>, the Show layout renders it… without a label. And if you add a <code class="language-plaintext highlighter-rouge">addLabel</code> default prop, the <code class="language-plaintext highlighter-rouge">Show</code> layout will render the label regardless of the <code class="language-plaintext highlighter-rouge">hasEmail</code> value…</p>

<p>One solution is to add the label manually in the custom component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Labeled</span><span class="p">,</span> <span class="nx">EmailField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ConditionalEmailField</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">record</span> <span class="o">&amp;&amp;</span> <span class="nx">record</span><span class="p">.</span><span class="nx">hasEmail</span>
        <span class="p">?</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">Labeled</span> <span class="na">label</span><span class="p">=</span><span class="s">"Email"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">EmailField</span> <span class="na">source</span><span class="p">=</span><span class="s">"email"</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Labeled</span><span class="p">&gt;</span>
        <span class="p">)</span>
        <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ConditionalEmailField</span><span class="p">;</span>
</code></pre></div></div>

<p>This comes with a drawback, though: the <code class="language-plaintext highlighter-rouge">&lt;ConditionalEmailField&gt;</code> cannot be used in a List view anymore, as it will always have a label. If you want to reuse the custom component in a List, this isn’t the right solution.</p>

<p>An alternative solution is to split the <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component. Under the hood, the <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component is composed of two sub-components: the <code class="language-plaintext highlighter-rouge">&lt;ShowController&gt;</code> component, which fetches the record, and the <code class="language-plaintext highlighter-rouge">&lt;ShowView&gt;</code>, which is responsible for rendering the view title, actions, and children. <code class="language-plaintext highlighter-rouge">&lt;ShowController&gt;</code> uses the <em>render props</em> pattern:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// inside react-admin</span>
<span class="kd">const</span> <span class="nx">Show</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ShowController</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">controllerProps</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">ShowView</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">controllerProps</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">ShowController</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">&lt;ShowController&gt;</code> fetches the <code class="language-plaintext highlighter-rouge">record</code> from the data provider, and passes it to its child function when received (among the <code class="language-plaintext highlighter-rouge">controllerProps</code>). That means the following code:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Show</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"username"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"email"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Is equivalent to:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ShowController</span><span class="p">,</span> <span class="nx">ShowView</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ShowController</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">controllerProps</span> <span class="o">=&gt;</span>
            <span class="p">&lt;</span><span class="nc">ShowView</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">controllerProps</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"username"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"email"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ShowView</span><span class="p">&gt;</span>
        <span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">ShowController</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>If you want one field to be displayed based on the <code class="language-plaintext highlighter-rouge">record</code>, for instance to display the email field only if the <code class="language-plaintext highlighter-rouge">hasEmail</code> field is <code class="language-plaintext highlighter-rouge">true</code>, you just need to test the value from <code class="language-plaintext highlighter-rouge">controllerProps.record</code>, as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ShowController</span><span class="p">,</span> <span class="nx">ShowView</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ShowController</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">controllerProps</span> <span class="o">=&gt;</span>
            <span class="p">&lt;</span><span class="nc">ShowView</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">controllerProps</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"username"</span> <span class="p">/&gt;</span>
                    <span class="si">{</span><span class="nx">controllerProps</span><span class="p">.</span><span class="nx">record</span> <span class="o">&amp;&amp;</span> <span class="nx">controllerProps</span><span class="p">.</span><span class="nx">record</span><span class="p">.</span><span class="nx">hasEmail</span> <span class="o">&amp;&amp;</span>
                        <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"email"</span> <span class="p">/&gt;</span>
                    <span class="si">}</span>
                <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">ShowView</span><span class="p">&gt;</span>
        <span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">ShowController</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>And now you can use a regular Field component, and the label displays correctly in the Show view.</p>

<h3 id="linking-to-other-records">Linking To Other Records</h3>

<p>A custom Field component might need to display a link to another record. React Admin provides a <code class="language-plaintext highlighter-rouge">linkToRecord(basePath, id[, linkType])</code> method for this purpose.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">linkToRecord</span><span class="p">,</span> <span class="nx">useRecordContext</span><span class="p">,</span> <span class="nx">useGetOne</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AuthorField</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loaded</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">user_id</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">userShowPage</span> <span class="o">=</span> <span class="nx">linkToRecord</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">user_id</span><span class="p">,</span> <span class="dl">'</span><span class="s1">show</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">loaded</span> <span class="p">?</span> <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="nx">userShowPage</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">username</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Link&gt; : null</span><span class="err">;
</span><span class="p">};</span>
</code></pre></div></div>

<h2 id="third-party-components">Third-Party Components</h2>

<p>You can find components for react-admin in third-party repositories.</p>

<ul>
  <li><a href="https://github.com/OoDeLally/react-admin-clipboard-list-field">OoDeLally/react-admin-clipboard-list-field</a>: a quick and customizable copy-to-clipboard field.</li>
  <li><a href="https://github.com/MrHertal/react-admin-json-view">MrHertal/react-admin-json-view</a>: JSON field and input for react-admin.</li>
</ul>
:ET