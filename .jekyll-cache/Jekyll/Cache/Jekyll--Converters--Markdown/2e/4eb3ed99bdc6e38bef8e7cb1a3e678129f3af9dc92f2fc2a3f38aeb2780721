I"I<h1 id="caching">Caching</h1>

<p>Not hitting the server is the best way to improve a web app performance - and its ecological footprint, too (network and datacenter usage account for about 40% of the CO2 emissions in IT). React-admin comes with a built-in cache-first approach called <em>optimistic rendering</em>, and it supports caching both at the HTTP level and the application level.</p>

<h2 id="optimistic-rendering">Optimistic Rendering</h2>

<p>By default, react-admin stores all the responses from the dataProvider in the Redux store. This allows displaying the cached result first while fetching for the fresh data. <strong>This behavior is automatic and requires no configuration</strong>.</p>

<p>The Redux store is like a local replica of the API, organized by resource, and shared between all the data provider methods of a given resource. That means that if the <code class="language-plaintext highlighter-rouge">getList('posts')</code> response contains a record of id 123, a call to <code class="language-plaintext highlighter-rouge">getOne('posts', { id: 123 })</code> will use that record immediately.</p>

<p>For instance, if the end-user displays a list of posts, then clicks on a post in the list to display the list details, here is what react-admin does:</p>

<ol>
  <li>Display the empty List</li>
  <li>Call <code class="language-plaintext highlighter-rouge">dataProvider.getList('posts')</code>, and store the result in the Redux store</li>
  <li>Re-render the List with the data from the Redux store</li>
  <li>When the user clicks on a post, display immediately the post from the Redux store</li>
  <li>Call <code class="language-plaintext highlighter-rouge">dataProvider.getOne('posts', { id: 123 })</code>, and store the result in the Redux store</li>
  <li>Re-render the detail with the data from the Redux store</li>
</ol>

<p>In step 4, react-admin displays the post <em>before</em> fetching it, because it’s already in the Redux store from the previous <code class="language-plaintext highlighter-rouge">getList()</code> call. In most cases, the post from the <code class="language-plaintext highlighter-rouge">getOne()</code> response is the same as the one from the <code class="language-plaintext highlighter-rouge">getList()</code> response, so the re-render of step 6 is invisible to the end-user. If the post was modified on the server side between the <code class="language-plaintext highlighter-rouge">getList()</code> and the <code class="language-plaintext highlighter-rouge">getOne</code> calls, the end-user will briefly see the outdated version (at step 4), then the up to date version (at step 6).</p>

<p>Optimistic rendering improves user experience by displaying stale data while getting fresh data from the API, but it does not reduce the ecological footprint of an app, as the web app still makes API requests on every page.</p>

<p><strong>Tip</strong>: This design choice explains why react-admin requires that all data provider methods return records of the same shape for a given resource. Otherwise, if the posts returned by <code class="language-plaintext highlighter-rouge">getList()</code> contain fewer fields than the posts returned by <code class="language-plaintext highlighter-rouge">getOne()</code>, in the previous scenario, the user will see an incomplete post at step 4.</p>

<h2 id="http-cache">HTTP Cache</h2>

<p>React-admin supports HTTP cache headers by default, provided your API sends them.</p>

<p>Data providers almost always rely on <code class="language-plaintext highlighter-rouge">window.fetch()</code> to call the HTTP API. React-admin’s <code class="language-plaintext highlighter-rouge">fetchJSON()</code>, and third-party libraries like <code class="language-plaintext highlighter-rouge">axios</code> use <code class="language-plaintext highlighter-rouge">window.fetch()</code>, too. Fortunately, the <code class="language-plaintext highlighter-rouge">window.fetch()</code> HTTP client behaves just like your browser and follows the <a href="https://tools.ietf.org/html/rfc7234">RFC 7234</a> about HTTP cache headers. So if your API includes one of the following cache headers, all data providers support them:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Cache-Control</code></li>
  <li><code class="language-plaintext highlighter-rouge">Expires</code></li>
  <li><code class="language-plaintext highlighter-rouge">ETag</code></li>
  <li><code class="language-plaintext highlighter-rouge">Last-Modified</code></li>
</ul>

<p>In other terms, enabling the HTTP cache is entirely a server-side action - <strong>nothing is necessary on the react-admin side</strong>.</p>

<p>For instance, let’s imagine that your data provider translates a <code class="language-plaintext highlighter-rouge">getOne('posts', { id: 123 })</code> call into a <code class="language-plaintext highlighter-rouge">GET https://api.acme.com/posts/123</code>, and that the server returns the following response:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=utf-8
Cache-Control: max-age=120
Age: 0
{
    "id": 123,
    "title": "Hello, world"
}
</code></pre></div></div>

<p>The browser HTTP client knows that the response is valid for the next 2 minutes. If a component makes a new call to <code class="language-plaintext highlighter-rouge">getOne('posts', { id: 123 })</code> within 2 minutes, <code class="language-plaintext highlighter-rouge">window.fetch()</code> will return the response from the first call without even calling the API.</p>

<p>Refer to your backend framework or CDN documentation to enable cache headers - and don’t forget to whitelist these headers in the <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Headers</code> CORS header if the API lives in another domain than the web app itself.</p>

<p>HTTP cache can help improve the performance and reduce the ecological footprint of a web app. The main drawback is that responses are cached based on their request signature. The cached responses for <code class="language-plaintext highlighter-rouge">GET https://api.acme.com/posts</code> and <code class="language-plaintext highlighter-rouge">GET https://api.acme.com/posts/123</code> live in separate buckets on the client-side, and cannot be shared. As a consequence, the browser still makes a lot of useless requests to the API. HTTP cache also has another drawback: browser caches ignore the REST semantics. That means that a call to <code class="language-plaintext highlighter-rouge">DELETE https://api.acme.com/posts/123</code> can’t invalidate the cache of the <code class="language-plaintext highlighter-rouge">GET https://api.acme.com/posts</code> request, and therefore the cache is sometimes wrong.</p>

<p>These shortcomings explain why most APIs adopt short expiration or use “validation caching” (based on <code class="language-plaintext highlighter-rouge">Etag</code> or <code class="language-plaintext highlighter-rouge">Last-Modified</code> headers) instead of “expiration caching” (based on the <code class="language-plaintext highlighter-rouge">Cache-Control</code> or <code class="language-plaintext highlighter-rouge">Expires</code> headers). But with validation caching, the client must send <em>every request</em> to the server (sometimes the server returns an empty response, letting the client know that it can use its cache). Validation caching reduces network traffic a lot less than expiration caching and has less impact on performance.</p>

<p>Finally, if your API uses GraphQL, it probably doesn’t offer HTTP caching.</p>

<h2 id="application-cache">Application Cache</h2>

<p>React-admin comes with its caching system, called <em>application cache</em>, to overcome the limitations if the HTTP cache. <strong>This cache is opt-in</strong> - you have to enable it by including validity information in the <code class="language-plaintext highlighter-rouge">dataProvider</code> response. But before explaining how to configure it, let’s see how it works.</p>

<p>React-admin already stores responses from the <code class="language-plaintext highlighter-rouge">dataProvider</code> in the Redux store, for the <a href="#optimistic-rendering">optimistic rendering</a>. The application cache checks if this data is valid, and <em>skips the call to the <code class="language-plaintext highlighter-rouge">dataProvider</code> altogether</em> if it’s the case.</p>

<p>For instance, if the end-user displays a list of posts, then clicks on a post in the list to display the list details, here is what react-admin does:</p>

<ol>
  <li>Display the empty List</li>
  <li>Call <code class="language-plaintext highlighter-rouge">dataProvider.getList('posts')</code>, and store the result in the Redux store</li>
  <li>Re-render the List with the data from the Redux store</li>
  <li>When the user clicks on a post, display immediately the post from the Redux store (optimistic rendering)</li>
  <li>Check the post of id 123 is still valid, and as it’s the case, end here</li>
</ol>

<p>The application cache uses the semantics of the <code class="language-plaintext highlighter-rouge">dataProvider</code> verb. That means that requests for a list (<code class="language-plaintext highlighter-rouge">getList</code>) also populate the cache for individual records (<code class="language-plaintext highlighter-rouge">getOne</code>, <code class="language-plaintext highlighter-rouge">getMany</code>). That also means that write requests (<code class="language-plaintext highlighter-rouge">create</code>, <code class="language-plaintext highlighter-rouge">udpate</code>, <code class="language-plaintext highlighter-rouge">updateMany</code>, <code class="language-plaintext highlighter-rouge">delete</code>, <code class="language-plaintext highlighter-rouge">deleteMany</code>) invalidate the list cache - because after an update, for instance, the ordering of items can be changed.</p>

<p>So the application cache uses expiration caching together with a deeper knowledge of the data model, to allow longer expirations without the risk of displaying stale data. It especially fits admins for API backends with a small number of users (because with a large number of users, there is a high chance that a record kept in the client-side cache for a few minutes may be updated on the backend by another user). It also works with GraphQL APIs.</p>

<p>To enable it, the <code class="language-plaintext highlighter-rouge">dataProvider</code> response must include a <code class="language-plaintext highlighter-rouge">validUntil</code> key, containing the date until which the record(s) is (are) valid.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> response to getOne('posts', { id: 123 })
<span class="err">{</span>
    "data": { "id": 123, "title": "Hello, world" }
<span class="gi">+   "validUntil": new Date('2020-03-02T13:24:05')
</span><span class="err">}</span>

<span class="err">//</span> response to getMany('posts', { ids: [123, 124] }
<span class="err">{</span>
    "data": [
        { "id": 123, "title": "Hello, world" },
        { "id": 124, "title": "Post title 2" },
    ],
<span class="gi">+   "validUntil": new Date('2020-03-02T13:24:05')
</span><span class="err">}</span>

<span class="err">//</span> response to getList('posts')
<span class="err">{</span>
    "data": [
        { "id": 123, "title": "Hello, world" },
        { "id": 124, "title": "Post title 2" },
        ...

    ],
    "total": 45,
<span class="gi">+   "validUntil": new Date('2020-03-02T13:24:05')
</span><span class="err">}</span>
</code></pre></div></div>

<p>To empty the cache, the <code class="language-plaintext highlighter-rouge">dataProvider</code> can simply omit the <code class="language-plaintext highlighter-rouge">validUntil</code> key in the response.</p>

<p><strong>Tip</strong>: As of writing, the <code class="language-plaintext highlighter-rouge">validUntil</code> key is only taken into account for <code class="language-plaintext highlighter-rouge">getOne</code>, <code class="language-plaintext highlighter-rouge">getMany</code>, and <code class="language-plaintext highlighter-rouge">getList</code>.</p>

<p>It’s your responsibility to determine the validity date based on the API response, or based on a fixed time policy.</p>

<p>For instance, to have a <code class="language-plaintext highlighter-rouge">dataProvider</code> declare responses for <code class="language-plaintext highlighter-rouge">getOne</code>, <code class="language-plaintext highlighter-rouge">getMany</code>, and <code class="language-plaintext highlighter-rouge">getList</code> valid for 5 minutes, you can wrap it in the following proxy:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/dataProvider.js</span>
<span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">cacheDataProviderProxy</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dataProvider</span><span class="p">,</span> <span class="nx">duration</span> <span class="o">=</span>  <span class="mi">5</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">dataProvider</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">get</span><span class="p">:</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">getOne</span><span class="dl">'</span> <span class="o">||</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">getMany</span><span class="dl">'</span> <span class="o">||</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">getList</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">dataProvider</span><span class="p">[</span><span class="nx">name</span><span class="p">](</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="kd">const</span> <span class="nx">validUntil</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
                    <span class="nx">validUntil</span><span class="p">.</span><span class="nx">setTime</span><span class="p">(</span><span class="nx">validUntil</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="nx">duration</span><span class="p">);</span>
                    <span class="nx">response</span><span class="p">.</span><span class="nx">validUntil</span> <span class="o">=</span> <span class="nx">validUntil</span><span class="p">;</span>
                    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
                <span class="p">});</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">dataProvider</span><span class="p">[</span><span class="nx">name</span><span class="p">](</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">params</span><span class="p">);</span>
        <span class="p">},</span>
    <span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">cacheDataProviderProxy</span><span class="p">(</span><span class="nx">dataProvider</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: As caching responses for a fixed period is a common pattern, react-admin exports this <code class="language-plaintext highlighter-rouge">cacheDataProviderProxy</code> wrapper, so you can write the following instead:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/dataProvider.js</span>
<span class="k">import</span> <span class="nx">simpleRestProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-simple-rest</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">cacheDataProviderProxy</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span> 

<span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api/</span><span class="dl">'</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">cacheDataProviderProxy</span><span class="p">(</span><span class="nx">dataProvider</span><span class="p">);</span>
</code></pre></div></div>

<p>Application cache provides a very significant boost for the end-user and saves a large portion of the network traffic. Even a short expiration date (30 seconds or one minute) can speed up a complex admin with a low risk of displaying stale data. Adding an application cache is, therefore, a warmly recommended practice!</p>
:ET