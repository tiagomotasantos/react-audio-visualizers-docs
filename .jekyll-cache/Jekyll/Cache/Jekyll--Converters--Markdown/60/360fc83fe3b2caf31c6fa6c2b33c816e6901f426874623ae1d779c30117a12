I" M<h1 id="querying-the-api">Querying the API</h1>

<p>Admin interfaces often have to query the API beyond CRUD requests. For instance, a user profile page may need to get the User object based on a user id. Or, users may want to “Approve” a comment by pressing a button, and this action should update the <code class="language-plaintext highlighter-rouge">is_approved</code> property and save the updated record in one click.</p>

<p>React-admin provides special hooks to emit read and write queries to the <a href="./DataProviders.md"><code class="language-plaintext highlighter-rouge">dataProvider</code></a>, which in turn sends requests to your API.</p>

<h2 id="usedataprovider-hook"><code class="language-plaintext highlighter-rouge">useDataProvider</code> Hook</h2>

<p>React-admin stores the <code class="language-plaintext highlighter-rouge">dataProvider</code> object in a React context, so it’s available from anywhere in your application code. The <code class="language-plaintext highlighter-rouge">useDataProvider</code> hook exposes the Data Provider to let you call it directly.</p>

<p>For instance, here is how to query the Data Provider for the current user profile:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDataProvider</span><span class="p">,</span> <span class="nx">Loading</span><span class="p">,</span> <span class="nb">Error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserProfile</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">useDataProvider</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">user</span><span class="p">,</span> <span class="nx">setUser</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>
    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">userId</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">setUser</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
                <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
            <span class="p">})</span>
    <span class="p">},</span> <span class="p">[]);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Error</span> <span class="p">/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Name: <span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Email: <span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: The <code class="language-plaintext highlighter-rouge">dataProvider</code> returned by the hook is actually a <em>wrapper</em> around your Data Provider. This wrapper updates the Redux store on success, and keeps track of the loading state. In case you don’t want to update the Redux store (e.g. when implementing an autosave feature), you should access the raw, non-wrapped Data Provider from the <code class="language-plaintext highlighter-rouge">DataProviderContext</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import * as React from 'react';
</span><span class="gd">-import { useState, useEffect } from 'react';
</span><span class="gi">+import { useState, useEffect, useContext } from 'react';
</span><span class="gd">-import { useDataProvider, Loading, Error } from 'react-admin';
</span><span class="gi">+import { DataProviderContext, Loading, Error } from 'react-admin';
</span>
const UserProfile = ({ userId }) =&gt; {
<span class="gd">-   const dataProvider = useDataProvider();
</span><span class="gi">+   const dataProvider = useContext(DataProviderContext);
</span>    const [user, setUser] = useState();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState();
    useEffect(() =&gt; {
        dataProvider.getOne('users', { id: userId })
            .then(({ data }) =&gt; {
                setUser(data);
                setLoading(false);
            })
            .catch(error =&gt; {
                setError(error);
                setLoading(false);
            })
    }, []);

    if (loading) return &lt;Loading /&gt;;
    if (error) return &lt;Error /&gt;;
    if (!user) return null;

    return (
        &lt;ul&gt;
            &lt;li&gt;Name: {user.name}&lt;/li&gt;
            &lt;li&gt;Email: {user.email}&lt;/li&gt;
        &lt;/ul&gt;
    )
<span class="err">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you use TypeScript, you can specify a record type for more type safety:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dataProvider</span><span class="p">.</span><span class="nx">getOne</span><span class="o">&lt;</span><span class="nx">Product</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">123</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">//     \- type of data is Product</span>
        <span class="c1">// ...</span>
    <span class="p">})</span>
</code></pre></div></div>

<h2 id="usequery-hook"><code class="language-plaintext highlighter-rouge">useQuery</code> Hook</h2>

<p>The <code class="language-plaintext highlighter-rouge">useQuery</code> hook calls the Data Provider on mount, and returns an object that updates as the response arrives. It reduces the boilerplate code for calling the Data Provider.</p>

<p>For instance, the previous code snippet can be rewritten with <code class="language-plaintext highlighter-rouge">useQuery</code> as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useQuery</span><span class="p">,</span> <span class="nx">Loading</span><span class="p">,</span> <span class="nb">Error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserProfile</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">({</span> 
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">getOne</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">payload</span><span class="p">:</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">userId</span> <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Error</span> <span class="p">/&gt;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Name: <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Email: <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">useQuery</code> expects a Query argument with the following keys:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: The method to call on the Data Provider, e.g. <code class="language-plaintext highlighter-rouge">getList</code></li>
  <li><code class="language-plaintext highlighter-rouge">resource</code>: The Resource name, e.g. “posts”</li>
  <li><code class="language-plaintext highlighter-rouge">payload</code>: The query parameters. Depends on the query type.</li>
</ul>

<p>The return value of <code class="language-plaintext highlighter-rouge">useQuery</code> is an object representing the query state, using the following keys:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">data</code>: <code class="language-plaintext highlighter-rouge">undefined</code> until the response arrives, then contains the <code class="language-plaintext highlighter-rouge">data</code> key in the <code class="language-plaintext highlighter-rouge">dataProvider</code> response</li>
  <li><code class="language-plaintext highlighter-rouge">total</code>: <code class="language-plaintext highlighter-rouge">null</code> until the response arrives, then contains the <code class="language-plaintext highlighter-rouge">total</code> key in the <code class="language-plaintext highlighter-rouge">dataProvider</code> response (only for <code class="language-plaintext highlighter-rouge">getList</code> and <code class="language-plaintext highlighter-rouge">getManyReference</code> types)</li>
  <li><code class="language-plaintext highlighter-rouge">error</code>: <code class="language-plaintext highlighter-rouge">null</code> unless the <code class="language-plaintext highlighter-rouge">dataProvider</code> threw an error, in which case it contains that error.</li>
  <li><code class="language-plaintext highlighter-rouge">loading</code>: A boolean updating according to the request state</li>
  <li><code class="language-plaintext highlighter-rouge">loaded</code>: A boolean updating according to the request state</li>
  <li><code class="language-plaintext highlighter-rouge">refetch</code>: A function you can call to trigger a refetch. It’s different from the <code class="language-plaintext highlighter-rouge">refresh</code> function returned by <code class="language-plaintext highlighter-rouge">useRefresh</code> as it won’t trigger a refresh of the view, only this specific query.</li>
</ul>

<p>This object updates according to the request state:</p>

<ul>
  <li>start: <code class="language-plaintext highlighter-rouge">{ loading: true, loaded: false, refetch }</code></li>
  <li>success: <code class="language-plaintext highlighter-rouge">{ data: [data from response], total: [total from response], loading: false, loaded: true, refetch }</code></li>
  <li>error: <code class="language-plaintext highlighter-rouge">{ error: [error from response], loading: false, loaded: false, refetch }</code></li>
</ul>

<p>As a reminder, here are the read query types handled by Data Providers:</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Usage</th>
      <th>Params format</th>
      <th>Response format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getList</code></td>
      <td>Search for resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ pagination: { page: {int} , perPage: {int} }, sort: { field: {string}, order: {string} }, filter: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]}, total: {int} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getOne</code></td>
      <td>Read a single resource, by id</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getMany</code></td>
      <td>Read a list of resource, by ids</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getManyReference</code></td>
      <td>Read a list of resources related to another one</td>
      <td><code class="language-plaintext highlighter-rouge">{ target: {string}, id: {mixed}, pagination: { page: {int} , perPage: {int} }, sort: { field: {string}, order: {string} }, filter: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record[]} }</code></td>
    </tr>
  </tbody>
</table>

<h2 id="usequerywithstore-hook"><code class="language-plaintext highlighter-rouge">useQueryWithStore</code> Hook</h2>

<p>React-admin exposes a more powerful version of <code class="language-plaintext highlighter-rouge">useQuery</code>. <code class="language-plaintext highlighter-rouge">useQueryWithStore</code> persist the response from the <code class="language-plaintext highlighter-rouge">dataProvider</code> in the internal react-admin Redux store, so that result remains available if the hook is called again in the future.</p>

<p>You can use this hook to show the cached result immediately on mount, while the updated result is fetched from the API. This is called optimistic rendering.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import * as React from "react";
</span><span class="gd">-import { useQuery, Loading, Error } from 'react-admin';
</span><span class="gi">+import { useQueryWithStore, Loading, Error } from 'react-admin';
</span>
const UserProfile = ({ record }) =&gt; {
<span class="gd">-   const { loaded, error, data } = useQuery({
</span><span class="gi">+   const { loaded, error, data } = useQueryWithStore({
</span>        type: 'getOne',
        resource: 'users',
        payload: { id: record.id }
    });
    if (!loaded) { return &lt;Loading /&gt;; }
    if (error) { return &lt;Error /&gt;; }
    return &lt;div&gt;User {data.username}&lt;/div&gt;;
<span class="err">};</span>
</code></pre></div></div>

<p>In practice, react-admin uses <code class="language-plaintext highlighter-rouge">useQueryWithStore</code> instead of <code class="language-plaintext highlighter-rouge">useQuery</code> everywhere, and you should probably do the same in your components. It really improves the User Experience, with only one little drawback: if the data changed on the backend side between two calls for the same query, the user may briefly see outdated data before the screen updates with the up-to-date data.</p>

<p>Just like <code class="language-plaintext highlighter-rouge">useQuery</code>, <code class="language-plaintext highlighter-rouge">useQueryWithStore</code> also returns a <code class="language-plaintext highlighter-rouge">refetch</code> function you can call to trigger a refetch. It’s different from the <code class="language-plaintext highlighter-rouge">refresh</code> function returned by <code class="language-plaintext highlighter-rouge">useRefresh</code> as it won’t trigger a refresh of the view, only this specific query.</p>

<h2 id="usemutation-hook"><code class="language-plaintext highlighter-rouge">useMutation</code> Hook</h2>

<p><code class="language-plaintext highlighter-rouge">useQuery</code> emits the request to the <code class="language-plaintext highlighter-rouge">dataProvider</code> as soon as the component mounts. To emit the request based on a user action, use the <code class="language-plaintext highlighter-rouge">useMutation</code> hook instead. This hook takes the same arguments as <code class="language-plaintext highlighter-rouge">useQuery</code>, but returns a callback that emits the request when executed.</p>

<p>Here is an implementation of an “Approve” button:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useMutation</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">approve</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useMutation</span><span class="p">({</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">payload</span><span class="p">:</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">useMutation</code> expects a Query argument with the following keys:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: The method to call on the Data Provider, e.g. <code class="language-plaintext highlighter-rouge">update</code></li>
  <li><code class="language-plaintext highlighter-rouge">resource</code>: The Resource name, e.g. “posts”</li>
  <li><code class="language-plaintext highlighter-rouge">payload</code>: The query parameters. Depends on the query type.</li>
</ul>

<p>The return value of <code class="language-plaintext highlighter-rouge">useMutation</code> is an array with the following items:</p>

<ul>
  <li>A callback function</li>
  <li>An object representing the query state, using the following keys
    <ul>
      <li><code class="language-plaintext highlighter-rouge">data</code>: <code class="language-plaintext highlighter-rouge">undefined</code> until the response arrives, then contains the <code class="language-plaintext highlighter-rouge">data</code> key in the <code class="language-plaintext highlighter-rouge">dataProvider</code> response</li>
      <li><code class="language-plaintext highlighter-rouge">error</code>: <code class="language-plaintext highlighter-rouge">null</code> unless the <code class="language-plaintext highlighter-rouge">dataProvider</code> threw an error, in which case it contains that error.</li>
      <li><code class="language-plaintext highlighter-rouge">loading</code>: A boolean updating according to the request state</li>
      <li><code class="language-plaintext highlighter-rouge">loaded</code>: A boolean updating according to the request state</li>
    </ul>
  </li>
</ul>

<p>This object updates according to the request state:</p>

<ul>
  <li>mount: <code class="language-plaintext highlighter-rouge">{ loading: false, loaded: false }</code></li>
  <li>mutate called: <code class="language-plaintext highlighter-rouge">{ loading: true, loaded: false }</code></li>
  <li>success: <code class="language-plaintext highlighter-rouge">{ data: [data from response], total: [total from response], loading: false, loaded: true }</code></li>
  <li>error: <code class="language-plaintext highlighter-rouge">{ error: [error from response], loading: false, loaded: false }</code></li>
</ul>

<p>You can destructure the return value of the <code class="language-plaintext highlighter-rouge">useMutation</code> hook as <code class="language-plaintext highlighter-rouge">[mutate,  { data, total, error, loading, loaded }]</code>.</p>

<p>As a reminder, here are the write query types handled by data providers:</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Usage</th>
      <th>Params format</th>
      <th>Response format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">create</code></td>
      <td>Create a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">update</code></td>
      <td>Update a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed}, data: {Object}, previousData: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">updateMany</code></td>
      <td>Update multiple resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]}, data: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {mixed[]} }</code> The ids which have been updated</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delete</code></td>
      <td>Delete a single resource</td>
      <td><code class="language-plaintext highlighter-rouge">{ id: {mixed}, previousData: {Object} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {Record} }</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">deleteMany</code></td>
      <td>Delete multiple resources</td>
      <td><code class="language-plaintext highlighter-rouge">{ ids: {mixed[]} }</code></td>
      <td><code class="language-plaintext highlighter-rouge">{ data: {mixed[]} }</code> The ids which have been deleted</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">useMutation</code> accepts a variant call where the parameters are passed to the callback instead of when calling the hook. Use this variant when some parameters are only known at call time.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useMutation</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">mutate</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useMutation</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">approve</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="nx">mutate</span><span class="p">({</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">payload</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">updatedAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span>
        <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span>
        <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span>
        <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span>
    <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: In the example above, the callback returned by <code class="language-plaintext highlighter-rouge">useMutation</code> accepts a Query parameter. But in the previous example, it was called with a DOM Event as parameter (because it was passed directly as <code class="language-plaintext highlighter-rouge">onClick</code> handler). <code class="language-plaintext highlighter-rouge">useMutation</code> is smart enough to ignore a call time argument if it’s an instance of <code class="language-plaintext highlighter-rouge">Event</code>.</p>

<p><strong>Tip</strong>: User actions usually trigger write queries - that’s why this hook is called <code class="language-plaintext highlighter-rouge">useMutation</code>.</p>

<h2 id="specialized-hooks">Specialized Hooks</h2>

<p>React-admin provides one hook for each of the Data Provider methods. Based on <code class="language-plaintext highlighter-rouge">useQuery</code> and <code class="language-plaintext highlighter-rouge">useMutation</code>, they are useful shortcuts that make your code more readable and more robust (no more method name passed as string).</p>

<p>For instance, here is an example using <code class="language-plaintext highlighter-rouge">useUpdate()</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdate</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">approve</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdate</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="nx">record</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The specialized hooks based on <code class="language-plaintext highlighter-rouge">useQuery</code> (<code class="language-plaintext highlighter-rouge">useGetList</code>, <code class="language-plaintext highlighter-rouge">useGetOne</code>, <code class="language-plaintext highlighter-rouge">useGetMany</code>, <code class="language-plaintext highlighter-rouge">useGetManyReference</code>) execute on mount. The specialized hooks based on <code class="language-plaintext highlighter-rouge">useMutation</code> (<code class="language-plaintext highlighter-rouge">useCreate</code>, <code class="language-plaintext highlighter-rouge">useUpdate</code>, <code class="language-plaintext highlighter-rouge">useUpdateMany</code>, <code class="language-plaintext highlighter-rouge">useDelete</code>, <code class="language-plaintext highlighter-rouge">useDeleteMany</code>) return a callback.</p>

<p><strong>Tip</strong>: If you use TypeScript, you can specify the record type for more type safety:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loaded</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="o">&lt;</span><span class="nx">Product</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">products</span><span class="dl">'</span><span class="p">,</span> <span class="mi">123</span><span class="p">);</span>
<span class="c1">//        \- type of data is Product</span>
</code></pre></div></div>

<h3 id="usegetlist"><code class="language-plaintext highlighter-rouge">useGetList</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetList</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">pagination</span><span class="p">,</span> <span class="nx">sort</span><span class="p">,</span> <span class="nx">filter</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>

<span class="c1">// example</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useGetList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">LatestNews</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetList</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">published_at</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DESC</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">ids</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span>
                <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">data</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usegetone"><code class="language-plaintext highlighter-rouge">useGetOne</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>

<span class="c1">// example</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useGetOne</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">UserProfile</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>User <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">username</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usegetmany"><code class="language-plaintext highlighter-rouge">useGetMany</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetMany</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>

<span class="c1">// example</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useGetMany</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PostTags</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">tags</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">tagIds</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">(</span>
         <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
             <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">tag</span> <span class="o">=&gt;</span> <span class="p">(</span>
                 <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">tag</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">tag</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
             <span class="p">))</span><span class="si">}</span>
         <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
     <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usegetmanyreference"><code class="language-plaintext highlighter-rouge">useGetManyReference</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">refetch</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetManyReference</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">pagination</span><span class="p">,</span> <span class="nx">sort</span><span class="p">,</span> <span class="nx">filter</span><span class="p">,</span> <span class="nx">referencingResource</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>

<span class="c1">// example</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useGetManyReference</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PostComments</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">post_id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetManyReference</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">post_id</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">post_id</span><span class="p">,</span>
        <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">published_at</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DESC</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{},</span>
        <span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">ids</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">id</span> <span class="o">=&gt;</span>
                <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">data</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">body</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usecreate"><code class="language-plaintext highlighter-rouge">useCreate</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">create</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useCreate</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">create()</code> function can be called in 3 different ways:</p>
<ul>
  <li>with the same parameters as the <code class="language-plaintext highlighter-rouge">useCreate()</code> hook: <code class="language-plaintext highlighter-rouge">create(resource, data, options)</code></li>
  <li>with the same syntax as <code class="language-plaintext highlighter-rouge">useMutation</code>: <code class="language-plaintext highlighter-rouge">create({ resource, payload: { data } }, options)</code></li>
  <li>with no parameter (if they were already passed to <code class="language-plaintext highlighter-rouge">useCreate()</code>): <code class="language-plaintext highlighter-rouge">create()</code></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// set params when calling the update callback</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useCreate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">LikeButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">like</span> <span class="o">=</span> <span class="p">{</span> <span class="na">postId</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span> <span class="p">};</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">create</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useCreate</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">create</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">like</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Like<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="c1">// set params when calling the hook</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useCreate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">LikeButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">like</span> <span class="o">=</span> <span class="p">{</span> <span class="na">postId</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span> <span class="p">};</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">create</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useCreate</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">like</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">create</span><span class="si">}</span><span class="p">&gt;</span>Like<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="useupdate"><code class="language-plaintext highlighter-rouge">useUpdate</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">update</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdate</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">previousData</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">update()</code> method can be called in 3 different ways:</p>
<ul>
  <li>with the same parameters as the <code class="language-plaintext highlighter-rouge">useUpdate()</code> hook: <code class="language-plaintext highlighter-rouge">update(resource, id, data, previousData, options)</code></li>
  <li>with the same syntax as <code class="language-plaintext highlighter-rouge">useMutation</code>: <code class="language-plaintext highlighter-rouge">update({ resource, payload: { id, data, previousData } }, options)</code></li>
  <li>with no parameter (if they were already passed to useUpdate()): <code class="language-plaintext highlighter-rouge">update()</code></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// set params when calling the update callback</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">IncreaseLikeButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">diff</span> <span class="o">=</span> <span class="p">{</span> <span class="na">likes</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">likes</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">update</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdate</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">update</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">diff</span><span class="p">,</span> <span class="nx">record</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Like<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="c1">// or set params when calling the hook</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">IncreaseLikeButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">diff</span> <span class="o">=</span> <span class="p">{</span> <span class="na">likes</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">likes</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">update</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdate</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">diff</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">update</span><span class="si">}</span><span class="p">&gt;</span>Like<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="useupdatemany"><code class="language-plaintext highlighter-rouge">useUpdateMany</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">updateMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdateMany</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">updateMany()</code> function can be called in 3 different ways:</p>
<ul>
  <li>with the same parameters as the <code class="language-plaintext highlighter-rouge">useUpdateMany()</code> hook: <code class="language-plaintext highlighter-rouge">update(resource, ids, data, options)</code></li>
  <li>with the same syntax as <code class="language-plaintext highlighter-rouge">useMutation</code>: <code class="language-plaintext highlighter-rouge">update({ resource, payload: { ids, data } }, options)</code></li>
  <li>with no parameter (if they were already passed to <code class="language-plaintext highlighter-rouge">useUpdateMany()</code>): <code class="language-plaintext highlighter-rouge">updateMany()</code></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// set params when calling the updateMany callback</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdateMany</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">BulkResetViewsButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">selectedIds</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">updateMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdateMany</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">updateMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">selectedIds</span><span class="p">,</span> <span class="p">{</span> <span class="na">views</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Reset views<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="c1">// set params when calling the hook</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdateMany</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">BulkResetViewsButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">selectedIds</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">updateMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdateMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">selectedIds</span><span class="p">,</span> <span class="p">{</span> <span class="na">views</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">updateMany</span><span class="si">}</span><span class="p">&gt;</span>Reset views<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usedelete"><code class="language-plaintext highlighter-rouge">useDelete</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">deleteOne</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDelete</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">previousData</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">deleteOne()</code> function can be called in 3 different ways:</p>
<ul>
  <li>with the same parameters as the <code class="language-plaintext highlighter-rouge">useDelete()</code> hook: <code class="language-plaintext highlighter-rouge">deleteOne(resource, id, previousData, options)</code></li>
  <li>with the same syntax as <code class="language-plaintext highlighter-rouge">useMutation</code>: <code class="language-plaintext highlighter-rouge">deleteOne({ resource, payload: { id, previousData } }, options)</code></li>
  <li>with no parameter (if they were already passed to <code class="language-plaintext highlighter-rouge">useDelete()</code>): <code class="language-plaintext highlighter-rouge">deleteOne()</code></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// set params when calling the deleteOne callback</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDelete</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DeleteButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">deleteOne</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDelete</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">deleteOne</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">record</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Delete<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="c1">// set params when calling the hook</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDelete</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DeleteButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">deleteOne</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDelete</span><span class="p">(</span><span class="dl">'</span><span class="s1">likes</span><span class="dl">'</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">record</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">deleteOne</span><span class="si">}</span><span class="p">&gt;</span>Delete<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="usedeletemany"><code class="language-plaintext highlighter-rouge">useDeleteMany</code></h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// syntax</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">deleteMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">loaded</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDeleteMany</span><span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">ids</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">deleteMany()</code> function can be called in 3 different ways:</p>
<ul>
  <li>with the same parameters as the <code class="language-plaintext highlighter-rouge">useDeleteMany()</code> hook: <code class="language-plaintext highlighter-rouge">deleteMany(resource, ids, options)</code></li>
  <li>with the same syntax as <code class="language-plaintext highlighter-rouge">useMutation</code>: <code class="language-plaintext highlighter-rouge">deleteMany({ resource, payload: { ids } }, options)</code></li>
  <li>with no parameter (if they were already passed to <code class="language-plaintext highlighter-rouge">useDeleteMany()</code>): <code class="language-plaintext highlighter-rouge">deleteMany()</code></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// set params when calling the dleteMany callback</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDeleteMany</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">BulkDeletePostsButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">selectedIds</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">deleteMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDeleteMany</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">deleteMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">selectedIds</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">deleteMany</span><span class="si">}</span><span class="p">&gt;</span>Delete selected posts<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="c1">// set params when calling the hook</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDeleteMany</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">BulkDeletePostsButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">selectedIds</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">deleteMany</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useDeleteMany</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span> <span class="nx">selectedIds</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>ERROR<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span> <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">deleteMany</span><span class="si">}</span><span class="p">&gt;</span>Delete selected posts<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="synchronizing-dependant-queries">Synchronizing Dependant Queries</h2>
<p><code class="language-plaintext highlighter-rouge">useQuery</code> and all its corresponding specialized hooks support an <code class="language-plaintext highlighter-rouge">enabled</code> option. This is useful if you need to have a query executed only when a condition is met. For example, in the following example, we only fetch the categories if we have at least one post:</p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fetch posts</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">ids</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">posts</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">isLoading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetList</span><span class="p">(</span>
    <span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">20</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{}</span>
<span class="p">);</span>

<span class="c1">// then fetch categories for these posts</span>
<span class="kd">const</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="nx">categories</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">isLoadingCategories</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useGetMany</span><span class="p">(</span>
    <span class="dl">'</span><span class="s1">categories</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">ids</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">id</span><span class="o">=&gt;</span> <span class="nx">posts</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">category_id</span><span class="p">),</span>
    <span class="c1">// run only if the first query returns non-empty result</span>
    <span class="p">{</span> <span class="na">enabled</span><span class="p">:</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="handling-side-effects-in-usedataprovider">Handling Side Effects In <code class="language-plaintext highlighter-rouge">useDataProvider</code></h2>

<p><code class="language-plaintext highlighter-rouge">useDataProvider</code> returns a <code class="language-plaintext highlighter-rouge">dataProvider</code> object. Each call to its method return a Promise, allowing adding business logic on success in <code class="language-plaintext highlighter-rouge">then()</code>, and on failure in <code class="language-plaintext highlighter-rouge">catch()</code>.</p>

<p>For instance, here is another version of the <code class="language-plaintext highlighter-rouge">&lt;ApproveButton&gt;</code>  based on <code class="language-plaintext highlighter-rouge">useDataProvider</code> that notifies the user of success or failure using the bottom notification banner:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDataProvider</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">useRedirect</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">dataProvider</span> <span class="o">=</span> <span class="nx">useDataProvider</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">approve</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">dataProvider</span>
        <span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// success side effects go here</span>
            <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/comments</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Comment approved</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// failure side effects go here </span>
            <span class="nx">notify</span><span class="p">(</span><span class="s2">`Comment approval error: </span><span class="p">${</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">});</span>
    
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Fetching data is called a <em>side effect</em>, since it calls the outside world, and is asynchronous. Usual actions may have other side effects, like showing a notification, or redirecting the user to another page. React-admin provides the following hooks to handle most common side effects:</p>

<ul>
  <li><a href="#usenotify"><code class="language-plaintext highlighter-rouge">useNotify</code></a>: Return a function to display a notification.</li>
  <li><a href="#useredirect"><code class="language-plaintext highlighter-rouge">useRedirect</code></a>: Return a function to redirect the user to another page.</li>
  <li><a href="#userefresh"><code class="language-plaintext highlighter-rouge">useRefresh</code></a>: Return a function to force a rerender of the current view (equivalent to pressing the Refresh button).</li>
  <li><a href="#useunselectall"><code class="language-plaintext highlighter-rouge">useUnselectAll</code></a>: Return a function to unselect all lines in the current <code class="language-plaintext highlighter-rouge">Datagrid</code>.</li>
</ul>

<h3 id="usenotify"><code class="language-plaintext highlighter-rouge">useNotify</code></h3>

<p>This hook returns a function that displays a notification in the bottom of the page.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useNotify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">NotifyButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">notify</span><span class="p">(</span><span class="s2">`Comment approved`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">success</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Notify<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The callback takes 5 arguments:</p>
<ul>
  <li>the message to display</li>
  <li>the level of the notification (<code class="language-plaintext highlighter-rouge">info</code>, <code class="language-plaintext highlighter-rouge">success</code> or <code class="language-plaintext highlighter-rouge">warning</code> - the default is <code class="language-plaintext highlighter-rouge">info</code>)</li>
  <li>an <code class="language-plaintext highlighter-rouge">options</code> object to pass to the <code class="language-plaintext highlighter-rouge">translate</code> function (because notification messages are translated if your admin has an <code class="language-plaintext highlighter-rouge">i18nProvider</code>). It is useful for inserting variables into the translation.</li>
  <li>an <code class="language-plaintext highlighter-rouge">undoable</code> boolean. Set it to <code class="language-plaintext highlighter-rouge">true</code> if the notification should contain an “undo” button</li>
  <li>a <code class="language-plaintext highlighter-rouge">duration</code> number. Set it to <code class="language-plaintext highlighter-rouge">0</code> if the notification should not be dismissible.</li>
</ul>

<p>Here are more examples of <code class="language-plaintext highlighter-rouge">useNotify</code> calls:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// notify a warning</span>
<span class="nx">notify</span><span class="p">(</span><span class="s2">`This is a warning`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// pass translation arguments</span>
<span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">item.created</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span> <span class="p">});</span>
<span class="c1">// send an undoable notification</span>
<span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Element updated</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: When using <code class="language-plaintext highlighter-rouge">useNotify</code> as a side effect for an <code class="language-plaintext highlighter-rouge">undoable</code> Edit form, you MUST set the fourth argument to <code class="language-plaintext highlighter-rouge">true</code>, otherwise the “undo” button will not appear, and the actual update will never occur.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">Edit</span><span class="p">,</span> <span class="nx">SimpleForm</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostEdit</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">onSuccess</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">notify</span><span class="p">(</span><span class="s2">`Changes saved`</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Edit</span> <span class="na">undoable</span> <span class="na">onSuccess</span><span class="p">=</span><span class="si">{</span><span class="nx">onSuccess</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">SimpleForm</span><span class="p">&gt;</span>
                ...
            <span class="p">&lt;/</span><span class="nc">SimpleForm</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Edit</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="useredirect"><code class="language-plaintext highlighter-rouge">useRedirect</code></h3>

<p>This hook returns a function that redirects the user to another page.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRedirect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DashboardButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Dashboard<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The callback takes 3 arguments:</p>
<ul>
  <li>the page to redirect the user to (‘list’, ‘create’, ‘edit’, ‘show’, or a custom path)</li>
  <li>the current <code class="language-plaintext highlighter-rouge">basePath</code></li>
  <li>the <code class="language-plaintext highlighter-rouge">id</code> of the record to redirect to (if any)</li>
</ul>

<p>Here are more examples of <code class="language-plaintext highlighter-rouge">useRedirect</code> calls:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// redirect to the post list page</span>
<span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">list</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/posts</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// redirect to the edit page of a post:</span>
<span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">edit</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/posts</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="c1">// redirect to the post creation page:</span>
<span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">create</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/posts</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Note that <code class="language-plaintext highlighter-rouge">useRedirect</code> doesn’t allow to redirect to pages outside the current React app. For that, you should use <code class="language-plaintext highlighter-rouge">document.location</code>.</p>

<h3 id="userefresh"><code class="language-plaintext highlighter-rouge">useRefresh</code></h3>

<p>This hook returns a function that forces a rerender of the current view.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRefresh</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">RefreshButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">refresh</span> <span class="o">=</span> <span class="nx">useRefresh</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">refresh</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Refresh<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>To make this work, react-admin stores a <code class="language-plaintext highlighter-rouge">version</code> number in its state. The <code class="language-plaintext highlighter-rouge">useDataProvider()</code> hook uses this <code class="language-plaintext highlighter-rouge">version</code> in its effect dependencies. Also, page components use the <code class="language-plaintext highlighter-rouge">version</code> as <code class="language-plaintext highlighter-rouge">key</code>. The <code class="language-plaintext highlighter-rouge">refresh</code> callback increases the <code class="language-plaintext highlighter-rouge">version</code>, which forces a re-execution all queries based on the <code class="language-plaintext highlighter-rouge">useDataProvider()</code> hook, and a rerender of all components using the <code class="language-plaintext highlighter-rouge">version</code> as key.</p>

<p>This means that you can make any component inside a react-admin app refreshable by using the right key:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useVersion</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">version</span> <span class="o">=</span> <span class="nx">useVersion</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">version</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The callback takes 1 argument:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">hard</code>: when set to true, the callback empties the cache, too</li>
</ul>

<h3 id="useunselectall"><code class="language-plaintext highlighter-rouge">useUnselectAll</code></h3>

<p>This hook returns a function that unselects all lines in the current <code class="language-plaintext highlighter-rouge">Datagrid</code>. Pass the name of the resource as argument.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useUnselectAll</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UnselectAllButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">unselectAll</span> <span class="o">=</span> <span class="nx">useUnselectAll</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">unselectAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">posts</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span><span class="p">&gt;</span>Unselect all<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="handling-side-effects-in-other-hooks">Handling Side Effects In Other Hooks</h2>

<p>The other hooks presented in this chapter, starting with <code class="language-plaintext highlighter-rouge">useQuery</code>, don’t expose the <code class="language-plaintext highlighter-rouge">dataProvider</code> Promise. To allow for side effects with these hooks, they all accept an additional <code class="language-plaintext highlighter-rouge">options</code> argument. It’s an object with <code class="language-plaintext highlighter-rouge">onSuccess</code> and <code class="language-plaintext highlighter-rouge">onFailure</code> functions, that react-admin executes on success… or on failure.</p>

<p>So an <code class="language-plaintext highlighter-rouge">&lt;ApproveButton&gt;</code> written with <code class="language-plaintext highlighter-rouge">useMutation</code> instead of <code class="language-plaintext highlighter-rouge">useDataProvider</code> can specify side effects as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useMutation</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">useRedirect</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">approve</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useMutation</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">resource</span><span class="p">:</span> <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">payload</span><span class="p">:</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="na">onSuccess</span><span class="p">:</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/comments</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Comment approved</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="na">onFailure</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">notify</span><span class="p">(</span><span class="s2">`Comment approval error: </span><span class="p">${</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">),</span>
        <span class="p">}</span>
    <span class="p">);</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="optimistic-rendering-and-undo">Optimistic Rendering and Undo</h2>

<p>In the previous example, after clicking on the “Approve” button, a loading spinner appears while the data provider is fetched. Then, users are redirected to the comments list. But in most cases, the server returns a success response, so the user waits for this response for nothing.</p>

<p>This is called <strong>pessimistic rendering</strong>, as all users are forced to wait because of the (usually rare) possibility of server failure.</p>

<p>An alternative mode for mutations is <strong>optimistic rendering</strong>. The idea is to handle the calls to the <code class="language-plaintext highlighter-rouge">dataProvider</code> on the client side first (i.e. updating entities in the Redux store), and re-render the screen immediately. The user sees the effect of their action with no delay. Then, react-admin applies the success side effects, and only after that, it triggers the call to the data provider. If the fetch ends with a success, react-admin does nothing more than a refresh to grab the latest data from the server. In most cases, the user sees no difference (the data in the Redux store and the data from the <code class="language-plaintext highlighter-rouge">dataProvider</code> are the same). If the fetch fails, react-admin shows an error notification, and forces a refresh, too.</p>

<p>A third mutation mode is called <strong>undoable</strong>. It’s like optimistic rendering, but with an added feature: after applying the changes and the side effects locally, react-admin <em>waits</em> for a few seconds before triggering the call to the <code class="language-plaintext highlighter-rouge">dataProvider</code>. During this delay, the end user sees an “undo” button that, when clicked, cancels the call to the <code class="language-plaintext highlighter-rouge">dataProvider</code> and refreshes the screen.</p>

<p>Here is a quick recap of the three mutation modes:</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>pessimistic</th>
      <th>optimistic</th>
      <th>undoable</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dataProvider call</td>
      <td>immediate</td>
      <td>immediate</td>
      <td>delayed</td>
    </tr>
    <tr>
      <td>local changes</td>
      <td>when dataProvider returns</td>
      <td>immediate</td>
      <td>immediate</td>
    </tr>
    <tr>
      <td>side effects</td>
      <td>when dataProvider returns</td>
      <td>immediate</td>
      <td>immediate</td>
    </tr>
    <tr>
      <td>cancellable</td>
      <td>no</td>
      <td>no</td>
      <td>yes</td>
    </tr>
  </tbody>
</table>

<p>By default, react-admin uses the undoable mode for the Edit view. For the Create view, react-admin needs to wait for the response to know the id of the resource to redirect to, so the mutation mode is pessimistic.</p>

<p>You can benefit from optimistic and undoable modes when you call the <code class="language-plaintext highlighter-rouge">useMutation</code> hook, too. You just need to pass a <code class="language-plaintext highlighter-rouge">mutationMode</code> value in the <code class="language-plaintext highlighter-rouge">options</code> parameter:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import * as React from "react";
import { useMutation, useNotify, useRedirect, Button } from 'react-admin';
</span>
const ApproveButton = ({ record }) =&gt; {
    const notify = useNotify();
    const redirect = useRedirect();
    const [approve, { loading }] = useMutation(
        {
            type: 'update',
            resource: 'comments',
            payload: { id: record.id, data: { isApproved: true } },
        },
        {
<span class="gi">+           mutationMode: 'undoable',
</span><span class="gd">-           onSuccess: ({ data }) =&gt; {
</span><span class="gi">+           onSuccess: () =&gt; {
</span>                redirect('/comments');
<span class="gd">-               notify('Comment approved');
</span><span class="gi">+               notify('Comment approved', 'info', {}, true);
</span>            },
            onFailure: (error) =&gt; notify(`Error: ${error.message}`, 'warning'),
        }
    );
    return &lt;Button label="Approve" onClick={approve} disabled={loading} /&gt;;
<span class="err">};</span>
</code></pre></div></div>

<p>As you can see in this example, you need to tweak the notification for undoable calls: passing <code class="language-plaintext highlighter-rouge">true</code> as fourth parameter of <code class="language-plaintext highlighter-rouge">notify</code> displays the ‘Undo’ button in the notification. Also, as side effects are executed immediately, they can’t rely on the response being passed to onSuccess.</p>

<p>You can pass the <code class="language-plaintext highlighter-rouge">mutationMode</code> option parameter to specialized hooks, too. They all accept an optional last argument with side effects.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useUpdate</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">useRedirect</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">approve</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">useUpdate</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">comments</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="p">{</span> <span class="na">isApproved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="nx">record</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="na">mutationMode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">undoable</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">onSuccess</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/comments</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Comment approved</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="p">{},</span> <span class="kc">true</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="na">onFailure</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">notify</span><span class="p">(</span><span class="s2">`Error: </span><span class="p">${</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">),</span>
        <span class="p">}</span>
    <span class="p">);</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="customizing-the-redux-action">Customizing the Redux Action</h2>

<p>The <code class="language-plaintext highlighter-rouge">useDataProvider</code> hook dispatches redux actions on load, on success, and on error. By default, these actions are called:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CUSTOM_FETCH_LOAD</code></li>
  <li><code class="language-plaintext highlighter-rouge">CUSTOM_FETCH_SUCCESS</code></li>
  <li><code class="language-plaintext highlighter-rouge">CUSTOM_FETCH_FAILURE</code></li>
</ul>

<p>React-admin doesn’t have any reducer watching these actions. You can write a custom reducer for these actions to store the return of the Data Provider in Redux. But the best way to do so is to set the hooks dispatch a custom action instead of <code class="language-plaintext highlighter-rouge">CUSTOM_FETCH</code>. Use the <code class="language-plaintext highlighter-rouge">action</code> option for that purpose:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import * as React from "react";
import { useUpdate, useNotify, useRedirect, Button } from 'react-admin';
</span>
const ApproveButton = ({ record }) =&gt; {
    const notify = useNotify();
    const redirect = useRedirect();
    const [approve, { loading }] = useUpdate(
        'comments',
        record.id,
        { isApproved: true },
        {
<span class="gi">+           action: 'MY_CUSTOM_ACTION',
</span>            mutationMode: 'undoable',
            onSuccess: ({ data }) =&gt; {
                redirect('/comments');
                notify('Comment approved', 'info', {}, true);
            },
            onFailure: (error) =&gt; notify(`Error: ${error.message}`, 'warning'),
        }
    );
    return &lt;Button label="Approve" onClick={approve} disabled={loading} /&gt;;
<span class="err">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: When using the Data Provider hooks for regular pages (List, Edit, etc), react-admin always specifies a custom action name, related to the component asking for the data. For instance, in the <code class="language-plaintext highlighter-rouge">&lt;List&gt;</code> page, the action is called <code class="language-plaintext highlighter-rouge">CRUD_GET_LIST</code>. So unless you call the Data Provider hooks yourself, no <code class="language-plaintext highlighter-rouge">CUSTOM_FETCH</code> action should be dispatched.</p>

<h2 id="legacy-components-query-mutation-and-withdataprovider">Legacy Components: <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Mutation&gt;</code>, and <code class="language-plaintext highlighter-rouge">withDataProvider</code></h2>

<p>Before react had hooks, react-admin used render props and higher order components to provide the same functionality. Legacy code will likely contain instances of <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;Mutation&gt;</code>, and <code class="language-plaintext highlighter-rouge">withDataProvider</code>. Their syntax, which is identical to their hook counterpart, is illustrated below.</p>

<p>You can fetch and display a user profile using the <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code> component, which uses render props:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Loading</span><span class="p">,</span> <span class="nb">Error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">UserProfile</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Query</span> <span class="na">type</span><span class="p">=</span><span class="s">'getOne'</span> <span class="na">resource</span><span class="p">=</span><span class="s">'users'</span> <span class="na">payload</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="p">({</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Error</span> <span class="p">/&gt;;</span> <span class="p">}</span>
            <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>User <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">username</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
        <span class="p">}</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">Query</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Or, query a user list on the dashboard with the same <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Loading</span><span class="p">,</span> <span class="nb">Error</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">pagination</span><span class="p">:</span> <span class="p">{</span> <span class="na">page</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">perPage</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
   <span class="na">sort</span><span class="p">:</span> <span class="p">{</span> <span class="na">field</span><span class="p">:</span> <span class="dl">'</span><span class="s1">username</span><span class="dl">'</span><span class="p">,</span> <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ASC</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">UserList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Query</span> <span class="na">type</span><span class="p">=</span><span class="s">'getList'</span> <span class="na">resource</span><span class="p">=</span><span class="s">'users'</span> <span class="na">payload</span><span class="p">=</span><span class="si">{</span><span class="nx">payload</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="p">({</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Loading</span> <span class="p">/&gt;;</span> <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Error</span> <span class="p">/&gt;;</span> <span class="p">}</span>
            <span class="k">return</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Total users: <span class="si">{</span><span class="nx">total</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                        <span class="si">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;)</span><span class="si">}</span>
                    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">);</span>
        <span class="p">}</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">Query</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Just like <code class="language-plaintext highlighter-rouge">useQuery</code>, the <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code> component expects three parameters: <code class="language-plaintext highlighter-rouge">type</code>, <code class="language-plaintext highlighter-rouge">resource</code>, and <code class="language-plaintext highlighter-rouge">payload</code>. It fetches the data provider on mount, and passes the data to its child component once the response from the API arrives.</p>

<p>And if you need to chain API calls, don’t hesitate to nest <code class="language-plaintext highlighter-rouge">&lt;Query&gt;</code> components.</p>

<p>When calling the API to update (“mutate”) data, use the <code class="language-plaintext highlighter-rouge">&lt;Mutation&gt;</code> component instead. It passes a callback to trigger the API call to its child function.</p>

<p>Here is a version of the <code class="language-plaintext highlighter-rouge">&lt;ApproveButton&gt;</code> component demonstrating <code class="language-plaintext highlighter-rouge">&lt;Mutation&gt;</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Mutation</span><span class="p">,</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">useRedirect</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="p">...</span><span class="nx">record</span><span class="p">,</span> <span class="na">is_approved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">};</span>
    <span class="kd">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">mutationMode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">undoable</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">onSuccess</span><span class="p">:</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Comment approved</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="p">{},</span> <span class="kc">true</span><span class="p">);</span>
            <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/comments</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="na">onFailure</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">notify</span><span class="p">(</span><span class="s2">`Error: </span><span class="p">${</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">),</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Mutation</span>
            <span class="na">type</span><span class="p">=</span><span class="s">'update'</span>
            <span class="na">resource</span><span class="p">=</span><span class="s">'comments'</span>
            <span class="na">payload</span><span class="p">=</span><span class="si">{</span><span class="nx">payload</span><span class="si">}</span>
            <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="nx">options</span><span class="si">}</span>
        <span class="p">&gt;</span>
            <span class="si">{</span><span class="p">(</span><span class="nx">approve</span><span class="p">,</span> <span class="p">{</span> <span class="nx">loading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">'Approve'</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">approve</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Mutation</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ApproveButton</span><span class="p">;</span>
</code></pre></div></div>

<p>And here is the <code class="language-plaintext highlighter-rouge">&lt;UserProfile&gt;</code> component using the <code class="language-plaintext highlighter-rouge">withDataProvider</code> HOC instead of the <code class="language-plaintext highlighter-rouge">useDataProvider</code> hook:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import { useState, useEffect } from 'react';
</span><span class="gd">-import { useDataProvider } from 'react-admin';
</span><span class="gi">+import { withDataProvider } from 'react-admin';
</span>
-const UserProfile = ({ userId }) =&gt; {
<span class="gi">+const UserProfile = ({ userId, dataProvider }) =&gt; {
</span><span class="gd">-   const dataProvider = useDataProvider();
</span>    const [user, setUser] = useState();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState();
    useEffect(() =&gt; {
        dataProvider.getOne('users', { id: userId })
            .then(({ data }) =&gt; {
                setUser(data);
                setLoading(false);
            })
            .catch(error =&gt; {
                setError(error);
                setLoading(false);
            })
    }, []);

    if (loading) return &lt;Loading /&gt;;
    if (error) return &lt;Error /&gt;;
    if (!user) return null;

    return (
        &lt;ul&gt;
            &lt;li&gt;Name: {user.name}&lt;/li&gt;
            &lt;li&gt;Email: {user.email}&lt;/li&gt;
        &lt;/ul&gt;
    )
<span class="err">};</span>

<span class="gd">-export default UserProfile;
</span><span class="gi">+export default withDataProvider(UserProfile);
</span></code></pre></div></div>

<p>Note that these components are implemented in react-admin using the hooks described earlier. If you’re writing new components, prefer the hooks, which are faster, and do not pollute the component tree.</p>

<h2 id="querying-the-api-with-fetch">Querying The API With <code class="language-plaintext highlighter-rouge">fetch</code></h2>

<p><code class="language-plaintext highlighter-rouge">useQuery</code>, <code class="language-plaintext highlighter-rouge">useMutation</code> and <code class="language-plaintext highlighter-rouge">useDataProvider</code> are “the react-admin way” to query the API, but nothing prevents you from using <code class="language-plaintext highlighter-rouge">fetch</code> if you want. For instance, when you don’t want to add some routing logic to the data provider for an RPC method on your API, that makes perfect sense.</p>

<p>There is no special react-admin sauce in that case. Here is an example implementation of calling <code class="language-plaintext highlighter-rouge">fetch</code> in a component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/comments/ApproveButton.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNotify</span><span class="p">,</span> <span class="nx">useRedirect</span><span class="p">,</span> <span class="nx">fetchStart</span><span class="p">,</span> <span class="nx">fetchEnd</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ApproveButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nx">useDispatch</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">redirect</span> <span class="o">=</span> <span class="nx">useRedirect</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">notify</span> <span class="o">=</span> <span class="nx">useNotify</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchStart</span><span class="p">());</span> <span class="c1">// start the global loading indicator </span>
        <span class="kd">const</span> <span class="nx">updatedRecord</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">record</span><span class="p">,</span> <span class="na">is_approved</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="s2">`/comments/</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span> <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span> <span class="na">body</span><span class="p">:</span> <span class="nx">updatedRecord</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Comment approved</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/comments</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">notify</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error: comment not approved</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">finally</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
                <span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchEnd</span><span class="p">());</span> <span class="c1">// stop the global loading indicator</span>
            <span class="p">});</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">label</span><span class="p">=</span><span class="s">"Approve"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">handleClick</span><span class="si">}</span> <span class="na">disabled</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ApproveButton</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>TIP</strong>: APIs often require a bit of HTTP plumbing to deal with authentication, query parameters, encoding, headers, etc. It turns out you probably already have a function that maps from a REST request to an HTTP request: your <a href="./DataProviders.md">Data Provider</a>. So it’s often better to use <code class="language-plaintext highlighter-rouge">useDataProvider</code> instead of <code class="language-plaintext highlighter-rouge">fetch</code>.</p>
:ET