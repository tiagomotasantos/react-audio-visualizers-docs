I"nÔ<h1 id="the-show-view">The Show View</h1>

<p>The Show view displays a record fetched from the API in a read-only fashion. It delegates the actual rendering of the record to a layout component - usually <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>. This layout component uses its children (<a href="./Fields.md"><code class="language-plaintext highlighter-rouge">&lt;Fields&gt;</code></a> components) to render each record field.</p>

<p><img src="./img/show-view.png" alt="post show view" /></p>

<h2 id="the-show-component">The <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component</h2>

<p>The <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component renders the page title and actions, and fetches the record from the REST API. It is not responsible for rendering the actual record - that‚Äôs the job of its child component (usually <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>), to which they pass the <code class="language-plaintext highlighter-rouge">record</code> as prop.</p>

<p>Here are all the props accepted by the <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component:</p>

<ul>
  <li><a href="#page-title"><code class="language-plaintext highlighter-rouge">title</code></a></li>
  <li><a href="#actions"><code class="language-plaintext highlighter-rouge">actions</code></a></li>
  <li><a href="#aside-component"><code class="language-plaintext highlighter-rouge">aside</code></a></li>
  <li><a href="#component"><code class="language-plaintext highlighter-rouge">component</code></a></li>
</ul>

<h3 id="css-api">CSS API</h3>

<p>The <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component accepts the usual <code class="language-plaintext highlighter-rouge">className</code> prop but you can override many class names injected to the inner components by React-admin thanks to the <code class="language-plaintext highlighter-rouge">classes</code> property (as most Material UI components, see their <a href="https://material-ui.com/customization/components/#overriding-styles-with-classes">documentation about it</a>). This property accepts the following keys:</p>

<table>
  <thead>
    <tr>
      <th>Rule name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">root</code></td>
      <td>Alternative to using <code class="language-plaintext highlighter-rouge">className</code>. Applied to the root element</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">main</code></td>
      <td>Applied to the main container</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">noActions</code></td>
      <td>Applied to the main container when <code class="language-plaintext highlighter-rouge">actions</code> prop is <code class="language-plaintext highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">card</code></td>
      <td>Applied to the child component inside the main container (Material UI‚Äôs <code class="language-plaintext highlighter-rouge">Card</code> by default)</td>
    </tr>
  </tbody>
</table>

<p>To override the style of all instances of <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> using the <a href="https://material-ui.com/customization/globals/#css">material-ui style overrides</a>, use the <code class="language-plaintext highlighter-rouge">RaShow</code> key.</p>

<p>Here is the minimal code necessary to display a view to show a post:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">jsonServerProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-json-server</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">PostCreate</span><span class="p">,</span> <span class="nx">PostEdit</span><span class="p">,</span> <span class="nx">PostShow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">jsonServerProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">show</span><span class="p">=</span><span class="si">{</span><span class="nx">PostShow</span><span class="si">}</span> <span class="na">create</span><span class="p">=</span><span class="si">{</span><span class="nx">PostCreate</span><span class="si">}</span> <span class="na">edit</span><span class="p">=</span><span class="si">{</span><span class="nx">PostEdit</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>

<span class="c1">// in src/posts.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Show</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">DateField</span><span class="p">,</span> <span class="nx">RichTextField</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"teaser"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Publication date"</span> <span class="na">source</span><span class="p">=</span><span class="s">"created_at"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>That‚Äôs enough to display the post show view:</p>

<p><img src="./img/post-show.png" alt="post show view" /></p>

<h3 id="page-title">Page Title</h3>

<p>By default, the title for the Show view is ‚Äú[resource_name] #[record_id]‚Äù.</p>

<p>You can customize this title by specifying a custom <code class="language-plaintext highlighter-rouge">title</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">title</span><span class="p">=</span><span class="s">"Post view"</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>More interestingly, you can pass a component as <code class="language-plaintext highlighter-rouge">title</code>. React-admin clones this component and, in the <code class="language-plaintext highlighter-rouge">&lt;ShowView&gt;</code>, injects the current <code class="language-plaintext highlighter-rouge">record</code>. This allows to customize the title according to the current record:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PostTitle</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">record</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>Post <span class="si">{</span><span class="nx">record</span> <span class="p">?</span> <span class="s2">`"</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="s2">"`</span> <span class="p">:</span> <span class="dl">''</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;;</span>
<span class="p">};</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">title</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">PostTitle</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="actions">Actions</h3>

<p>You can replace the list of default actions by your own component using the <code class="language-plaintext highlighter-rouge">actions</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Button</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Button</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">EditButton</span><span class="p">,</span> <span class="nx">TopToolbar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostShowActions</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">basePath</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">resource</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">TopToolbar</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="na">basePath</span><span class="p">=</span><span class="si">{</span><span class="nx">basePath</span><span class="si">}</span> <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="si">{</span><span class="cm">/* Add your custom actions */</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">color</span><span class="p">=</span><span class="s">"primary"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">customAction</span><span class="si">}</span><span class="p">&gt;</span>Custom Action<span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">TopToolbar</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">actions</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">PostShowActions</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="aside-component">Aside component</h3>

<p><img src="./img/aside.png" alt="Aside component" /></p>

<p>You may want to display additional information on the side of the resource detail. Use the <code class="language-plaintext highlighter-rouge">aside</code> prop for that, passing the element of your choice:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Aside</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">margin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1em</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"h6"</span><span class="p">&gt;</span>Post details<span class="p">&lt;/</span><span class="nc">Typography</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"body2"</span><span class="p">&gt;</span>
            Posts will only be published once an editor approves them
        <span class="p">&lt;/</span><span class="nc">Typography</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">aside</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">Aside</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>You can use the <code class="language-plaintext highlighter-rouge">useRecordContext</code> hook to display non-editable details about the current record in the aside component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Aside</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">record</span> <span class="o">=</span> <span class="nx">useRecordContext</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">margin</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1em</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"h6"</span><span class="p">&gt;</span>Post details<span class="p">&lt;/</span><span class="nc">Typography</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">record</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"body2"</span><span class="p">&gt;</span>
                    Creation date: <span class="si">{</span><span class="nx">record</span><span class="p">.</span><span class="nx">createdAt</span><span class="si">}</span>
                <span class="p">&lt;/</span><span class="nc">Typography</span><span class="p">&gt;</span>
            <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Tip</strong>: Always test the <code class="language-plaintext highlighter-rouge">record</code> is defined before using it, as react-admin starts rendering the UI before the API call is over.</p>

<h3 id="component">Component</h3>

<p>By default, the Show view renders the main content area inside a material-ui <code class="language-plaintext highlighter-rouge">&lt;Card&gt;</code> element. The actual layout of the area depends on the <code class="language-plaintext highlighter-rouge">ShowLayout</code> component you‚Äôre using (<code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code>, or a custom layout component).</p>

<p>Some layouts also use <code class="language-plaintext highlighter-rouge">Card</code>, in which case the user ends up seeing a card inside a card, which is bad UI. To avoid that, you can override the main area container by passing a <code class="language-plaintext highlighter-rouge">component</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// use a div as root component</span>
<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">component</span><span class="p">=</span><span class="s">"div"</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="c1">// use a custom component as root component </span>
<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">MyComponent</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        ...
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The default value for the <code class="language-plaintext highlighter-rouge">component</code> prop is <code class="language-plaintext highlighter-rouge">Card</code>.</p>

<h2 id="the-showguesser-component">The <code class="language-plaintext highlighter-rouge">&lt;ShowGuesser&gt;</code> component</h2>

<p>Instead of a custom <code class="language-plaintext highlighter-rouge">Show</code>, you can use the <code class="language-plaintext highlighter-rouge">ShowGuesser</code> to determine which fields to use based on the data returned by the API.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">,</span> <span class="nx">ShowGuesser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">jsonServerProvider</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ra-data-json-server</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">jsonServerProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span> <span class="na">show</span><span class="p">=</span><span class="si">{</span><span class="nx">ShowGuesser</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Just like <code class="language-plaintext highlighter-rouge">Show</code>, <code class="language-plaintext highlighter-rouge">ShowGuesser</code> fetches the data. It then analyzes the response, and guesses the fields it should use to display a basic page with the data. It also dumps the components it has guessed in the console, where you can copy it into your own code. Use this feature to quickly bootstrap a <code class="language-plaintext highlighter-rouge">Show</code> on top of an existing API, without adding the inputs one by one.</p>

<p><img src="./img/guessed-show.png" alt="Guessed Show" /></p>

<p>React-admin provides guessers for the <code class="language-plaintext highlighter-rouge">List</code> view (<code class="language-plaintext highlighter-rouge">ListGuesser</code>), the <code class="language-plaintext highlighter-rouge">Edit</code> view (<code class="language-plaintext highlighter-rouge">EditGuesser</code>), and the <code class="language-plaintext highlighter-rouge">Show</code> view (<code class="language-plaintext highlighter-rouge">ShowGuesser</code>).</p>

<p><strong>Tip</strong>: Do not use the guessers in production. They are slower than manually-defined components, because they have to infer types based on the content. Besides, the guesses are not always perfect.</p>

<h2 id="useshowcontroller"><code class="language-plaintext highlighter-rouge">useShowController</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component takes care of two things:</p>

<ol>
  <li>(the ‚Äúcontroller‚Äù) Fetching data based on the URL and transforming it</li>
  <li>(the ‚Äúview‚Äù) Rendering the page title, the actions, the content and aside areas</li>
</ol>

<p>In some cases, you may want to customize the view entirely (i.e. keep the code for step 1, and provide your own code for step 2). For these cases, react-admin provides a hook called <code class="language-plaintext highlighter-rouge">useShowController()</code>, which contains just the controller part of the <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component.</p>

<p>This hook takes one object as input (the props passed to a <code class="language-plaintext highlighter-rouge">&lt;Show&gt;</code> component) and returns the fetched data for the Show view. You can use it to create your own custom Show view, like this one:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useShowController</span><span class="p">,</span> <span class="nx">SimpleShowLayout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span>
        <span class="nx">basePath</span><span class="p">,</span> <span class="c1">// deduced from the location, useful for action buttons</span>
        <span class="nx">defaultTitle</span><span class="p">,</span> <span class="c1">// the translated title based on the resource, e.g. 'Post #123'</span>
        <span class="nx">loaded</span><span class="p">,</span> <span class="c1">// boolean that is false until the record is available</span>
        <span class="nx">loading</span><span class="p">,</span> <span class="c1">// boolean that is true on mount, and false once the record was fetched</span>
        <span class="nx">record</span><span class="p">,</span> <span class="c1">// record fetched via dataProvider.getOne() based on the id from the location</span>
        <span class="nx">resource</span><span class="p">,</span> <span class="c1">// the resource name, deduced from the location. e.g. 'posts'</span>
        <span class="nx">version</span><span class="p">,</span> <span class="c1">// integer used by the refresh feature</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">useShowController</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">defaultTitle</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">cloneElement</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="p">{</span>
                <span class="nx">basePath</span><span class="p">,</span>
                <span class="nx">record</span><span class="p">,</span>
                <span class="nx">resource</span><span class="p">,</span>
                <span class="nx">version</span><span class="p">,</span>
            <span class="p">})</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">MyShow</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            ...
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">MyShow</span><span class="p">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<p>This custom Show view has no action buttons or aside component - it‚Äôs up to you to add them in pure React.</p>

<p><strong>Tip</strong>: You don‚Äôt have to clone the child element. If you can‚Äôt reuse an existing form component like <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>, feel free to write the form code inside your custom <code class="language-plaintext highlighter-rouge">MyShow</code> component.</p>

<h2 id="the-simpleshowlayout-component">The <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code> component</h2>

<p>The <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code> component receives the <code class="language-plaintext highlighter-rouge">record</code> as prop from its parent component. It is responsible for rendering the actual view.</p>

<p>The <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code> renders its child components line by line (within <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> components) inside a material-ui <code class="language-plaintext highlighter-rouge">&lt;CardContent/&gt;</code>.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"nb_views"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>It accepts a <code class="language-plaintext highlighter-rouge">className</code> prop to let you override the style of the <code class="language-plaintext highlighter-rouge">&lt;CardContent/&gt;</code>.</p>

<h2 id="the-tabbedshowlayout-component">The <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> component</h2>

<p>Just like <code class="language-plaintext highlighter-rouge">&lt;SimpleShowLayout&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> receives the <code class="language-plaintext highlighter-rouge">record</code> prop and renders the actual view. However, the <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> component renders fields grouped by tab. The tabs are set by using <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> components, which expect a <code class="language-plaintext highlighter-rouge">label</code> and an optional <code class="language-plaintext highlighter-rouge">icon</code> prop. Switching tabs will update the current url. By default, it uses the tabs indexes and the first tab will be displayed at the root url. You can customize the path by providing a <code class="language-plaintext highlighter-rouge">path</code> prop to each <code class="language-plaintext highlighter-rouge">Tab</code> component. If you‚Äôd like the first one to act as an index page, just omit the <code class="language-plaintext highlighter-rouge">path</code> prop.</p>

<p><img src="./img/tabbed-show.gif" alt="tabbed show" /></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">TabbedShowLayout</span><span class="p">,</span> <span class="nx">Tab</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"summary"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Id"</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"teaser"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"body"</span> <span class="na">path</span><span class="p">=</span><span class="s">"body"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="na">addLabel</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"Miscellaneous"</span> <span class="na">path</span><span class="p">=</span><span class="s">"miscellaneous"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Password (if protected post)"</span> <span class="na">source</span><span class="p">=</span><span class="s">"password"</span> <span class="na">type</span><span class="p">=</span><span class="s">"password"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Publication date"</span> <span class="na">source</span><span class="p">=</span><span class="s">"published_at"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"average_note"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Allow comments?"</span> <span class="na">source</span><span class="p">=</span><span class="s">"commentable"</span> <span class="na">defaultValue</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Nb views"</span> <span class="na">source</span><span class="p">=</span><span class="s">"views"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">path</span><span class="p">=</span><span class="s">"comments"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span> <span class="na">addLabel</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"created_at"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>To style the tabs, the <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> component accepts two props:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">className</code> is passed to the tab <em>header</em></li>
  <li><code class="language-plaintext highlighter-rouge">contentClassName</code> is passed to the tab <em>content</em></li>
</ul>

<p>You can also opt out the location synchronization by passing <code class="language-plaintext highlighter-rouge">false</code> to the <code class="language-plaintext highlighter-rouge">syncWithLocation</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> component. This allows e.g. to have several <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> components in a page.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">TabbedShowLayout</span><span class="p">,</span> <span class="nx">Tab</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TabbedShowLayout</span> <span class="na">syncWithLocation</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"summary"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Id"</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"teaser"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"body"</span> <span class="na">path</span><span class="p">=</span><span class="s">"body"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="na">addLabel</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"Miscellaneous"</span> <span class="na">path</span><span class="p">=</span><span class="s">"miscellaneous"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Password (if protected post)"</span> <span class="na">source</span><span class="p">=</span><span class="s">"password"</span> <span class="na">type</span><span class="p">=</span><span class="s">"password"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Publication date"</span> <span class="na">source</span><span class="p">=</span><span class="s">"published_at"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"average_note"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Allow comments?"</span> <span class="na">source</span><span class="p">=</span><span class="s">"commentable"</span> <span class="na">defaultValue</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">label</span><span class="p">=</span><span class="s">"Nb views"</span> <span class="na">source</span><span class="p">=</span><span class="s">"views"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">path</span><span class="p">=</span><span class="s">"comments"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">ReferenceManyField</span> <span class="na">reference</span><span class="p">=</span><span class="s">"comments"</span> <span class="na">target</span><span class="p">=</span><span class="s">"post_id"</span> <span class="na">addLabel</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"created_at"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nc">ReferenceManyField</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: When <code class="language-plaintext highlighter-rouge">syncWithLocation</code> is <code class="language-plaintext highlighter-rouge">false</code>, the <code class="language-plaintext highlighter-rouge">path</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;Tab&gt;</code> components is ignored.</p>
<h3 id="tabs-element">Tabs element</h3>

<p>By default, <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> renders its tabs using <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayoutTabs&gt;</code>, an internal react-admin component. You can pass a custom component as the <code class="language-plaintext highlighter-rouge">tabs</code> prop to override that default. Also, props passed to <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayoutTabs&gt;</code> are passed to the material-ui‚Äôs <code class="language-plaintext highlighter-rouge">&lt;Tabs&gt;</code> component inside <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayoutTabs&gt;</code>. That means you can create a custom <code class="language-plaintext highlighter-rouge">tabs</code> component without copying several components from the react-admin source.</p>

<p>For instance, to make use of scrollable <code class="language-plaintext highlighter-rouge">&lt;Tabs&gt;</code>, you can pass a <code class="language-plaintext highlighter-rouge">variant="scrollable"</code> prop to <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayoutTabs&gt;</code> and use it in the <code class="language-plaintext highlighter-rouge">tabs</code> prop from <code class="language-plaintext highlighter-rouge">&lt;TabbedShowLayout&gt;</code> as follows:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
    <span class="nx">Show</span><span class="p">,</span>
    <span class="nx">TabbedShowLayout</span><span class="p">,</span>
    <span class="nx">TabbedShowLayoutTabs</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ScrollableTabbedShowLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TabbedShowLayout</span> <span class="na">tabs</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">TabbedShowLayoutTabs</span> <span class="na">variant</span><span class="p">=</span><span class="s">"scrollable"</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">&gt;</span>
            ...
        <span class="p">&lt;/</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ScrollableTabbedShowLayout</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="third-party-components">Third-Party Components</h2>

<p>You can find components for react-admin in third-party repositories.</p>

<ul>
  <li><a href="https://github.com/ValentinnDimitroff/ra-compact-ui#layouts">ra-compact-ui</a>: plugin that allows to have custom styled show layouts.</li>
</ul>

<h2 id="displaying-fields-depending-on-the-user-permissions">Displaying Fields depending on the user permissions</h2>

<p>You might want to display some fields only to users with specific permissions.</p>

<p>Before rendering the <code class="language-plaintext highlighter-rouge">Show</code> component, react-admin calls the <code class="language-plaintext highlighter-rouge">authProvider.getPermissions()</code> method, and passes the result to the component as the <code class="language-plaintext highlighter-rouge">permissions</code> prop. It‚Äôs up to your <code class="language-plaintext highlighter-rouge">authProvider</code> to return whatever you need to check roles and permissions inside your component.</p>

<p>Here‚Äôs an example inside a <code class="language-plaintext highlighter-rouge">Show</code> view with a <code class="language-plaintext highlighter-rouge">SimpleShowLayout</code> and a custom <code class="language-plaintext highlighter-rouge">actions</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">TopToolbar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/TopToolbar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Button</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Button</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">EditButton</span><span class="p">,</span> <span class="nx">DeleteButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">PostShowActions</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="nx">basePath</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">resource</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">TopToolbar</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="na">basePath</span><span class="p">=</span><span class="si">{</span><span class="nx">basePath</span><span class="si">}</span> <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
            <span class="p">&lt;</span><span class="nc">DeleteButton</span> <span class="na">basePath</span><span class="p">=</span><span class="si">{</span><span class="nx">basePath</span><span class="si">}</span> <span class="na">record</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="na">resource</span><span class="p">=</span><span class="si">{</span><span class="nx">resource</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">TopToolbar</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostShow</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="na">actions</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">PostShowActions</span> <span class="na">permissions</span><span class="p">=</span><span class="si">{</span><span class="nx">permissions</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">RichTextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"nb_views"</span> <span class="p">/&gt;</span>
            <span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">SimpleShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong> Note how the <code class="language-plaintext highlighter-rouge">permissions</code> prop is passed down to the custom <code class="language-plaintext highlighter-rouge">actions</code> component.</p>

<p>This also works inside a <code class="language-plaintext highlighter-rouge">TabbedShowLayout</code>, and you can hide a <code class="language-plaintext highlighter-rouge">Tab</code> completely:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">UserShow</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">permissions</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span>
    <span class="p">&lt;</span><span class="nc">Show</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"user.form.summary"</span><span class="p">&gt;</span>
                <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span><span class="si">}</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">permissions</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="o">&amp;&amp;</span>
                <span class="p">&lt;</span><span class="nc">Tab</span> <span class="na">label</span><span class="p">=</span><span class="s">"user.form.security"</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"role"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">Tab</span><span class="p">&gt;</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">TabbedShowLayout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Show</span><span class="p">&gt;;</span>
</code></pre></div></div>

:ET