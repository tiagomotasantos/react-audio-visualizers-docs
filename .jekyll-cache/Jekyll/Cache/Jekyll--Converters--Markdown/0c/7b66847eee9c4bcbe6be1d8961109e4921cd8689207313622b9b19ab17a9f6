I"|+<h1 id="faq">FAQ</h1>

<ul>
  <li><a href="#can-i-have-custom-identifiersprimary-keys-for-my-resources">Can I have custom identifiers/primary keys for my resources?</a></li>
  <li><a href="#i-get-warning-about-unique-key-for-child-in-array">I get warning about unique key for child in array</a></li>
  <li><a href="#how-can-i-customize-forms-depending-on-its-inputs-values">How can I customize forms depending on its inputs values?</a></li>
  <li><a href="#ui-in-production-build-is-empty-or-broke">UI in production build is empty or broke</a></li>
  <li><a href="#my-resource-is-defined-but-not-displayed-on-the-menu">My Resource is defined but not displayed on the Menu</a></li>
</ul>

<h2 id="can-i-have-custom-identifiersprimary-keys-for-my-resources">Can I have custom identifiers/primary keys for my resources?</h2>

<p>React-admin requires that each resource has an <code class="language-plaintext highlighter-rouge">id</code> field to identify it. If your API uses a different name for the primary key, you have to map that name to <code class="language-plaintext highlighter-rouge">id</code> in your <a href="./DataProviders.md">dataProvider</a>. For instance, to use a field named <code class="language-plaintext highlighter-rouge">_id</code> as identifier:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const dataProvider = {
</span>    getList: (resource, params) =&gt; {
        const { page, perPage } = params.pagination;
        const { field, order } = params.sort;
        const query = {
            sort: JSON.stringify([field, order]),
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify(params.filter),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;

        return httpClient(url).then(({ headers, json }) =&gt; ({
<span class="gd">-           data: json,
</span><span class="gi">+           data: json.map(resource =&gt; ({ ...resource, id: resource._id }) ),
</span>            total: parseInt(headers.get('content-range').split('/').pop(), 10),
        }));
    },
    getOne: (resource, params) =&gt;
        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) =&gt; ({
<span class="gd">-           data: json,
</span><span class="gi">+           { ...json, id: json._id },
</span>        })),

    getMany: (resource, params) =&gt; {
        const query = {
            filter: JSON.stringify({ id: params.ids }),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;
        return httpClient(url).then(({ json }) =&gt; ({ 
<span class="gd">-           data: json,
</span><span class="gi">+           data: json.map(resource =&gt; ({ ...resource, id: resource._id }) ),
</span>        }));
    },

    getManyReference: (resource, params) =&gt; {
        const { page, perPage } = params.pagination;
        const { field, order } = params.sort;
        const query = {
            sort: JSON.stringify([field, order]),
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify({
                ...params.filter,
                [params.target]: params.id,
            }),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;

        return httpClient(url).then(({ headers, json }) =&gt; ({
<span class="gd">-           data: json,
</span><span class="gi">+           data: json.map(resource =&gt; ({ ...resource, id: resource._id }) ),
</span>            total: parseInt(headers.get('content-range').split('/').pop(), 10),
        }));
    },

    update: (resource, params) =&gt;
        httpClient(`${apiUrl}/${resource}/${params.id}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        }).then(({ json }) =&gt; ({ 
<span class="gd">-           data: json,
</span><span class="gi">+           { ...json, id: json._id },
</span>        })),

    updateMany: (resource, params) =&gt; {
        const query = {
            filter: JSON.stringify({ id: params.ids}),
        };
        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        }).then(({ json }) =&gt; ({ data: json }));
    }

    create: (resource, params) =&gt;
        httpClient(`${apiUrl}/${resource}`, {
            method: 'POST',
            body: JSON.stringify(params.data),
        }).then(({ json }) =&gt; ({
<span class="gd">-           data: { ...params.data, id: json.id },
</span><span class="gi">+           data: { ...params.data, id: json._id },
</span>        })),

    delete: (resource, params) =&gt;
        httpClient(`${apiUrl}/${resource}/${params.id}`, {
            method: 'DELETE',
        }).then(({ json }) =&gt; ({ 
<span class="gd">-           data: json,
</span><span class="gi">+           { ...json, id: json._id },
</span>        })),

    deleteMany: (resource, params) =&gt; {
        const query = {
            filter: JSON.stringify({ id: params.ids}),
        };
        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {
            method: 'DELETE',
            body: JSON.stringify(params.data),
        }).then(({ json }) =&gt; ({ data: json }));
    }
<span class="err">};</span>
</code></pre></div></div>

<h2 id="i-get-warning-about-unique-key-for-child-in-array">I get warning about unique key for child in array</h2>

<p>When displaying a <code class="language-plaintext highlighter-rouge">Datagrid</code> component, you get the following warning:</p>

<blockquote>
  <p>Warning: Each child in an array or iterator should have a unique “key” prop.
Check the render method of <code class="language-plaintext highlighter-rouge">DatagridBody</code>.</p>
</blockquote>

<p>This is most probably because the resource does not have an <code class="language-plaintext highlighter-rouge">id</code> property as expected by react-admin. See the previous FAQ to see how to resolve this: <a href="#can-i-have-custom-identifiersprimary-keys-for-my-resources">Can I have custom identifiers/primary keys for my resources?</a></p>

<h2 id="how-can-i-customize-forms-depending-on-its-inputs-values">How can I customize forms depending on its inputs values?</h2>

<p>Some use cases:</p>

<ul>
  <li>Show/hide some inputs if another input has a value</li>
  <li>Show/hide some inputs if another input has a specific value</li>
  <li>Show/hide some inputs if the current form value matches specific constraints</li>
</ul>

<p>For all those cases, you can use the <a href="https://marmelab.com/react-admin/Inputs.html#linking-two-inputs"><code class="language-plaintext highlighter-rouge">&lt;FormDataConsumer&gt;</code></a> component.</p>

<h2 id="ui-in-production-build-is-empty-or-broke">UI in production build is empty or broke</h2>

<p>You have probably specified a version requirement for <code class="language-plaintext highlighter-rouge">@material-ui/core</code> that is incompatible with the one required by <code class="language-plaintext highlighter-rouge">react-admin</code>. As a consequence, npm bundled two copies of <code class="language-plaintext highlighter-rouge">material-ui</code> in your application, and <code class="language-plaintext highlighter-rouge">material-ui</code> doesn’t work in that case.</p>

<p>Please align your version requirement with the one of the <code class="language-plaintext highlighter-rouge">ra-ui-materialui</code> package.</p>

<p>See this <a href="https://github.com/marmelab/react-admin/issues/1782">issue for more information</a>.</p>

<h2 id="my-resource-is-defined-but-not-displayed-on-the-menu">My Resource is defined but not displayed on the Menu</h2>

<p>You can declare a resource without <code class="language-plaintext highlighter-rouge">list</code> prop, to manage reference for example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Admin</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">Resource</span> <span class="na">name</span><span class="p">=</span><span class="s">"reference"</span> <span class="na">create</span><span class="p">=</span><span class="si">{</span><span class="nx">PostReference</span><span class="si">}</span> <span class="na">edit</span><span class="p">=</span><span class="si">{</span><span class="nx">EditReference</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>But with the default menu, resources without <code class="language-plaintext highlighter-rouge">list</code> prop aren’t shown.</p>

<p>In order to have a specific resource without <code class="language-plaintext highlighter-rouge">list</code> prop listed on the menu, you have to <a href="./Theming.md#using-a-custom-menu">write your own custom menu</a>.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">MyMenu</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">resources</span><span class="p">,</span> <span class="nx">onMenuClick</span><span class="p">,</span> <span class="nx">logout</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">resources</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">resource</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="si">{</span><span class="s2">`/</span><span class="p">${</span><span class="nx">resource</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span> <span class="na">primaryText</span><span class="p">=</span><span class="si">{</span><span class="nx">resource</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/reference/create"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"New Reference"</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>
:ET