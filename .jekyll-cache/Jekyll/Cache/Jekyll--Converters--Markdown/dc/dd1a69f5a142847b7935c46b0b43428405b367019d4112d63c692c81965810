I"q<h1 id="theming">Theming</h1>

<p>Whether you need to adjust a CSS rule for a single component, or change the color of the labels in the entire app, you’re covered!</p>

<h2 id="overriding-a-component-style">Overriding A Component Style</h2>

<p>Every react-admin component provides a <code class="language-plaintext highlighter-rouge">className</code> property, which is always applied to the root element.</p>

<p>Here is an example customizing an <code class="language-plaintext highlighter-rouge">EditButton</code> component inside a <code class="language-plaintext highlighter-rouge">Datagrid</code>, using its <code class="language-plaintext highlighter-rouge">className</code> property and the <code class="language-plaintext highlighter-rouge">makeStyles</code> hook from Material-UI:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span><span class="p">,</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">EditButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">button</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bold</span><span class="dl">'</span><span class="p">,</span>
        <span class="c1">// This is JSS syntax to target a deeper element using css selector, here the svg icon for this button</span>
        <span class="dl">'</span><span class="s1">&amp; svg</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">orange</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">MyEditButton</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">button</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"sku"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"price"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">MyEditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>For some components, you may want to override not only the root component style, but also the style of components inside the root. In this case, the <code class="language-plaintext highlighter-rouge">className</code> property isn’t enough. You can take advantage of the <code class="language-plaintext highlighter-rouge">classes</code> property to customize the classes that the component uses internally.</p>

<p>Here is an example using the <code class="language-plaintext highlighter-rouge">classes</code> property of the <code class="language-plaintext highlighter-rouge">&lt;Datagrid&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">BooleanField</span><span class="p">,</span>
    <span class="nx">Datagrid</span><span class="p">,</span>
    <span class="nx">DateField</span><span class="p">,</span>
    <span class="nx">EditButton</span><span class="p">,</span>
    <span class="nx">List</span><span class="p">,</span>
    <span class="nx">NumberField</span><span class="p">,</span>
    <span class="nx">TextField</span><span class="p">,</span>
    <span class="nx">ShowButton</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Icon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Person</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">VisitorIcon</span> <span class="o">=</span> <span class="nx">Icon</span><span class="p">;</span>

<span class="c1">// The `Datagrid` component uses makeStyles, and supports overriding styles through the `classes` property </span>
<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">table</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lavender</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">headerCell</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MistyRose</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Datagrid</span> <span class="na">classes</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">DateField</span> <span class="na">source</span><span class="p">=</span><span class="s">"published_at"</span> <span class="na">sortByOrder</span><span class="p">=</span><span class="s">"DESC"</span><span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">BooleanField</span> <span class="na">source</span><span class="p">=</span><span class="s">"commentable"</span> <span class="na">sortable</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">NumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"views"</span> <span class="na">sortByOrder</span><span class="p">=</span><span class="s">"DESC"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">ShowButton</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>

<p>This example results in:</p>

<p><img src="./img/list_with_customized_css.png" alt="Visitor List with customized CSS classes" /></p>

<p>Take a look at a component documentation and source code to know which classes are available for styling. For instance, you can have a look at the <a href="./List.md#datagrid-css-api">Datagrid CSS documentation</a>.</p>

<p>If you need more control over the HTML code, you can also create your own <a href="./Fields.md#writing-your-own-field-component">Field</a> and <a href="./Inputs.md#writing-your-own-input-component">Input</a> components.</p>

<h2 id="conditional-formatting">Conditional Formatting</h2>

<p>Sometimes you want the format to depend on the value. The following example shows how to create a new custom <code class="language-plaintext highlighter-rouge">NumberField</code> component which highlight its text in red when its value is 100 or higher.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span><span class="p">,</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">EditButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">classnames</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">classnames</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">small</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span> <span class="p">},</span>
    <span class="na">big</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">ColoredNumberField</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">NumberField</span>
            <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classnames</span><span class="p">({</span>
                <span class="p">[</span><span class="nx">classes</span><span class="p">.</span><span class="nx">small</span><span class="p">]:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">record</span><span class="p">[</span><span class="nx">props</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">,</span>
                <span class="p">[</span><span class="nx">classes</span><span class="p">.</span><span class="nx">big</span><span class="p">]:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">record</span><span class="p">[</span><span class="nx">props</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">,</span>
            <span class="p">})</span><span class="si">}</span>
            <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span>
        <span class="p">/&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="c1">// Ensure the original component defaultProps are still applied as they may be used by its parents (such as the `Show` component):</span>
<span class="nx">ColoredNumberField</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="nx">NumberField</span><span class="p">.</span><span class="nx">defaultProps</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            ...
            <span class="p">&lt;</span><span class="nc">ColoredNumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"nb_views"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Furthermore, you may extract this highlighting strategy into a Higher Order Component if you’d like to reuse it for other components as well:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NumberField</span><span class="p">,</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">EditButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">classnames</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">classnames</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">small</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span> <span class="p">},</span>
    <span class="na">big</span><span class="p">:</span> <span class="p">{</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span> <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">colored</span> <span class="o">=</span> <span class="nx">WrappedComponent</span> <span class="o">=&gt;</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">WrappedComponent</span>
            <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classnames</span><span class="p">({</span>
                <span class="p">[</span><span class="nx">classes</span><span class="p">.</span><span class="nx">small</span><span class="p">]:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">record</span><span class="p">[</span><span class="nx">props</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="p">,</span>
                <span class="p">[</span><span class="nx">classes</span><span class="p">.</span><span class="nx">big</span><span class="p">]:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">record</span><span class="p">[</span><span class="nx">props</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="p">,</span>
            <span class="p">})</span><span class="si">}</span>
            <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span>
        <span class="p">/&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>


<span class="kd">const</span> <span class="nx">ColoredNumberField</span> <span class="o">=</span> <span class="nx">colored</span><span class="p">(</span><span class="nx">NumberField</span><span class="p">);</span>
<span class="c1">// Ensure the original component defaultProps are still applied as they may be used by its parents (such as the `Show` component):</span>
<span class="nx">ColoredNumberField</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="nx">NumberField</span><span class="p">.</span><span class="nx">defaultProps</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
            ...
            <span class="p">&lt;</span><span class="nc">ColoredNumberField</span> <span class="na">source</span><span class="p">=</span><span class="s">"nb_views"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>If you want to read more about higher-order components, check out this SitePoint tutorial: <a href="https://www.sitepoint.com/react-higher-order-components/">Higher Order Components: A React Application Design Pattern</a></p>

<h2 id="usemediaquery-hook"><code class="language-plaintext highlighter-rouge">useMediaQuery</code> Hook</h2>

<p>To provide an optimized experience on mobile, tablet, and desktop devices, you often need to display different components depending on the screen size. Material-ui provides a hook dedicated to help such responsive layouts: <a href="https://material-ui.com/components/use-media-query/#usemediaquery">useMediaQuery</a>.</p>

<p>It expects a function receiving the material-ui theme as a parameter, and returning a media query. Use the theme breakpoints to check for common screen sizes. The hook returns a boolean indicating if the current screen matches the media query or not.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isXSmall</span> <span class="o">=</span> <span class="nx">useMediaQuery</span><span class="p">(</span><span class="nx">theme</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">breakpoints</span><span class="p">.</span><span class="nx">down</span><span class="p">(</span><span class="dl">'</span><span class="s1">xs</span><span class="dl">'</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">isSmall</span> <span class="o">=</span> <span class="nx">useMediaQuery</span><span class="p">(</span><span class="nx">theme</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">breakpoints</span><span class="p">.</span><span class="nx">down</span><span class="p">(</span><span class="dl">'</span><span class="s1">sm</span><span class="dl">'</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">isDesktop</span> <span class="o">=</span> <span class="nx">useMediaQuery</span><span class="p">(</span><span class="nx">theme</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">breakpoints</span><span class="p">.</span><span class="nx">up</span><span class="p">(</span><span class="dl">'</span><span class="s1">md</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p>You can also pass a custom media query as a screen.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isSmall</span> <span class="o">=</span> <span class="nx">useMediaQuery</span><span class="p">(</span><span class="dl">'</span><span class="s1">(min-width:600px)</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Here is an example for a responsive list of posts, displaying a <code class="language-plaintext highlighter-rouge">SimpleList</code> on mobile, and a <code class="language-plaintext highlighter-rouge">Datagrid</code> otherwise:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/posts.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useMediaQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">List</span><span class="p">,</span> <span class="nx">SimpleList</span><span class="p">,</span> <span class="nx">Datagrid</span><span class="p">,</span> <span class="nx">TextField</span><span class="p">,</span> <span class="nx">ReferenceField</span><span class="p">,</span> <span class="nx">EditButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">isSmall</span> <span class="o">=</span> <span class="nx">useMediaQuery</span><span class="p">(</span><span class="nx">theme</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">breakpoints</span><span class="p">.</span><span class="nx">down</span><span class="p">(</span><span class="dl">'</span><span class="s1">sm</span><span class="dl">'</span><span class="p">));</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">List</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">isSmall</span> <span class="p">?</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nc">SimpleList</span>
                    <span class="na">primaryText</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="nx">record</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span>
                    <span class="na">secondaryText</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">record</span><span class="p">.</span><span class="nx">views</span><span class="p">}</span><span class="s2"> views`</span><span class="si">}</span>
                    <span class="na">tertiaryText</span><span class="p">=</span><span class="si">{</span><span class="nx">record</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">record</span><span class="p">.</span><span class="nx">published_at</span><span class="p">).</span><span class="nx">toLocaleDateString</span><span class="p">()</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"id"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ReferenceField</span> <span class="na">label</span><span class="p">=</span><span class="s">"User"</span> <span class="na">source</span><span class="p">=</span><span class="s">"userId"</span> <span class="na">reference</span><span class="p">=</span><span class="s">"users"</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"name"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">ReferenceField</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">TextField</span> <span class="na">source</span><span class="p">=</span><span class="s">"body"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">EditButton</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">Datagrid</span><span class="p">&gt;</span>
            <span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">List</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: Previous versions of react-admin shipped a <code class="language-plaintext highlighter-rouge">&lt;Responsive&gt;</code> component to do media queries. This component is now deprecated. Use <code class="language-plaintext highlighter-rouge">useMediaQuery</code> instead.</p>

<h2 id="using-a-predefined-theme">Using a Predefined Theme</h2>

<p>Material UI also supports <a href="https://material-ui.com/customization/themes">complete theming</a> out of the box. Material UI ships two base themes: light and dark. React-admin uses the light one by default. To use the dark one, pass it to the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component, in the <code class="language-plaintext highlighter-rouge">theme</code> prop (along with <code class="language-plaintext highlighter-rouge">createMuiTheme()</code>).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createMuiTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="nx">createMuiTheme</span><span class="p">({</span>
  <span class="na">palette</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">dark</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// Switching the dark mode on is a single property value change.</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">theme</span><span class="p">=</span><span class="si">{</span><span class="nx">theme</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><img src="./img/dark-theme.png" alt="Dark theme" /></p>

<h2 id="writing-a-custom-theme">Writing a Custom Theme</h2>

<p>If you need more fine-tuning, you’ll need to write your own <code class="language-plaintext highlighter-rouge">theme</code> object, following <a href="https://material-ui.com/customization/themes/">Material UI themes documentation</a>.</p>

<p>For instance, here is how to override the default react-admin theme:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defaultTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">merge</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lodash/merge</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">indigo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/colors/indigo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">pink</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/colors/pink</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">red</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/colors/red</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myTheme</span> <span class="o">=</span> <span class="nx">merge</span><span class="p">({},</span> <span class="nx">defaultTheme</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">palette</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">primary</span><span class="p">:</span> <span class="nx">indigo</span><span class="p">,</span>
        <span class="na">secondary</span><span class="p">:</span> <span class="nx">pink</span><span class="p">,</span>
        <span class="na">error</span><span class="p">:</span> <span class="nx">red</span><span class="p">,</span>
        <span class="na">contrastThreshold</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">tonalOffset</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">typography</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Use the system font instead of the default Roboto font.</span>
        <span class="na">fontFamily</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">-apple-system</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">BlinkMacSystemFont</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">"Segoe UI"</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Arial</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">sans-serif</span><span class="dl">'</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">),</span>
    <span class="p">},</span>
    <span class="na">overrides</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">MuiButton</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// override the styles of all instances of this component</span>
            <span class="na">root</span><span class="p">:</span> <span class="p">{</span> <span class="c1">// Name of the rule</span>
                <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// Some CSS</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">theme</code> object can contain the following keys:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">breakpoints</code></li>
  <li><code class="language-plaintext highlighter-rouge">direction</code></li>
  <li><code class="language-plaintext highlighter-rouge">mixins</code></li>
  <li><code class="language-plaintext highlighter-rouge">overrides</code></li>
  <li><code class="language-plaintext highlighter-rouge">palette</code></li>
  <li><code class="language-plaintext highlighter-rouge">props</code></li>
  <li><code class="language-plaintext highlighter-rouge">shadows</code></li>
  <li><code class="language-plaintext highlighter-rouge">spacing</code></li>
  <li><code class="language-plaintext highlighter-rouge">transitions</code></li>
  <li><code class="language-plaintext highlighter-rouge">typography</code></li>
  <li><code class="language-plaintext highlighter-rouge">zIndex</code></li>
</ul>

<p><strong>Tip</strong>: Check <a href="https://material-ui.com/customization/default-theme/">Material UI default theme documentation</a> to see the default values and meaning for these keys.</p>

<p>Once your theme is defined, pass it to the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component, in the <code class="language-plaintext highlighter-rouge">theme</code> prop.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">theme</span><span class="p">=</span><span class="si">{</span><span class="nx">myTheme</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="using-a-custom-layout">Using a Custom Layout</h2>

<p>Instead of the default layout, you can use your own component as the admin layout. Just use the <code class="language-plaintext highlighter-rouge">layout</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="nx">MyLayout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLayout</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLayout</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Your custom layout can extend the default <code class="language-plaintext highlighter-rouge">&lt;Layout&gt;</code> component if you only want to override the sidebar, the appBar, the menu, the notification component or the error page. For instance:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLayout.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyAppBar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyAppBar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MySidebar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MySidebar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyMenu</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyMenu</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyNotification</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyNotification</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span>
    <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span>
    <span class="na">appBar</span><span class="p">=</span><span class="si">{</span><span class="nx">MyAppBar</span><span class="si">}</span>
    <span class="na">sidebar</span><span class="p">=</span><span class="si">{</span><span class="nx">MySidebar</span><span class="si">}</span>
    <span class="na">menu</span><span class="p">=</span><span class="si">{</span><span class="nx">MyMenu</span><span class="si">}</span>
    <span class="na">notification</span><span class="p">=</span><span class="si">{</span><span class="nx">MyNotification</span><span class="si">}</span>
<span class="p">/&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLayout</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="usermenu-customization">UserMenu Customization</h3>

<p>You can replace the default user menu by your own by setting the <code class="language-plaintext highlighter-rouge">userMenu</code> prop of the <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> component. For instance, to add custom menu items, just decorate the default <a href="./Buttons.md#usermenu"><code class="language-plaintext highlighter-rouge">&lt;UserMenu&gt;</code></a> by adding children to it:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppBar</span><span class="p">,</span> <span class="nx">UserMenu</span><span class="p">,</span> <span class="nx">MenuItemLink</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SettingsIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Settings</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ConfigurationMenu</span> <span class="o">=</span> <span class="nx">forwardRef</span><span class="p">(({</span> <span class="nx">onClick</span> <span class="p">},</span> <span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">MenuItemLink</span>
        <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">ref</span><span class="si">}</span>
        <span class="na">to</span><span class="p">=</span><span class="s">"/configuration"</span>
        <span class="na">primaryText</span><span class="p">=</span><span class="s">"Configuration"</span>
        <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">SettingsIcon</span> <span class="p">/&gt;</span><span class="si">}</span>
        <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onClick</span><span class="si">}</span> <span class="c1">// close the menu on click</span>
    <span class="p">/&gt;</span>
<span class="p">));</span>

<span class="kd">const</span> <span class="nx">MyUserMenu</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">UserMenu</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">ConfigurationMenu</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">UserMenu</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">userMenu</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">MyUserMenu</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">appBar</span><span class="p">=</span><span class="si">{</span><span class="nx">MyAppBar</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<p>You can also remove the <code class="language-plaintext highlighter-rouge">&lt;UserMenu&gt;</code> from the <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> by passing <code class="language-plaintext highlighter-rouge">false</code> to the <code class="language-plaintext highlighter-rouge">userMenu</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppBar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">userMenu</span><span class="p">=</span><span class="si">{</span><span class="kc">false</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">appBar</span><span class="p">=</span><span class="si">{</span><span class="nx">MyAppBar</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<p>You can also customize the default icon by setting the <code class="language-plaintext highlighter-rouge">icon</code> prop to the <code class="language-plaintext highlighter-rouge">&lt;UserMenu /&gt;</code> component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AppBar</span><span class="p">,</span> <span class="nx">UserMenu</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Avatar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Avatar</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">avatar</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">height</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="na">width</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">MyCustomIcon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Avatar</span>
            <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">avatar</span><span class="si">}</span>
            <span class="na">src</span><span class="p">=</span><span class="s">"https://marmelab.com/images/avatars/adrien.jpg"</span>
        <span class="p">/&gt;</span>
    <span class="p">)</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">MyUserMenu</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(&lt;</span><span class="nc">UserMenu</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">icon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">MyCustomIcon</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;);</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">userMenu</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">MyUserMenu</span> <span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<h3 id="sidebar-customization">Sidebar Customization</h3>

<p>You can specify the <code class="language-plaintext highlighter-rouge">Sidebar</code> width by setting the <code class="language-plaintext highlighter-rouge">width</code> and <code class="language-plaintext highlighter-rouge">closedWidth</code> property on your custom material-ui theme:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defaultTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-admin</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createMuiTheme</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="nx">createMuiTheme</span><span class="p">({</span>
    <span class="p">...</span><span class="nx">defaultTheme</span><span class="p">,</span>
    <span class="na">sidebar</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">width</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span> <span class="c1">// The default value is 240</span>
        <span class="na">closedWidth</span><span class="p">:</span> <span class="mi">70</span><span class="p">,</span> <span class="c1">// The default value is 55</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">theme</span><span class="p">=</span><span class="si">{</span><span class="nx">theme</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>For more advanced sidebar theming, pass your own <code class="language-plaintext highlighter-rouge">Sidebar</code> component to a custom <code class="language-plaintext highlighter-rouge">Layout</code>:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Sidebar</span><span class="p">,</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useSidebarStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">drawerPaper</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">MySidebar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useSidebarStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Sidebar</span> <span class="na">classes</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="si">}</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">sidebar</span><span class="p">=</span><span class="si">{</span><span class="nx">MySidebar</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="layout-from-scratch">Layout From Scratch</h3>

<p>For more custom layouts, write a component from scratch. It must contain a <code class="language-plaintext highlighter-rouge">{children}</code> placeholder, where react-admin will render the resources. Use the <a href="https://github.com/marmelab/react-admin/blob/master/packages/ra-ui-materialui/src/layout/Layout.tsx">default layout</a> as a starting point. Here is a simplified version (with no responsive support):</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLayout.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useSelector</span><span class="p">,</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThemeProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">AppBar</span><span class="p">,</span>
    <span class="nx">Menu</span><span class="p">,</span>
    <span class="nx">Notification</span><span class="p">,</span>
    <span class="nx">Sidebar</span><span class="p">,</span>
    <span class="nx">setSidebarVisibility</span><span class="p">,</span>
    <span class="nx">ComponentPropType</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">(</span><span class="nx">theme</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">root</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flex</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">flexDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">column</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">zIndex</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">minHeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">100vh</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">backgroundColor</span><span class="p">:</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">palette</span><span class="p">.</span><span class="nx">background</span><span class="p">.</span><span class="k">default</span><span class="p">,</span>
        <span class="na">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">relative</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">appFrame</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flex</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">flexDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">column</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">overflowX</span><span class="p">:</span> <span class="dl">'</span><span class="s1">auto</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">contentWithSidebar</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flex</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">flexGrow</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">content</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flex</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">flexDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">column</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">flexGrow</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">padding</span><span class="p">:</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">spacing</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
        <span class="na">marginTop</span><span class="p">:</span> <span class="dl">'</span><span class="s1">4em</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">paddingLeft</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}));</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
    <span class="nx">dashboard</span><span class="p">,</span>
    <span class="nx">logout</span><span class="p">,</span>
    <span class="nx">title</span><span class="p">,</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nx">useDispatch</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">open</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">admin</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">sidebarOpen</span><span class="p">);</span>

    <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">dispatch</span><span class="p">(</span><span class="nx">setSidebarVisibility</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="p">},</span> <span class="p">[</span><span class="nx">setSidebarVisibility</span><span class="p">]);</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">root</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">appFrame</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="na">title</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="na">open</span><span class="p">=</span><span class="si">{</span><span class="nx">open</span><span class="si">}</span> <span class="na">logout</span><span class="p">=</span><span class="si">{</span><span class="nx">logout</span><span class="si">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nt">main</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">contentWithSidebar</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Sidebar</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">Menu</span> <span class="na">logout</span><span class="p">=</span><span class="si">{</span><span class="nx">logout</span><span class="si">}</span> <span class="na">hasDashboard</span><span class="p">=</span><span class="si">{</span><span class="o">!!</span><span class="nx">dashboard</span><span class="si">}</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">Sidebar</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">content</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="si">{</span><span class="nx">children</span><span class="si">}</span>
                    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">Notification</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="nx">MyLayout</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">children</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">oneOfType</span><span class="p">([</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">node</span><span class="p">]),</span>
    <span class="na">dashboard</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">oneOfType</span><span class="p">([</span>
        <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span>
        <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
    <span class="p">]),</span>
    <span class="na">logout</span><span class="p">:</span> <span class="nx">ComponentPropType</span><span class="p">,</span>
    <span class="na">title</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLayout</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: Don’t forget to render a <code class="language-plaintext highlighter-rouge">&lt;Notification&gt;</code> component in your custom layout, otherwise the undoable updates will never be sent to the server. That’s because part of the “undo” logic of react-admin lies in the <code class="language-plaintext highlighter-rouge">&lt;Notification&gt;</code> component.</p>

<h2 id="adding-a-breadcrumb">Adding a Breadcrumb</h2>

<p>The <code class="language-plaintext highlighter-rouge">&lt;Breadcrumb&gt;</code> component is part of <code class="language-plaintext highlighter-rouge">ra-navigation</code>, an <a href="https://marmelab.com/ra-enterprise">Enterprise Edition</a><img class="icon" src="./img/premium.svg" /> module. It displays a breadcrumb based on a site structure that you can override at will.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">AppLocationContext</span><span class="p">,</span>
    <span class="nx">Breadcrumb</span><span class="p">,</span>
    <span class="nx">ResourceBreadcrumbItems</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-admin/ra-navigation</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Resource</span><span class="p">,</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">PostList</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./PostList</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PostEdit</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./PostEdit</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PostShow</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./PostShow</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PostCreate</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./PostCreate</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AppLocationContext</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Breadcrumb</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">ResourceBreadcrumbItems</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">Breadcrumb</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">children</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Layout</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">AppLocationContext</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">dataProvider</span><span class="si">}</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLayout</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Resource</span>
            <span class="na">name</span><span class="p">=</span><span class="s">"posts"</span>
            <span class="na">list</span><span class="p">=</span><span class="si">{</span><span class="nx">PostList</span><span class="si">}</span>
            <span class="na">edit</span><span class="p">=</span><span class="si">{</span><span class="nx">PostEdit</span><span class="si">}</span>
            <span class="na">show</span><span class="p">=</span><span class="si">{</span><span class="nx">PostShow</span><span class="si">}</span>
            <span class="na">create</span><span class="p">=</span><span class="si">{</span><span class="nx">PostCreate</span><span class="si">}</span>
        <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-navigation">the <code class="language-plaintext highlighter-rouge">ra-navigation</code> documentation</a> for more details.</p>

<h2 id="customizing-the-appbar-content">Customizing the AppBar Content</h2>

<p>By default, the react-admin <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> component displays the page title. You can override this default by passing children to <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> - they will replace the default title. And if you still want to include the page title, make sure you include an element with id <code class="language-plaintext highlighter-rouge">react-admin-title</code> in the top bar (this uses <a href="https://reactjs.org/docs/portals.html">React Portals</a>).</p>

<p>Here is an example customization for <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> to include a company logo in the center of the page header:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyAppBar.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppBar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Typography</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Typography</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">makeStyles</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/styles</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">Logo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Logo</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useStyles</span> <span class="o">=</span> <span class="nx">makeStyles</span><span class="p">({</span>
    <span class="na">title</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">flex</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">textOverflow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ellipsis</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">whiteSpace</span><span class="p">:</span> <span class="dl">'</span><span class="s1">nowrap</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">overflow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">hidden</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">spacer</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">flex</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">useStyles</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Typography</span>
                <span class="na">variant</span><span class="p">=</span><span class="s">"h6"</span>
                <span class="na">color</span><span class="p">=</span><span class="s">"inherit"</span>
                <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span>
                <span class="na">id</span><span class="p">=</span><span class="s">"react-admin-title"</span>
            <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Logo</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">spacer</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">AppBar</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyAppBar</span><span class="p">;</span>
</code></pre></div></div>

<p>To use this custom <code class="language-plaintext highlighter-rouge">MyAppBar</code> component, pass it as prop to a custom <code class="language-plaintext highlighter-rouge">Layout</code>, as shown below:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLayout.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyAppBar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyAppBar</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">appBar</span><span class="p">=</span><span class="si">{</span><span class="nx">MyAppBar</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLayout</span><span class="p">;</span>
</code></pre></div></div>

<p>Then, use this layout in the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> with the <code class="language-plaintext highlighter-rouge">layout</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="nx">MyLayout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLayout</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLayout</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><img src="./img/custom_appbar.png" alt="custom AppBar" /></p>

<p><strong>Tip</strong>: You can change the color of the <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> by setting the <code class="language-plaintext highlighter-rouge">color</code> prop to <code class="language-plaintext highlighter-rouge">default</code>, <code class="language-plaintext highlighter-rouge">inherit</code>, <code class="language-plaintext highlighter-rouge">primary</code>, <code class="language-plaintext highlighter-rouge">secondary</code> or <code class="language-plaintext highlighter-rouge">transparent</code>. The default value is <code class="language-plaintext highlighter-rouge">secondary</code>.</p>

<h2 id="replacing-the-appbar">Replacing The AppBar</h2>

<p>By default, React-admin uses <a href="https://material-ui.com/api/app-bar/">Material-ui’s <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> component</a> together with a custom container that internally uses a <a href="https://material-ui.com/api/slide">Slide</a> to hide the <code class="language-plaintext highlighter-rouge">AppBar</code> on scroll. Here is an example of how to change this container with any component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyAppBar.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Fragment</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AppBar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">container</span><span class="p">=</span><span class="si">{</span><span class="nx">Fragment</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyAppBar</span><span class="p">;</span>
</code></pre></div></div>

<p>For more drastic changes of the top component, you will probably want to create an <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code> from scratch instead of just passing children to react-admin’s <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code>. Here is an example top bar rebuilt from scratch:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyAppBar.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AppBar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/AppBar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Toolbar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Toolbar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Typography</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Typography</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Toolbar</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"h6"</span> <span class="na">id</span><span class="p">=</span><span class="s">"react-admin-title"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Toolbar</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">AppBar</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyAppBar</span><span class="p">;</span>
</code></pre></div></div>

<p>Take note that this uses <em>material-ui’s <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code></em> instead of <em>react-admin’s <code class="language-plaintext highlighter-rouge">&lt;AppBar&gt;</code></em>. To use this custom <code class="language-plaintext highlighter-rouge">AppBar</code> component, pass it as prop to a custom <code class="language-plaintext highlighter-rouge">Layout</code>, as explained in the previous section.</p>

<h2 id="adding-dark-mode-support">Adding Dark Mode Support</h2>

<p>The <code class="language-plaintext highlighter-rouge">&lt;ToggleThemeButton&gt;</code> component is part of <code class="language-plaintext highlighter-rouge">ra-preferences</code>, an <a href="https://marmelab.com/ra-enterprise">Enterprise Edition</a><img class="icon" src="./img/premium.svg" /> module. It lets users switch from light to dark mode, and persists that choice in local storage so that users only have to do it once.</p>

<p><img src="https://marmelab.com/ra-enterprise/modules/assets/ra-preferences-overview.gif" alt="Dark Mode support" /></p>

<p>You can add the <code class="language-plaintext highlighter-rouge">&lt;ToggleThemeButton&gt;</code> to a custom App Bar:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span><span class="p">,</span> <span class="nx">AppBar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Box</span><span class="p">,</span> <span class="nx">Typography</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ToggleThemeButton</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-admin/ra-preferences</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyAppBar</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AppBar</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Box</span> <span class="na">flex</span><span class="p">=</span><span class="s">"1"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Typography</span> <span class="na">variant</span><span class="p">=</span><span class="s">"h6"</span> <span class="na">id</span><span class="p">=</span><span class="s">"react-admin-title"</span><span class="p">&gt;&lt;/</span><span class="nc">Typography</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Box</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">ToggleThemeButton</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">AppBar</span><span class="p">&gt;</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">appBar</span><span class="p">=</span><span class="si">{</span><span class="nx">MyAppBar</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<p>Check <a href="https://marmelab.com/ra-enterprise/modules/ra-preferences#togglethemebutton-store-the-theme-in-the-preferences">the <code class="language-plaintext highlighter-rouge">ra-preferences</code> documentation</a> for more details.</p>

<h2 id="using-a-custom-menu">Using a Custom Menu</h2>

<p>By default, React-admin uses the list of <code class="language-plaintext highlighter-rouge">&lt;Resource&gt;</code> components passed as children of <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> to build a menu to each resource with a <code class="language-plaintext highlighter-rouge">list</code> component. If you want to reorder, add or remove menu items, for instance to link to non-resources pages, you have to provide a custom <code class="language-plaintext highlighter-rouge">&lt;Menu&gt;</code> component to your <code class="language-plaintext highlighter-rouge">Layout</code>.</p>

<h3 id="custom-menu-example">Custom Menu Example</h3>

<p>You can create a custom menu component using the <code class="language-plaintext highlighter-rouge">&lt;DashboardMenuItem&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;MenuItemLink&gt;</code> components:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/Menu.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DashboardMenuItem</span><span class="p">,</span> <span class="nx">MenuItemLink</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">BookIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Book</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ChatBubbleIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/ChatBubble</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PeopleIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/People</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">LabelIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Label</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Menu</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">DashboardMenuItem</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/posts"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Posts"</span> <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">BookIcon</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/comments"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Comments"</span> <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">ChatBubbleIcon</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/users"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Users"</span> <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">PeopleIcon</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/custom-route"</span> <span class="na">primaryText</span><span class="p">=</span><span class="s">"Miscellaneous"</span> <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">LabelIcon</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>To use this custom menu component, pass it to a custom Layout, as explained above:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/Layout.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Menu</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Menu</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Layout</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">menu</span><span class="p">=</span><span class="si">{</span><span class="nx">Menu</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>

<p>Then, use this layout in the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> <code class="language-plaintext highlighter-rouge">layout</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span>  <span class="k">from</span> <span class="dl">'</span><span class="s1">./Layout</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">Layout</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p><strong>Tip</strong>: You can generate the menu items for each of the resources by reading the Resource configurations from the Redux store:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/Menu.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createElement</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useMediaQuery</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DashboardMenuItem</span><span class="p">,</span> <span class="nx">MenuItemLink</span><span class="p">,</span> <span class="nx">getResources</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DefaultIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/ViewList</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">LabelIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Label</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Menu</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">resources</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">getResources</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">DashboardMenuItem</span> <span class="p">/&gt;</span>
            <span class="si">{</span><span class="nx">resources</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">resource</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nc">MenuItemLink</span>
                    <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">resource</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span>
                    <span class="na">to</span><span class="p">=</span><span class="si">{</span><span class="s2">`/</span><span class="p">${</span><span class="nx">resource</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
                    <span class="na">primaryText</span><span class="p">=</span><span class="si">{</span>
                        <span class="p">(</span><span class="nx">resource</span><span class="p">.</span><span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">label</span><span class="p">)</span> <span class="o">||</span>
                        <span class="nx">resource</span><span class="p">.</span><span class="nx">name</span>
                    <span class="si">}</span>
                    <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span>
                        <span class="nx">resource</span><span class="p">.</span><span class="nx">icon</span> <span class="p">?</span> <span class="p">&lt;</span><span class="nt">resource</span><span class="p">.</span><span class="nt">icon</span> <span class="p">/&gt;</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nc">DefaultIcon</span> <span class="p">/&gt;</span>
                    <span class="si">}</span>
                    <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">onMenuClick</span><span class="si">}</span>
                    <span class="na">sidebarIsOpen</span><span class="p">=</span><span class="si">{</span><span class="nx">open</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">))</span><span class="si">}</span>
            <span class="si">{</span><span class="cm">/* add your custom menus here */</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Tip</strong>: If you need a multi-level menu, or a Mega Menu opening panels with custom content, check out <a href="https://marmelab.com/ra-enterprise/modules/ra-navigation">the <code class="language-plaintext highlighter-rouge">ra-navigation</code><img class="icon" src="./img/premium.svg" /> module</a> (part of the <a href="https://marmelab.com/ra-enterprise">Enterprise Edition</a>)</p>

<p><img src="https://marmelab.com/ra-enterprise/modules/assets/ra-multilevelmenu-item.gif" alt="multi-level menu" /></p>

<p><img src="https://marmelab.com/ra-enterprise/modules/assets/ra-multilevelmenu-categories.gif" alt="MegaMenu and Breadcrumb" /></p>

<h3 id="menuitemlink"><code class="language-plaintext highlighter-rouge">&lt;MenuItemLink&gt;</code></h3>

<p>The <code class="language-plaintext highlighter-rouge">&lt;MenuItemLink&gt;</code> component displays a menu item with a label and an icon - or only the icon with a tooltip when the sidebar is minimized. It also handles the automatic closing of the menu on tap on mobile.</p>

<p>The <code class="language-plaintext highlighter-rouge">primaryText</code> prop accepts a string or a React node. You can use it e.g. to display a badge on top of the menu item:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Badge</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Badge</span><span class="dl">'</span><span class="p">;</span>

<span class="p">&lt;</span><span class="nc">MenuItemLink</span> <span class="na">to</span><span class="p">=</span><span class="s">"/custom-route"</span> <span class="na">primaryText</span><span class="p">=</span><span class="si">{</span>
    <span class="p">&lt;</span><span class="nc">Badge</span> <span class="na">badgeContent</span><span class="p">=</span><span class="si">{</span><span class="mi">4</span><span class="si">}</span> <span class="na">color</span><span class="p">=</span><span class="s">"primary"</span><span class="p">&gt;</span>
        Notifications
    <span class="p">&lt;/</span><span class="nc">Badge</span><span class="p">&gt;</span>
<span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">letfIcon</code> prop allows to set the menu left icon.</p>

<p>Additional props are passed down to <a href="https://material-ui.com/api/menu-item/#menuitem-api">the underling material-ui <code class="language-plaintext highlighter-rouge">&lt;MenuItem&gt;</code> component</a>.</p>

<p><strong>Tip</strong>: The <code class="language-plaintext highlighter-rouge">&lt;MenuItemLink&gt;</code> component makes use of the React Router <a href="https://reacttraining.com/react-router/web/api/NavLink">NavLink</a> component, hence allowing to customize the active menu style. For instance, here is how to use a custom theme to show a left border for the active menu:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">theme</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">palette</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">},</span>
    <span class="na">overrides</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">RaMenuItemLink</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">active</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">borderLeft</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3px solid #4f3cc9</span><span class="dl">'</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="na">root</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">borderLeft</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3px solid #fff</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// invisible menu when not active, to avoid scrolling the text when selecting the menu</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="menu-to-a-filtered-list">Menu To A Filtered List</h3>

<p>As the filter values are taken from the URL, you can link to a pre-filtered list by setting the <code class="language-plaintext highlighter-rouge">filter</code> query parameter.</p>

<p>For instance, to include a menu to a list of published posts:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">MenuItemLink</span>
    <span class="na">to</span><span class="p">=</span><span class="si">{</span><span class="p">{</span>
        <span class="na">pathname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/posts</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">search</span><span class="p">:</span> <span class="s2">`filter=</span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">is_published</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})}</span><span class="s2">`</span><span class="p">,</span>
    <span class="p">}</span><span class="si">}</span>
    <span class="na">primaryText</span><span class="p">=</span><span class="s">"Posts"</span>
    <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">BookIcon</span> <span class="p">/&gt;</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<h3 id="menu-to-a-list-without-filters">Menu To A List Without Filters</h3>

<p>By default, a click on <code class="language-plaintext highlighter-rouge">&lt;MenuItemLink &gt;</code> for a list page opens the list with the same filters as they were applied the last time the user saw them. This is usually the expected behavior, but your users may prefer that clicking on a menu item resets the list filters.</p>

<p>Just use an empty <code class="language-plaintext highlighter-rouge">filter</code> query parameter to force empty filters:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">MenuItemLink</span>
    <span class="na">to</span><span class="p">=</span><span class="s">"/posts?filter=%7B%7D"</span> <span class="c1">// %7B%7D is JSON.stringify({})</span>
    <span class="na">primaryText</span><span class="p">=</span><span class="s">"Posts"</span>
    <span class="na">leftIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">BookIcon</span> <span class="p">/&gt;</span><span class="si">}</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="using-a-custom-login-page">Using a Custom Login Page</h2>

<h3 id="changing-the-background-image">Changing the Background Image</h3>

<p>By default, the login page displays a gradient background. If you want to change the background, you can use the default Login page component and pass an image URL as the <code class="language-plaintext highlighter-rouge">backgroundImage</code> prop.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Login</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLoginPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Login</span>
        <span class="c1">// A random image that changes everyday</span>
        <span class="na">backgroundImage</span><span class="p">=</span><span class="s">"https://source.unsplash.com/random/1600x900/daily"</span>
    <span class="p">/&gt;</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">loginPage</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLoginPage</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="using-a-custom-logout-button">Using a Custom Logout Button</h2>

<h3 id="changing-the-icon">Changing the Icon</h3>

<p>It is possible to use a completely <a href="./Admin.md#logoutbutton">custom logout button</a> or you can simply override some properties of the default button. If you want to change the icon, you can use the default <code class="language-plaintext highlighter-rouge">&lt;Logout&gt;</code> component and pass a different icon as the <code class="language-plaintext highlighter-rouge">icon</code> prop.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Admin</span><span class="p">,</span> <span class="nx">Logout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ExitToAppIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/ExitToApp</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLogoutButton</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Logout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">icon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">ExitToAppIcon</span><span class="p">/&gt;</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">logoutButton</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLogoutButton</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="notifications">Notifications</h2>

<p>You can override the notification component, for instance to change the notification duration. It defaults to 4000, i.e. 4 seconds, and you can override it using the <code class="language-plaintext highlighter-rouge">autoHideDuration</code> prop. For instance, to create a custom Notification component with a 5 seconds default:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyNotification.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Notification</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyNotification</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Notification</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">autoHideDuration</span><span class="p">=</span><span class="si">{</span><span class="mi">5000</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyNotification</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Tip</strong>: if you use the <code class="language-plaintext highlighter-rouge">showNotification</code> action, then you can define <code class="language-plaintext highlighter-rouge">autoHideDuration</code> per message as the third parameter of the <code class="language-plaintext highlighter-rouge">showNotification</code> action creator.</p>

<p>To use this custom notification component, pass it to a custom Layout, as explained above:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLayout.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyNotification</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyNotification</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">notification</span><span class="p">=</span><span class="si">{</span><span class="nx">MyNotification</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLayout</span><span class="p">;</span>
</code></pre></div></div>

<p>Then, use this layout in the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> <code class="language-plaintext highlighter-rouge">layout</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="nx">MyLayout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLayout</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLayout</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="customizing-the-error-page">Customizing The Error Page</h2>

<p>Whenever a client-side error happens in react-admin, the user sees a default error message. If you want to customize this page, or log the error to a third-party service, create your own <code class="language-plaintext highlighter-rouge">&lt;Error&gt;</code> component. The following snippet is a simplified version of the react-admin Error component, that you can use as a base for your own:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyError.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Button</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/core/Button</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ErrorIcon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/Report</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">History</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@material-ui/icons/History</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Title</span><span class="p">,</span> <span class="nx">useTranslate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyError</span> <span class="o">=</span> <span class="p">({</span>
    <span class="nx">error</span><span class="p">,</span>
    <span class="nx">errorInfo</span><span class="p">,</span>
    <span class="p">...</span><span class="nx">rest</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">translate</span> <span class="o">=</span> <span class="nx">useTranslate</span><span class="p">();</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Title</span> <span class="na">title</span><span class="p">=</span><span class="s">"Error"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;&lt;</span><span class="nc">ErrorIcon</span> <span class="p">/&gt;</span> Something Went Wrong <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>A client error occurred and your request couldn't be completed.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">details</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">translate</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
                    <span class="si">{</span><span class="nx">errorInfo</span><span class="p">.</span><span class="nx">componentStack</span><span class="si">}</span>
                <span class="p">&lt;/</span><span class="nt">details</span><span class="p">&gt;</span>
            <span class="p">)</span><span class="si">}</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">Button</span>
                    <span class="na">variant</span><span class="p">=</span><span class="s">"contained"</span>
                    <span class="na">startIcon</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">History</span> <span class="p">/&gt;</span><span class="si">}</span>
                    <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">history</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span>
                <span class="p">&gt;</span>
                    Back
                <span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyError</span><span class="p">;</span>
</code></pre></div></div>

<p>To use this custom error component, pass it to a custom Layout, as explained above:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/MyLayout.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-admin</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">MyError</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyError</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyLayout</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">&lt;</span><span class="nc">Layout</span> <span class="si">{</span><span class="p">...</span><span class="nx">props</span><span class="si">}</span> <span class="na">error</span><span class="p">=</span><span class="si">{</span><span class="nx">MyError</span><span class="si">}</span> <span class="p">/&gt;;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyLayout</span><span class="p">;</span>
</code></pre></div></div>

<p>Then, use this layout in the <code class="language-plaintext highlighter-rouge">&lt;Admin&gt;</code> <code class="language-plaintext highlighter-rouge">layout</code> prop:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in src/App.js</span>
<span class="k">import</span> <span class="nx">MyLayout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./MyLayout</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Admin</span> <span class="na">layout</span><span class="p">=</span><span class="si">{</span><span class="nx">MyLayout</span><span class="si">}</span> <span class="na">dataProvider</span><span class="p">=</span><span class="si">{</span><span class="nx">simpleRestProvider</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://path.to.my.api</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>
        // ...
    <span class="p">&lt;/</span><span class="nc">Admin</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="loading">Loading</h2>

<p>Display a circular progress component with optional messages. Display the same loading component as <code class="language-plaintext highlighter-rouge">react-admin</code> on custom pages for consistency.</p>

<p>Supported props:</p>

<table>
  <thead>
    <tr>
      <th>Prop</th>
      <th>Required</th>
      <th>Type</th>
      <th>Default</th>
      <th>Descriptions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">loadingPrimary</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td><code class="language-plaintext highlighter-rouge">ra.page.loading</code></td>
      <td>Label to use for primary loading message</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">loadingSecondary</code></td>
      <td>Optional</td>
      <td><code class="language-plaintext highlighter-rouge">string</code></td>
      <td><code class="language-plaintext highlighter-rouge">ra.message.loading</code></td>
      <td>Label to use for secondary loading message</td>
    </tr>
  </tbody>
</table>

<p>Usage:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Loading</span> <span class="na">loadingPrimary</span><span class="p">=</span><span class="s">"app.page.loading"</span> <span class="na">loadingSecondary</span><span class="p">=</span><span class="s">"app.message.loading"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<h2 id="linearprogress">LinearProgress</h2>

<p>Display a linear progress component. Display the same loading component as <code class="language-plaintext highlighter-rouge">react-admin</code> on custom inputs for consistency.</p>

<p>Usage:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">({</span> <span class="nx">data</span><span class="p">,</span> <span class="p">...</span><span class="nx">props</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">data</span> <span class="p">?</span>
        <span class="p">&lt;</span><span class="nc">LinearProgress</span> <span class="p">/&gt;</span> <span class="p">:</span>
        <span class="p">&lt;</span><span class="nc">MyInput</span> <span class="na">data</span><span class="p">=</span><span class="si">{</span><span class="nx">data</span><span class="si">}</span> <span class="p">/&gt;;</span>
</code></pre></div></div>
:ET