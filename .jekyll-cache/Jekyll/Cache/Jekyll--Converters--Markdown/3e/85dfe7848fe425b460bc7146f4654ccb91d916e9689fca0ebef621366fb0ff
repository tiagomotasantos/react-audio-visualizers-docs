I"C:<h1 id="audiovisualizer"><code class="language-plaintext highlighter-rouge">&lt;AudioVisualizer&gt;</code></h1>

<p>The <code class="language-plaintext highlighter-rouge">&lt;AudioVisualizer&gt;</code> component is part of react-audio-visualizers-core package. It is responsible to place the visualizer rendering logic inside the canvas and mainly to take care of audio functionality through the Web Audio API, like loading the audio and interacting with it (e.g. play, pause, change volume, …).</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AudioVisualizer</span><span class="p">,</span> <span class="nx">AudioVisualizerCommonProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-audio-visualizers-core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">YourVisualizer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">commonProps</span><span class="p">:</span> <span class="nx">AudioVisualizerCommonProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AudioVisualizer</span> <span class="si">{</span><span class="p">...</span><span class="nx">commonProps</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">YourVisualizerRenderComponent</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">AudioVisualizer</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Every prop (besides children) that <code class="language-plaintext highlighter-rouge">&lt;AudioVisualizer&gt;</code> receives is passed from the visualizer component, so every visualizer should accept them. These are referred as common props (<a href="./Types.html#audiovisualizercommonprops"><code class="language-plaintext highlighter-rouge">AudioVisualizerCommonProps</code></a>).</p>

<p>Here’s a list of common props:</p>

<ul>
  <li><a href="#children"><code class="language-plaintext highlighter-rouge">chidlren</code></a></li>
  <li><a href="#audio"><code class="language-plaintext highlighter-rouge">audio</code></a></li>
  <li><a href="#canvasprops"><code class="language-plaintext highlighter-rouge">canvasProps</code></a></li>
  <li><a href="#smoothingtimeconstant"><code class="language-plaintext highlighter-rouge">smoothingTimeConstant</code></a></li>
  <li><a href="#fftsize"><code class="language-plaintext highlighter-rouge">fftSize</code></a></li>
  <li><a href="#volume"><code class="language-plaintext highlighter-rouge">volume</code></a></li>
  <li><a href="#iconsColor"><code class="language-plaintext highlighter-rouge">iconsColor</code></a></li>
  <li><a href="#showmainactionicon"><code class="language-plaintext highlighter-rouge">showMainActionIcon</code></a></li>
  <li><a href="#showloadericon"><code class="language-plaintext highlighter-rouge">showLoaderIcon</code></a></li>
  <li><a href="#backgroundcolor"><code class="language-plaintext highlighter-rouge">backgroundColor</code></a></li>
  <li><a href="#backgroundimage"><code class="language-plaintext highlighter-rouge">backgroundImage</code></a></li>
  <li><a href="#mainactionrender"><code class="language-plaintext highlighter-rouge">mainActionRender</code></a></li>
  <li><a href="#onevent"><code class="language-plaintext highlighter-rouge">onEvent</code></a></li>
</ul>

<h2 id="children"><code class="language-plaintext highlighter-rouge">children</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">children</code> is required and is a <code class="language-plaintext highlighter-rouge">ReactElement</code> that is passed as children to the <code class="language-plaintext highlighter-rouge">Canvas</code> component of react-three-fiber and it should contain the rendering logic of the visualizer besides being a component that react-three-fiber can handle.</p>

<h2 id="audio"><code class="language-plaintext highlighter-rouge">audio</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">audio</code> prop is required and can either be a JavaScript <code class="language-plaintext highlighter-rouge">File</code>, a <code class="language-plaintext highlighter-rouge">string</code> with a path/URL to the audio file or an <code class="language-plaintext highlighter-rouge">ArrayBuffer</code> with audio data.</p>

<h2 id="canvasprops"><code class="language-plaintext highlighter-rouge">canvasProps</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">canvasProps</code> is an object which type comes from react-three-fiber and provides properties and methods from <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement"><code class="language-plaintext highlighter-rouge">HTMLCanvasElement</code></a>.</p>

<h2 id="smoothingtimeconstant"><code class="language-plaintext highlighter-rouge">smoothingTimeConstant</code></h2>

<p>A double value between 0 and 1 that averages the current buffer with the last buffer processed by the <code class="language-plaintext highlighter-rouge">AnalyserNode</code>. Check the offical <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant">documentation</a> for more information.</p>

<h2 id="fftsize"><code class="language-plaintext highlighter-rouge">fftSize</code></h2>

<p>Property from the <code class="language-plaintext highlighter-rouge">AnalyserNode</code> that represents the number of samples used to perform a Fast Fourier Transform. Check the offical <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize">documentation</a> for more information.</p>

<h2 id="volume"><code class="language-plaintext highlighter-rouge">volume</code></h2>

<p>A property from the <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode"><code class="language-plaintext highlighter-rouge">GainNode</code></a> that represents the amount of gain to apply. Check the offical <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain">documentation</a> for more information.</p>

<h2 id="iconscolor"><code class="language-plaintext highlighter-rouge">iconsColor</code></h2>

<p>A <code class="language-plaintext highlighter-rouge">string</code> that accepts a <a href="https://www.w3schools.com/css/css_colors.asp">CSS color</a> used in the play, pause and loader icons.</p>

<h2 id="showmainactionicon"><code class="language-plaintext highlighter-rouge">showMainActionIcon</code></h2>

<p>A <code class="language-plaintext highlighter-rouge">boolean</code> value to show/hide the icons for the main play/pause action.</p>

<h2 id="showloadericon"><code class="language-plaintext highlighter-rouge">showLoaderIcon</code></h2>

<p>A <code class="language-plaintext highlighter-rouge">boolean</code> value to show/hide the icon for the loader.</p>

<h2 id="backgroundcolor"><code class="language-plaintext highlighter-rouge">backgroundColor</code></h2>

<p>A <code class="language-plaintext highlighter-rouge">string</code> that accepts a <a href="https://www.w3schools.com/css/css_colors.asp">CSS color</a> used as background color of the canvas. It overwrites the background color specified in <a href="#canvasprops"><code class="language-plaintext highlighter-rouge">canvasProps</code></a>.</p>

<h2 id="backgroundimage"><code class="language-plaintext highlighter-rouge">backgroundImage</code></h2>

<p>A <code class="language-plaintext highlighter-rouge">string</code> that accepts an URL pointing to an image to use as background. It overwrites the <a href="#backgroundcolor"><code class="language-plaintext highlighter-rouge">backgroundColor</code></a>.</p>

<h2 id="mainactionrender"><code class="language-plaintext highlighter-rouge">mainActionRender</code></h2>

<p>A function that receives an object with <code class="language-plaintext highlighter-rouge">play</code> and <code class="language-plaintext highlighter-rouge">pause</code> properties, and has to return an object with <code class="language-plaintext highlighter-rouge">id</code> and <code class="language-plaintext highlighter-rouge">node</code> properties. The <code class="language-plaintext highlighter-rouge">play</code> and <code class="language-plaintext highlighter-rouge">pause</code> are the functions used to trigger the main action. The returned <code class="language-plaintext highlighter-rouge">id</code> should be the element id of a container to render the <code class="language-plaintext highlighter-rouge">node</code>. This is used to add your own UI to the play/pause main action by overwriting the default UI.</p>

<p>See an example bellow:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AudioVisualizer</span><span class="p">,</span> <span class="nx">AudioVisualizerCommonProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-audio-visualizers-core</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">mainActionRender</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">play</span><span class="p">,</span> <span class="nx">_</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mainActionContainer</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">node</span><span class="p">:</span> <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">play</span><span class="si">}</span><span class="p">&gt;</span>Play<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;,</span>
<span class="p">});</span>


<span class="k">export</span> <span class="kd">const</span> <span class="nx">YourVisualizer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">commonProps</span><span class="p">:</span> <span class="nx">AudioVisualizerCommonProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">AudioVisualizer</span> <span class="si">{</span><span class="p">...</span><span class="nx">commonProps</span><span class="si">}</span> <span class="na">mainActionRender</span><span class="p">=</span><span class="si">{</span><span class="nx">mainActionRender</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">YourVisualizerRenderComponent</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">AudioVisualizer</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="p">=</span><span class="s">"mainActionContainer"</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="onevent"><code class="language-plaintext highlighter-rouge">onEvent</code></h2>

<p>A function that receives an event of type <code class="language-plaintext highlighter-rouge">AudioVisualizerEvents</code> and a payload with information of the event. This is used to execute custom logic when an event occurs inside the audio visualizer.</p>

<p>See an example bellow:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AudioVisualizer</span><span class="p">,</span> <span class="nx">AudioVisualizerCommonProps</span><span class="p">,</span> <span class="nx">AudioVisualizerEvents</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-audio-visualizers-core</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">onEvent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span> <span class="o">===</span> <span class="nx">AudioVisualizerEvents</span><span class="p">.</span><span class="nx">PLAYING</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The audio started playing!!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">event</span> <span class="o">===</span> <span class="nx">AudioVisualizerEvents</span><span class="p">.</span><span class="nx">ERROR</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The following error occured:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
    <span class="p">}</span> 
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">YourVisualizer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">commonProps</span><span class="p">:</span> <span class="nx">AudioVisualizerCommonProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">AudioVisualizer</span> <span class="si">{</span><span class="p">...</span><span class="nx">commonProps</span><span class="si">}</span> <span class="na">onEvent</span><span class="p">=</span><span class="si">{</span><span class="nx">onEvent</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">YourVisualizerRenderComponent</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">AudioVisualizer</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>
:ET